{
  "0x5115fdbd65ddb422f3a9f050cd35f040781ba88423af20058fa366d21d8cb1ee": {
    "name": "AnnexBatchAuction",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "AnnexBatchAuction",
      "sourceName": "contracts/AnnexBatchAuction.sol",
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "soldAuctioningTokens",
              "type": "uint96"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "soldBiddingTokens",
              "type": "uint96"
            },
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "clearingPriceOrder",
              "type": "bytes32"
            }
          ],
          "name": "AuctionCleared",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "buyAmount",
              "type": "uint96"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "sellAmount",
              "type": "uint96"
            }
          ],
          "name": "CancellationSellOrder",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "buyAmount",
              "type": "uint96"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "sellAmount",
              "type": "uint96"
            }
          ],
          "name": "ClaimedFromOrder",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "contract IERC20",
              "name": "_auctioningToken",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "contract IERC20",
              "name": "_biddingToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "orderCancellationEndDate",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "auctionEndDate",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "_auctionedSellAmount",
              "type": "uint96"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "_minBuyAmount",
              "type": "uint96"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "minimumBiddingAmountPerOrder",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "minFundingThreshold",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "allowListContract",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "allowListData",
              "type": "bytes"
            }
          ],
          "name": "NewAuction",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "buyAmount",
              "type": "uint96"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "sellAmount",
              "type": "uint96"
            }
          ],
          "name": "NewSellOrder",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            }
          ],
          "name": "NewUser",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            }
          ],
          "name": "UserRegistration",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "FEE_DENOMINATOR",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "auctionAccessData",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "auctionAccessManager",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "auctionCounter",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "auctionData",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "auctioningToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "biddingToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "orderCancellationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionEndDate",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "initialAuctionOrder",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "minimumBiddingAmountPerOrder",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interimSumBidAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "interimOrder",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "clearingPriceOrder",
              "type": "bytes32"
            },
            {
              "internalType": "uint96",
              "name": "volumeClearingPriceOrder",
              "type": "uint96"
            },
            {
              "internalType": "bool",
              "name": "minFundingThresholdNotReached",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isAtomicClosureAllowed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "feeNumerator",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minFundingThreshold",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "_sellOrders",
              "type": "bytes32[]"
            }
          ],
          "name": "cancelSellOrders",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "orders",
              "type": "bytes32[]"
            }
          ],
          "name": "claimFromParticipantOrder",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "sumAuctioningTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sumBiddingTokenAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "order",
              "type": "bytes32"
            }
          ],
          "name": "containsOrder",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "feeNumerator",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "feeReceiverUserId",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            }
          ],
          "name": "getSecondsRemainingInBatch",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "name": "getUserId",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "_auctioningToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "_biddingToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "orderCancellationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint96",
              "name": "_auctionedSellAmount",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "_minBuyAmount",
              "type": "uint96"
            },
            {
              "internalType": "uint256",
              "name": "minimumBiddingAmountPerOrder",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minFundingThreshold",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isAtomicClosureAllowed",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "accessManagerContract",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "accessManagerContractData",
              "type": "bytes"
            }
          ],
          "name": "initiateAuction",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "numUsers",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "uint96[]",
              "name": "_minBuyAmounts",
              "type": "uint96[]"
            },
            {
              "internalType": "uint96[]",
              "name": "_sellAmounts",
              "type": "uint96[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "_prevSellOrders",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes",
              "name": "allowListCallData",
              "type": "bytes"
            }
          ],
          "name": "placeSellOrders",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "uint96[]",
              "name": "_minBuyAmounts",
              "type": "uint96[]"
            },
            {
              "internalType": "uint96[]",
              "name": "_sellAmounts",
              "type": "uint96[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "_prevSellOrders",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes",
              "name": "allowListCallData",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "orderSubmitter",
              "type": "address"
            }
          ],
          "name": "placeSellOrdersOnBehalf",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "iterationSteps",
              "type": "uint256"
            }
          ],
          "name": "precalculateSellAmountSum",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "name": "registerUser",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newFeeNumerator",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "newfeeReceiverAddress",
              "type": "address"
            }
          ],
          "name": "setFeeParameters",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            }
          ],
          "name": "settleAuction",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "clearingOrder",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "uint96[]",
              "name": "_minBuyAmount",
              "type": "uint96[]"
            },
            {
              "internalType": "uint96[]",
              "name": "_sellAmount",
              "type": "uint96[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "_prevSellOrder",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes",
              "name": "allowListCallData",
              "type": "bytes"
            }
          ],
          "name": "settleAuctionAtomically",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80637882deaf116100c3578063d73792a91161007c578063d73792a914610ccf578063e4a59ef414610ced578063e86dea4a14610d45578063ec20d0bb14610d63578063f2fde38b14610fe0578063f59c2f061461102457610158565b80637882deaf146106425780637ed18b701461071f5780638da5cb5b146107e157806391cfc1d414610815578063a7e7664414610a54578063d225269c14610a7257610158565b80633e12905f116101155780633e12905f1461046157806340b20b091461049957806355fc62d2146104e75780635cefb291146105c257806363c699a4146105ea578063715018a61461063857610158565b80630a4cd6c91461015d57806315d37b4b146102f157806319a50f49146103335780632199d5cd1461035b5780632b956ff7146103bd5780632e9936111461041f575b600080fd5b6102db600480360361016081101561017457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080356bffffffffffffffffffffffff16906020019092919080356bffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803515159060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561025557600080fd5b82018360208201111561026757600080fd5b8035906020019184600183028401116401000000008311171561028957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506110cb565b6040518082815260200191505060405180910390f35b61031d6004803603602081101561030757600080fd5b810190808035906020019092919050505061178a565b6040518082815260200191505060405180910390f35b61033b6117e4565b604051808267ffffffffffffffff16815260200191505060405180910390f35b61039d6004803603602081101561037157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117fe565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6103ff600480360360208110156103d357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611978565b604051808267ffffffffffffffff16815260200191505060405180910390f35b61044b6004803603602081101561043557600080fd5b8101908080359060200190929190505050611a0d565b6040518082815260200191505060405180910390f35b6104976004803603604081101561047757600080fd5b810190808035906020019092919080359060200190929190505050611fb4565b005b6104e5600480360360408110156104af57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506122d6565b005b610513600480360360208110156104fd57600080fd5b810190808035906020019092919050505061241b565b604051808f73ffffffffffffffffffffffffffffffffffffffff1681526020018e73ffffffffffffffffffffffffffffffffffffffff1681526020018d81526020018c81526020018b81526020018a8152602001898152602001888152602001878152602001866bffffffffffffffffffffffff168152602001851515815260200184151581526020018381526020018281526020019e50505050505050505050505050505060405180910390f35b6105ca6124f9565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6106206004803603604081101561060057600080fd5b810190808035906020019092919080359060200190929190505050612513565b60405180821515815260200191505060405180910390f35b610640612542565b005b6107026004803603604081101561065857600080fd5b81019080803590602001909291908035906020019064010000000081111561067f57600080fd5b82018360208201111561069157600080fd5b803590602001918460208302840111640100000000831117156106b357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506126af565b604051808381526020018281526020019250505060405180910390f35b6107df6004803603604081101561073557600080fd5b81019080803590602001909291908035906020019064010000000081111561075c57600080fd5b82018360208201111561076e57600080fd5b8035906020019184602083028401116401000000008311171561079057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050612cfb565b005b6107e9612f5e565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610a52600480360360a081101561082b57600080fd5b81019080803590602001909291908035906020019064010000000081111561085257600080fd5b82018360208201111561086457600080fd5b8035906020019184602083028401116401000000008311171561088657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156108e657600080fd5b8201836020820111156108f857600080fd5b8035906020019184602083028401116401000000008311171561091a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561097a57600080fd5b82018360208201111561098c57600080fd5b803590602001918460208302840111640100000000831117156109ae57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610a0e57600080fd5b820183602082011115610a2057600080fd5b80359060200191846001830284011164010000000083111715610a4257600080fd5b9091929391929390505050612f87565b005b610a5c6131ef565b6040518082815260200191505060405180910390f35b610caf600480360360a0811015610a8857600080fd5b810190808035906020019092919080359060200190640100000000811115610aaf57600080fd5b820183602082011115610ac157600080fd5b80359060200191846020830284011164010000000083111715610ae357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610b4357600080fd5b820183602082011115610b5557600080fd5b80359060200191846020830284011164010000000083111715610b7757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610bd757600080fd5b820183602082011115610be957600080fd5b80359060200191846020830284011164010000000083111715610c0b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610c6b57600080fd5b820183602082011115610c7d57600080fd5b80359060200191846001830284011164010000000083111715610c9f57600080fd5b90919293919293905050506131f5565b604051808267ffffffffffffffff16815260200191505060405180910390f35b610cd7613282565b6040518082815260200191505060405180910390f35b610d1960048036036020811015610d0357600080fd5b8101908080359060200190929190505050613288565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610d4d6132bb565b6040518082815260200191505060405180910390f35b610fc0600480360360c0811015610d7957600080fd5b810190808035906020019092919080359060200190640100000000811115610da057600080fd5b820183602082011115610db257600080fd5b80359060200191846020830284011164010000000083111715610dd457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610e3457600080fd5b820183602082011115610e4657600080fd5b80359060200191846020830284011164010000000083111715610e6857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610ec857600080fd5b820183602082011115610eda57600080fd5b80359060200191846020830284011164010000000083111715610efc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610f5c57600080fd5b820183602082011115610f6e57600080fd5b80359060200191846001830284011164010000000083111715610f9057600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132c1565b604051808267ffffffffffffffff16815260200191505060405180910390f35b61102260048036036020811015610ff657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061334f565b005b6110506004803603602081101561103a57600080fd5b8101908080359060200190929190505050613541565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015611090578082015181840152602081019050611075565b50505050905090810190601f1680156110bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000611144333061111d6103e861110f6110f26009546103e86135f190919063ffffffff16565b8e6bffffffffffffffffffffffff1661367990919063ffffffff16565b6136ff90919063ffffffff16565b8f73ffffffffffffffffffffffffffffffffffffffff16613788909392919063ffffffff16565b6000886bffffffffffffffffffffffff16116111c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f63616e6e6f742061756374696f6e207a65726f20746f6b656e7300000000000081525060200191505060405180910390fd5b6000876bffffffffffffffffffffffff161161122f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806156e76023913960400191505060405180910390fd5b60008611611288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061584d6036913960400191505060405180910390fd5b888a11156112e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061596b6029913960400191505060405180910390fd5b428911611339576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806157d66026913960400191505060405180910390fd5b61134f60016008546135f190919063ffffffff16565b600881905550611372600160006008548152602001908152602001600020613849565b600061137d33611978565b9050604051806101c001604052808e73ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff1681526020018c81526020018b81526020016113da838b8d6138ce565b815260200188815260200160008152602001600160001b81526020016000801b815260200160006bffffffffffffffffffffffff168152602001600015158152602001861515815260200160095481526020018781525060026000600854815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555061014082015181600901600c6101000a81548160ff02191690831515021790555061016082015181600901600d6101000a81548160ff02191690831515021790555061018082015181600a01556101a082015181600b01559050508360036000600854815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600460006008548152602001908152602001600020908051906020019061162b929190615483565b508b73ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff166008547f728d0fed13687f1840de94f5ae640eae49b43eda26b7ffe97e55e79a0de6e40c8e8e868f8f8f8f8e8e604051808a81526020018981526020018867ffffffffffffffff168152602001876bffffffffffffffffffffffff168152602001866bffffffffffffffffffffffff1681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611733578082015181840152602081019050611718565b50505050905090810190601f1680156117605780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390a46008549150509b9a5050505050505050505050565b600042600260008481526020019081526020016000206003015410156117b357600090506117df565b6117dc42600260008581526020019081526020016000206003015461390f90919063ffffffff16565b90505b919050565b600760009054906101000a900467ffffffffffffffff1681565b600061183c6118376001600760009054906101000a900467ffffffffffffffff1667ffffffffffffffff166135f190919063ffffffff16565b613992565b600760006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550611890600760009054906101000a900467ffffffffffffffff168360056139fd9092919063ffffffff16565b611902576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5573657220616c7265616479207265676973746572656400000000000000000081525060200191505060405180910390fd5b600760009054906101000a900467ffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff167f6838f67cb358c332087b73dbe769a6c869a5f87225236c16dda5d0013a77074c82604051808267ffffffffffffffff16815260200191505060405180910390a2919050565b600061198e826005613d2390919063ffffffff16565b156119ae576119a7826005613d9090919063ffffffff16565b9050611a08565b6119b7826117fe565b90508173ffffffffffffffffffffffffffffffffffffffff168167ffffffffffffffff167f969d438b19b6b5fb3c0d3c6f16867e519fcec4233799d6be29d1c00f2045ba2660405160405180910390a35b919050565b60008160006002600083815260200190815260200160002060030154905060008114158015611a3c5750804210155b8015611a6057506000801b6002600084815260200190815260200160002060080154145b611ab5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806158ed6028913960400191505060405180910390fd5b506000806000611ada6002600088815260200190815260200160002060040154613e6f565b92509250925060006002600088815260200190815260200160002060060154905060006002600089815260200190815260200160002060070154905060008060008590505b6000611b4685600160008f8152602001908152602001600020613e9590919063ffffffff16565b90507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b811415611b795750611c02565b809450611b8585613e6f565b909150816bffffffffffffffffffffffff169150806bffffffffffffffffffffffff1690508094508195505050611bc583876135f190919063ffffffff16565b955050611be982876bffffffffffffffffffffffff1661367990919063ffffffff16565b611bfc848761367990919063ffffffff16565b10611b1f575b600085118015611c445750611c2e82876bffffffffffffffffffffffff1661367990919063ffffffff16565b611c41848761367990919063ffffffff16565b10155b15611d4d576000611c90611c8185611c73868b6bffffffffffffffffffffffff1661367990919063ffffffff16565b6136ff90919063ffffffff16565b8761390f90919063ffffffff16565b9050808310611d1b576000611cae828561390f90919063ffffffff16565b9050611cb981613f93565b600260008f815260200190815260200160002060090160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550611d10828861390f90919063ffffffff16565b9650859b5050611d47565b611d2e838761390f90919063ffffffff16565b9550611d44600088611d3f89613f93565b6138ce565b9a505b50611dd9565b866bffffffffffffffffffffffff16851115611d7e57611d77600087611d7288613f93565b6138ce565b9950611dd8565b611d8a600087896138ce565b9950611dd5611dd0886bffffffffffffffffffffffff16611dc2896bffffffffffffffffffffffff168961367990919063ffffffff16565b6136ff90919063ffffffff16565b613f93565b90505b5b89600260008d81526020019081526020016000206008018190555084600260008d8152602001908152602001600020600b01541115611e42576001600260008d8152602001908152602001600020600901600c6101000a81548160ff0219169083151502179055505b611e5c8b826bffffffffffffffffffffffff168a89614002565b8a7f4d160a2a345f2faeb9ac2e65272820b8ca5473b80aabef416bdf7e07ee7f591082878d60405180846bffffffffffffffffffffffff168152602001836bffffffffffffffffffffffff168152602001828152602001935050505060405180910390a26000600360008d815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460008c81526020019081526020016000206000611f329190615503565b6000801b600260008d8152602001908152602001600020600401819055506000801b600260008d8152602001908152602001600020600701819055506000600260008d8152602001908152602001600020600601819055506000600260008d815260200190815260200160002060050181905550505050505050505050919050565b8160006002600083815260200190815260200160002060030154905060008114158015611fe15750804210155b801561200557506000801b6002600084815260200190815260200160002060080154145b61205a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806158ed6028913960400191505060405180910390fd5b50600061207c6002600086815260200190815260200160002060040154613e6f565b9250505060006002600086815260200190815260200160002060060154905060006002600087815260200190815260200160002060070154905060005b85811015612128576120e682600160008a8152602001908152602001600020613e9590919063ffffffff16565b915060006120f383613e6f565b92505050612118816bffffffffffffffffffffffff16856135f190919063ffffffff16565b93505080806001019150506120b9565b507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b8114156121c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f7265616368656420656e64206f66206f72646572206c6973740000000000000081525060200191505060405180910390fd5b6000806121ce83613e6f565b9250925050612202816bffffffffffffffffffffffff16866bffffffffffffffffffffffff1661367990919063ffffffff16565b612223836bffffffffffffffffffffffff168661367990919063ffffffff16565b10612296576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f746f6f206d616e79206f72646572732073756d6d65642075700000000000000081525060200191505060405180910390fd5b83600260008a81526020019081526020016000206006018190555082600260008a8152602001908152602001600020600701819055505050505050505050565b6122de6141f4565b73ffffffffffffffffffffffffffffffffffffffff166122fc612f5e565b73ffffffffffffffffffffffffffffffffffffffff1614612385576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600f8211156123df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001806157a9602d913960400191505060405180910390fd5b6123e881611978565b600a60006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550816009819055505050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050154908060060154908060070154908060080154908060090160009054906101000a90046bffffffffffffffffffffffff169080600901600c9054906101000a900460ff169080600901600d9054906101000a900460ff169080600a01549080600b015490508e565b600a60009054906101000a900467ffffffffffffffff1681565b600061253a82600160008681526020019081526020016000206141fc90919063ffffffff16565b905092915050565b61254a6141f4565b73ffffffffffffffffffffffffffffffffffffffff16612568612f5e565b73ffffffffffffffffffffffffffffffffffffffff16146125f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080836000801b60026000838152602001908152602001600020600801541415612742576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f41756374696f6e206e6f74207965742066696e6973686564000000000000000081525060200191505060405180910390fd5b60005b84518110156128055761278685828151811061275d57fe5b60200260200101516001600089815260200190815260200160002061423890919063ffffffff16565b6127f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f6f72646572206973206e6f206c6f6e67657220636c61696d61626c650000000081525060200191505060405180910390fd5b8080600101915050612745565b5061280e61554b565b60026000878152602001908152602001600020604051806101c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160098201600c9054906101000a900460ff1615151515815260200160098201600d9054906101000a900460ff16151515158152602001600a8201548152602001600b8201548152505090506000806129ba836101000151613e6f565b925092505060006129de886000815181106129d157fe5b6020026020010151613e6f565b505090506000600260008b8152602001908152602001600020600901600c9054906101000a900460ff16905060005b8951811015612ce1576000806000612a378d8581518110612a2a57fe5b6020026020010151613e6f565b9250925092508567ffffffffffffffff168367ffffffffffffffff1614612aa9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806158ca6023913960400191505060405180910390fd5b8415612ad757612ad0816bffffffffffffffffffffffff168c6135f190919063ffffffff16565b9a50612c6a565b8861010001518d8581518110612ae957fe5b60200260200101511415612bac57612b5d612b4e886bffffffffffffffffffffffff16612b408b6bffffffffffffffffffffffff168d61012001516bffffffffffffffffffffffff1661367990919063ffffffff16565b6136ff90919063ffffffff16565b8d6135f190919063ffffffff16565b9b50612ba5612b968a61012001516bffffffffffffffffffffffff16836bffffffffffffffffffffffff1661390f90919063ffffffff16565b8c6135f190919063ffffffff16565b9a50612c69565b612bd78961010001518e8681518110612bc157fe5b602002602001015161427590919063ffffffff16565b15612c4457612c3d612c2e886bffffffffffffffffffffffff16612c208b6bffffffffffffffffffffffff16856bffffffffffffffffffffffff1661367990919063ffffffff16565b6136ff90919063ffffffff16565b8d6135f190919063ffffffff16565b9b50612c68565b612c65816bffffffffffffffffffffffff168c6135f190919063ffffffff16565b9a505b5b5b8567ffffffffffffffff168e7f3f2c83616e48a2f8b3c9cc26499e2e5c61643714dac49027d82cf6732f96a91a848460405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35050508080600101915050612a0d565b50612cee8a898985614493565b5050505050509250929050565b8160026000828152602001908152602001600020600201544210612d6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603281526020018061570a6032913960400191505060405180910390fd5b6000612d7533611978565b90506000805b8451811015612ef5576000612dbe868381518110612d9557fe5b6020026020010151600160008a815260200190815260200160002061458890919063ffffffff16565b90508015612ee7576000806000612de7898681518110612dda57fe5b6020026020010151613e6f565b9250925092508667ffffffffffffffff168367ffffffffffffffff1614612e59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061569e6023913960400191505060405180910390fd5b612e7a816bffffffffffffffffffffffff16876135f190919063ffffffff16565b95508667ffffffffffffffff168a7f7edae327fe79804b2f38bd490d874a0d188d3ae8911b303205abe47400086ac4848460405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35050505b508080600101915050612d7b565b50612f5733826002600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166146339092919063ffffffff16565b5050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b8560006002600083815260200190815260200160002060030154905060008114158015612fb45750804210155b8015612fd857506000801b6002600084815260200190815260200160002060080154145b61302d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806158ed6028913960400191505060405180910390fd5b5060026000888152602001908152602001600020600901600d9054906101000a900460ff166130a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806156456028913960400191505060405180910390fd5b600186511480156130b9575060018551145b61310e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806157fc6027913960400191505060405180910390fd5b600061311933611978565b9050613176613151828960008151811061312f57fe5b60200260200101518960008151811061314457fe5b60200260200101516138ce565b600260008b81526020019081526020016000206007015461427590919063ffffffff16565b6131cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061566d6031913960400191505060405180910390fd5b6131da888888888888336146d5565b506131e488611a0d565b505050505050505050565b60085481565b60008660026000828152602001908152602001600020600301544210613266576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806159be6022913960400191505060405180910390fd5b613275888888888888336146d5565b9150509695505050505050565b6103e881565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60008760026000828152602001908152602001600020600301544210613332576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806159be6022913960400191505060405180910390fd5b613341898989898989896146d5565b915050979650505050505050565b6133576141f4565b73ffffffffffffffffffffffffffffffffffffffff16613375612f5e565b73ffffffffffffffffffffffffffffffffffffffff16146133fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613484576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806156c16026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60046020528060005260406000206000915090508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156135e95780601f106135be576101008083540402835291602001916135e9565b820191906000526020600020905b8154815290600101906020018083116135cc57829003601f168201915b505050505081565b60008082840190508381101561366f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60008083141561368c57600090506136f9565b600082840290508284828161369d57fe5b04146136f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806158836021913960400191505060405180910390fd5b809150505b92915050565b6000808211613776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b81838161377f57fe5b04905092915050565b613843846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614ced565b50505050565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b816000016000600160001b815260200190815260200160002081905550600160001b8160010160007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b81526020019081526020016000208190555050565b6000816bffffffffffffffffffffffff166060846bffffffffffffffffffffffff16901b60c08667ffffffffffffffff16901b010160001b90509392505050565b600082821115613987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b60006801000000000000000082106139f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806158a46026913960400191505060405180910390fd5b819050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613aa1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e6e6f7420696e73657274207a65726f206164647265737300000000000081525060200191505060405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff168367ffffffffffffffff161415613b4b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f43616e6e6f7420696e73657274206d61782075696e743634000000000000000081525060200191505060405180910390fd5b60008460010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff16141580613c335750600073ffffffffffffffffffffffffffffffffffffffff168460000160006001860167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15613c415760009050613d1c565b818460000160006001860167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183018460010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600190505b9392505050565b6000808360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415905092915050565b6000613d9c8383613d23565b613e0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d7573742068617665204164647265737320746f20676574204944000000000081525060200191505060405180910390fd5b60018360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1603905092915050565b600080600060c08460001c901c925060608460001c901c91508360001c90509193909250565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b821415613f13576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806157616022913960400191505060405180910390fd5b60008360000160008481526020019081526020016000205490506000801b811415613f89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615823602a913960400191505060405180910390fd5b8091505092915050565b60006c010000000000000000000000008210613ffa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061561f6026913960400191505060405180910390fd5b819050919050565b600061404f6103e861404160026000898152602001908152602001600020600a0154856bffffffffffffffffffffffff1661367990919063ffffffff16565b6136ff90919063ffffffff16565b905060026000868152602001908152602001600020600901600c9054906101000a900460ff16156140ac576140a78561409f83856bffffffffffffffffffffffff166135f190919063ffffffff16565b600086614493565b6141ed565b6000806140ce6002600089815260200190815260200160002060080154613e6f565b925092505060006140f687866bffffffffffffffffffffffff1661390f90919063ffffffff16565b9050600061413f614130876bffffffffffffffffffffffff16614122858961367990919063ffffffff16565b6136ff90919063ffffffff16565b836135f190919063ffffffff16565b90506000614184856bffffffffffffffffffffffff16614176866bffffffffffffffffffffffff168c61367990919063ffffffff16565b6136ff90919063ffffffff16565b90506141928a83838b614493565b6141e78a6141c9896bffffffffffffffffffffffff166141bb8d8b61367990919063ffffffff16565b6136ff90919063ffffffff16565b6000600a60009054906101000a900467ffffffffffffffff16614493565b50505050505b5050505050565b600033905090565b6000600160001b8214156142135760009050614232565b6000801b83600001600084815260200190815260200160002054141590505b92915050565b6000806142458484614588565b9050801561426b576000801b846001016000858152602001908152602001600020819055505b8091505092915050565b60008060008061428486613e6f565b925092509250600080600061429888613e6f565b9250925092506142cd846bffffffffffffffffffffffff16836bffffffffffffffffffffffff1661367990919063ffffffff16565b6142fc826bffffffffffffffffffffffff16876bffffffffffffffffffffffff1661367990919063ffffffff16565b1015614311576001965050505050505061448d565b614340846bffffffffffffffffffffffff16836bffffffffffffffffffffffff1661367990919063ffffffff16565b61436f826bffffffffffffffffffffffff16876bffffffffffffffffffffffff1661367990919063ffffffff16565b1115614384576000965050505050505061448d565b816bffffffffffffffffffffffff16856bffffffffffffffffffffffff1610156143b7576001965050505050505061448d565b816bffffffffffffffffffffffff16856bffffffffffffffffffffffff1611156143ea576000965050505050505061448d565b8267ffffffffffffffff168667ffffffffffffffff161415614457576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180615915602d913960400191505060405180910390fd5b8267ffffffffffffffff168667ffffffffffffffff161015614482576001965050505050505061448d565b600096505050505050505b92915050565b60006144a9826005614ddc90919063ffffffff16565b905060008411156145165761451581856002600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166146339092919063ffffffff16565b5b60008311156145815761458081846002600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166146339092919063ffffffff16565b5b5050505050565b600061459483836141fc565b6145a1576000905061462d565b60008360010160008481526020019081526020016000205490506000846000016000858152602001908152602001600020549050808560000160008481526020019081526020016000208190555081856001016000838152602001908152602001600020819055506000801b856000016000868152602001908152602001600020819055506001925050505b92915050565b6146d08363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614ced565b505050565b600080600360008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146148da576319a05a7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168173ffffffffffffffffffffffffffffffffffffffff166319a05a7e858c89896040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b15801561480c57600080fd5b505afa158015614820573d6000803e3d6000fd5b505050506040513d602081101561483657600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146148d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f75736572206e6f7420616c6c6f77656420746f20706c616365206f726465720081525060200191505060405180910390fd5b5b506000806148fd600260008c815260200190815260200160002060040154613e6f565b925092505060005b89518110156149f55761495089828151811061491d57fe5b60200260200101516bffffffffffffffffffffffff16836bffffffffffffffffffffffff1661367990919063ffffffff16565b614992846bffffffffffffffffffffffff168c848151811061496e57fe5b60200260200101516bffffffffffffffffffffffff1661367990919063ffffffff16565b106149e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806159426029913960400191505060405180910390fd5b8080600101915050614905565b5050506000614a0383611978565b91506000600260008b815260200190815260200160002060050154905060005b8951811015614c7c5760008a8281518110614a3a57fe5b60200260200101516bffffffffffffffffffffffff1611614aa6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018061573c6025913960400191505060405180910390fd5b81898281518110614ab357fe5b60200260200101516bffffffffffffffffffffffff1611614b3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f7264657220746f6f20736d616c6c000000000000000000000000000000000081525060200191505060405180910390fd5b614ba6614b70858c8481518110614b4f57fe5b60200260200101518c8581518110614b6357fe5b60200260200101516138ce565b898381518110614b7c57fe5b6020026020010151600160008f8152602001908152602001600020614eaf9092919063ffffffff16565b15614c6f57614bdf898281518110614bba57fe5b60200260200101516bffffffffffffffffffffffff16846135f190919063ffffffff16565b92508367ffffffffffffffff168b7f9304f2fc7ed6d42c0400e678dbc7283e1e9054889c3afea5f965adff66ef9eac8c8481518110614c1a57fe5b60200260200101518c8581518110614c2e57fe5b602002602001015160405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35b8080600101915050614a23565b50614ce0333084600260008f815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16613788909392919063ffffffff16565b5050979650505050505050565b6060614d4f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661515d9092919063ffffffff16565b9050600081511115614dd757808060200190516020811015614d7057600080fd5b8101908080519060200190929190505050614dd6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615994602a913960400191505060405180910390fd5b5b505050565b6000614de88383615175565b614e5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d757374206861766520494420746f206765742041646472657373000000000081525060200191505060405180910390fd5b8260000160006001840167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b600080614ebb84613e6f565b9250505060006bffffffffffffffffffffffff16816bffffffffffffffffffffffff161415614f52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f496e73657274696e67207a65726f206973206e6f7420737570706f727465640081525060200191505060405180910390fd5b600160001b8414158015614f8957507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b8414155b614ffb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f496e73657274696e6720656c656d656e74206973206e6f742076616c6964000081525060200191505060405180910390fd5b61500585856141fc565b15615014576000915050615156565b600160001b831415801561503f57506000801b85600101600085815260200190815260200160002054145b1561504e576000915050615156565b615061848461427590919063ffffffff16565b61506f576000915050615156565b5b6000801b8560000160008581526020019081526020016000205414156150ad57846001016000848152602001908152602001600020549250615070565b6000808490505b8091508660000160008281526020019081526020016000205490506150e2868261427590919063ffffffff16565b6150b4578587600001600084815260200190815260200160002081905550858760010160008381526020019081526020016000208190555081876001016000888152602001908152602001600020819055508087600001600088815260200190815260200160002081905550600193505050505b9392505050565b606061516c84846000856151fb565b90509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168360000160006001850167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415905092915050565b606082471015615256576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806157836026913960400191505060405180910390fd5b61525f856153a4565b6152d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061532157805182526020820191506020810190506020830392506152fe565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615383576040519150601f19603f3d011682016040523d82523d6000602084013e615388565b606091505b50915091506153988282866153b7565b92505050949350505050565b600080823b905060008111915050919050565b606083156153c75782905061547c565b6000835111156153da5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615441578082015181840152602081019050615426565b50505050905090810190601f16801561546e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106154c457805160ff19168380011785556154f2565b828001600101855582156154f2579182015b828111156154f15782518255916020019190600101906154d6565b5b5090506154ff9190615601565b5090565b50805460018160011615610100020316600290046000825580601f106155295750615548565b601f0160209004906000526020600020908101906155479190615601565b5b50565b604051806101c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600080191681526020016000815260200160008152602001600080191681526020016000801916815260200160006bffffffffffffffffffffffff16815260200160001515815260200160001515815260200160008152602001600081525090565b5b8082111561561a576000816000905550600101615602565b509056fe53616665436173743a2076616c756520646f65736e27742066697420696e20393620626974736e6f7420616c6c6f77656420746f20736574746c652061756374696f6e2061746f6d6963616c6c7970726563616c63756c61746553656c6c416d6f756e7453756d20697320616c726561647920746f6f20616476616e6365644f6e6c792074686520757365722063616e2063616e63656c20686973206f72646572734f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373746f6b656e732063616e6e6f742062652061756374696f6e656420666f7220667265656e6f206c6f6e67657220696e206f7264657220706c6163656d656e7420616e642063616e63656c6174696f6e2070686173655f6d696e427579416d6f756e7473206d7573742062652067726561746572207468616e2030547279696e6720746f20676574206e657874206f66206c61737420656c656d656e74416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c466565206973206e6f7420616c6c6f77656420746f2062652073657420686967686572207468616e20312e352561756374696f6e20656e642064617465206d75737420626520696e20746865206675747572654f6e6c79206f6e65206f726465722063616e20626520706c616365642061746f6d6963616c6c79547279696e6720746f20676574206e657874206f66206e6f6e2d6578697374656e7420656c656d656e746d696e696d756d42696464696e67416d6f756e745065724f72646572206973206e6f7420616c6c6f77656420746f206265207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753616665436173743a2076616c756520646f65736e27742066697420696e20363420626974736f6e6c7920616c6c6f77656420746f20636c61696d20666f722073616d65207573657241756374696f6e206e6f7420696e20736f6c7574696f6e207375626d697373696f6e20706861736575736572206973206e6f7420616c6c6f77656420746f20706c6163652073616d65206f726465722074776963656c696d6974207072696365206e6f7420626574746572207468616e206d696d696d616c206f6666657274696d6520706572696f647320617265206e6f7420636f6e6669677572656420636f72726563746c795361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565646e6f206c6f6e67657220696e206f7264657220706c6163656d656e74207068617365a26469706673582212201e1d3ddd62eeeb1b7308adf0540dcd5052f95d7416aa33b2e96fc202d8deb95264736f6c634300060c0033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x9 SSTORE PUSH1 0x1 PUSH1 0xA PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH3 0x40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH3 0x53 PUSH3 0xF7 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH3 0xFF JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x5A15 DUP1 PUSH3 0x10F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x158 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7882DEAF GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xD73792A9 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xD73792A9 EQ PUSH2 0xCCF JUMPI DUP1 PUSH4 0xE4A59EF4 EQ PUSH2 0xCED JUMPI DUP1 PUSH4 0xE86DEA4A EQ PUSH2 0xD45 JUMPI DUP1 PUSH4 0xEC20D0BB EQ PUSH2 0xD63 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xFE0 JUMPI DUP1 PUSH4 0xF59C2F06 EQ PUSH2 0x1024 JUMPI PUSH2 0x158 JUMP JUMPDEST DUP1 PUSH4 0x7882DEAF EQ PUSH2 0x642 JUMPI DUP1 PUSH4 0x7ED18B70 EQ PUSH2 0x71F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x7E1 JUMPI DUP1 PUSH4 0x91CFC1D4 EQ PUSH2 0x815 JUMPI DUP1 PUSH4 0xA7E76644 EQ PUSH2 0xA54 JUMPI DUP1 PUSH4 0xD225269C EQ PUSH2 0xA72 JUMPI PUSH2 0x158 JUMP JUMPDEST DUP1 PUSH4 0x3E12905F GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x3E12905F EQ PUSH2 0x461 JUMPI DUP1 PUSH4 0x40B20B09 EQ PUSH2 0x499 JUMPI DUP1 PUSH4 0x55FC62D2 EQ PUSH2 0x4E7 JUMPI DUP1 PUSH4 0x5CEFB291 EQ PUSH2 0x5C2 JUMPI DUP1 PUSH4 0x63C699A4 EQ PUSH2 0x5EA JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x638 JUMPI PUSH2 0x158 JUMP JUMPDEST DUP1 PUSH4 0xA4CD6C9 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0x15D37B4B EQ PUSH2 0x2F1 JUMPI DUP1 PUSH4 0x19A50F49 EQ PUSH2 0x333 JUMPI DUP1 PUSH4 0x2199D5CD EQ PUSH2 0x35B JUMPI DUP1 PUSH4 0x2B956FF7 EQ PUSH2 0x3BD JUMPI DUP1 PUSH4 0x2E993611 EQ PUSH2 0x41F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2DB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x160 DUP2 LT ISZERO PUSH2 0x174 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x10CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x307 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x178A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x33B PUSH2 0x17E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x39D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x17FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3FF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1978 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x44B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x435 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1A0D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x497 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1FB4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4E5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x22D6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x513 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x241B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP16 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 DUP2 MSTORE PUSH1 0x20 ADD DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP15 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5CA PUSH2 0x24F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x620 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x600 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2513 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x640 PUSH2 0x2542 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x702 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x658 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x67F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x691 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x6B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x26AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7DF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x735 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x75C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x76E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x790 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x2CFB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7E9 PUSH2 0x2F5E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA52 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x82B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x852 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x864 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x886 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x8E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x8F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x91A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x97A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x98C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x9AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xA0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xA20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xA42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x2F87 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA5C PUSH2 0x31EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCAF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xA88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xAAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xAE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xB43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xB55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xB77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xBD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xBE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xC0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xC6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xC7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xC9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x31F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCD7 PUSH2 0x3282 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD19 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3288 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD4D PUSH2 0x32BB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFC0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0xD79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xDA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xDB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xDD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xE34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xE46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xE68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xEC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xEDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xEFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xF5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xF6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xF90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x32C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1022 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xFF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x334F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1050 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x103A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3541 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1090 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1075 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x10BD JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x1144 CALLER ADDRESS PUSH2 0x111D PUSH2 0x3E8 PUSH2 0x110F PUSH2 0x10F2 PUSH1 0x9 SLOAD PUSH2 0x3E8 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP15 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP16 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3788 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x11C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616E6E6F742061756374696F6E207A65726F20746F6B656E73000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x122F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x56E7 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 GT PUSH2 0x1288 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x36 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x584D PUSH1 0x36 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP9 DUP11 GT ISZERO PUSH2 0x12E1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x596B PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP DUP10 GT PUSH2 0x1339 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x57D6 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x134F PUSH1 0x1 PUSH1 0x8 SLOAD PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH2 0x1372 PUSH1 0x1 PUSH1 0x0 PUSH1 0x8 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x3849 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x137D CALLER PUSH2 0x1978 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13DA DUP4 DUP12 DUP14 PUSH2 0x38CE JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH1 0x0 SHL DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 SHL DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP7 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 PUSH1 0x8 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x7 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x8 ADD SSTORE PUSH2 0x120 DUP3 ADD MLOAD DUP2 PUSH1 0x9 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x140 DUP3 ADD MLOAD DUP2 PUSH1 0x9 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x160 DUP3 ADD MLOAD DUP2 PUSH1 0x9 ADD PUSH1 0xD PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x180 DUP3 ADD MLOAD DUP2 PUSH1 0xA ADD SSTORE PUSH2 0x1A0 DUP3 ADD MLOAD DUP2 PUSH1 0xB ADD SSTORE SWAP1 POP POP DUP4 PUSH1 0x3 PUSH1 0x0 PUSH1 0x8 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x4 PUSH1 0x0 PUSH1 0x8 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x162B SWAP3 SWAP2 SWAP1 PUSH2 0x5483 JUMP JUMPDEST POP DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x8 SLOAD PUSH32 0x728D0FED13687F1840DE94F5AE640EAE49B43EDA26B7FFE97E55E79A0DE6E40C DUP15 DUP15 DUP7 DUP16 DUP16 DUP16 DUP16 DUP15 DUP15 PUSH1 0x40 MLOAD DUP1 DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1733 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1718 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1760 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP11 POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x8 SLOAD SWAP2 POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 TIMESTAMP PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD LT ISZERO PUSH2 0x17B3 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x17DF JUMP JUMPDEST PUSH2 0x17DC TIMESTAMP PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x390F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x183C PUSH2 0x1837 PUSH1 0x1 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3992 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1890 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x5 PUSH2 0x39FD SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1902 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5573657220616C72656164792072656769737465726564000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6838F67CB358C332087B73DBE769A6C869A5F87225236C16DDA5D0013A77074C DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x198E DUP3 PUSH1 0x5 PUSH2 0x3D23 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x19AE JUMPI PUSH2 0x19A7 DUP3 PUSH1 0x5 PUSH2 0x3D90 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1A08 JUMP JUMPDEST PUSH2 0x19B7 DUP3 PUSH2 0x17FE JUMP JUMPDEST SWAP1 POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH32 0x969D438B19B6B5FB3C0D3C6F16867E519FCEC4233799D6BE29D1C00F2045BA26 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 0x1A3C JUMPI POP DUP1 TIMESTAMP LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1A60 JUMPI POP PUSH1 0x0 DUP1 SHL PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD EQ JUMPDEST PUSH2 0x1AB5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x58ED PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1ADA PUSH1 0x2 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x1B46 DUP6 PUSH1 0x1 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x3E95 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP2 EQ ISZERO PUSH2 0x1B79 JUMPI POP PUSH2 0x1C02 JUMP JUMPDEST DUP1 SWAP5 POP PUSH2 0x1B85 DUP6 PUSH2 0x3E6F JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP DUP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 SWAP5 POP DUP2 SWAP6 POP POP POP PUSH2 0x1BC5 DUP4 DUP8 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP6 POP POP PUSH2 0x1BE9 DUP3 DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1BFC DUP5 DUP8 PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT PUSH2 0x1B1F JUMPI JUMPDEST PUSH1 0x0 DUP6 GT DUP1 ISZERO PUSH2 0x1C44 JUMPI POP PUSH2 0x1C2E DUP3 DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1C41 DUP5 DUP8 PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT ISZERO JUMPDEST ISZERO PUSH2 0x1D4D JUMPI PUSH1 0x0 PUSH2 0x1C90 PUSH2 0x1C81 DUP6 PUSH2 0x1C73 DUP7 DUP12 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 PUSH2 0x390F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 DUP4 LT PUSH2 0x1D1B JUMPI PUSH1 0x0 PUSH2 0x1CAE DUP3 DUP6 PUSH2 0x390F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1CB9 DUP2 PUSH2 0x3F93 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1D10 DUP3 DUP9 PUSH2 0x390F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP7 POP DUP6 SWAP12 POP POP PUSH2 0x1D47 JUMP JUMPDEST PUSH2 0x1D2E DUP4 DUP8 PUSH2 0x390F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP6 POP PUSH2 0x1D44 PUSH1 0x0 DUP9 PUSH2 0x1D3F DUP10 PUSH2 0x3F93 JUMP JUMPDEST PUSH2 0x38CE JUMP JUMPDEST SWAP11 POP JUMPDEST POP PUSH2 0x1DD9 JUMP JUMPDEST DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 GT ISZERO PUSH2 0x1D7E JUMPI PUSH2 0x1D77 PUSH1 0x0 DUP8 PUSH2 0x1D72 DUP9 PUSH2 0x3F93 JUMP JUMPDEST PUSH2 0x38CE JUMP JUMPDEST SWAP10 POP PUSH2 0x1DD8 JUMP JUMPDEST PUSH2 0x1D8A PUSH1 0x0 DUP8 DUP10 PUSH2 0x38CE JUMP JUMPDEST SWAP10 POP PUSH2 0x1DD5 PUSH2 0x1DD0 DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DC2 DUP10 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3F93 JUMP JUMPDEST SWAP1 POP JUMPDEST JUMPDEST DUP10 PUSH1 0x2 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x2 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0xB ADD SLOAD GT ISZERO PUSH2 0x1E42 JUMPI PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x1E5C DUP12 DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 DUP10 PUSH2 0x4002 JUMP JUMPDEST DUP11 PUSH32 0x4D160A2A345F2FAEB9AC2E65272820B8CA5473B80AABEF416BDF7E07EE7F5910 DUP3 DUP8 DUP14 PUSH1 0x40 MLOAD DUP1 DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x4 PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x1F32 SWAP2 SWAP1 PUSH2 0x5503 JUMP JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x2 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 SHL PUSH1 0x2 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 0x1FE1 JUMPI POP DUP1 TIMESTAMP LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2005 JUMPI POP PUSH1 0x0 DUP1 SHL PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD EQ JUMPDEST PUSH2 0x205A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x58ED PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0x207C PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2128 JUMPI PUSH2 0x20E6 DUP3 PUSH1 0x1 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x3E95 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x20F3 DUP4 PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x2118 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP4 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x20B9 JUMP JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP2 EQ ISZERO PUSH2 0x21C2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x7265616368656420656E64206F66206F72646572206C69737400000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x21CE DUP4 PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH2 0x2202 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x2223 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT PUSH2 0x2296 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x746F6F206D616E79206F72646572732073756D6D656420757000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x2 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x2 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x22DE PUSH2 0x41F4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x22FC PUSH2 0x2F5E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2385 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xF DUP3 GT ISZERO PUSH2 0x23DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x57A9 PUSH1 0x2D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x23E8 DUP2 PUSH2 0x1978 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x9 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 DUP1 PUSH1 0x5 ADD SLOAD SWAP1 DUP1 PUSH1 0x6 ADD SLOAD SWAP1 DUP1 PUSH1 0x7 ADD SLOAD SWAP1 DUP1 PUSH1 0x8 ADD SLOAD SWAP1 DUP1 PUSH1 0x9 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x9 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x9 ADD PUSH1 0xD SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0xA ADD SLOAD SWAP1 DUP1 PUSH1 0xB ADD SLOAD SWAP1 POP DUP15 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x253A DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x41FC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x254A PUSH2 0x41F4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2568 PUSH2 0x2F5E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x25F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x0 DUP1 SHL PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD EQ ISZERO PUSH2 0x2742 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x41756374696F6E206E6F74207965742066696E69736865640000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2805 JUMPI PUSH2 0x2786 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x275D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x4238 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x27F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F72646572206973206E6F206C6F6E67657220636C61696D61626C6500000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2745 JUMP JUMPDEST POP PUSH2 0x280E PUSH2 0x554B JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x8 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 DUP3 ADD PUSH1 0xD SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xB DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x29BA DUP4 PUSH2 0x100 ADD MLOAD PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH1 0x0 PUSH2 0x29DE DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x29D1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3E6F JUMP JUMPDEST POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 JUMPDEST DUP10 MLOAD DUP2 LT ISZERO PUSH2 0x2CE1 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2A37 DUP14 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2A2A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2AA9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x58CA PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 ISZERO PUSH2 0x2AD7 JUMPI PUSH2 0x2AD0 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP11 POP PUSH2 0x2C6A JUMP JUMPDEST DUP9 PUSH2 0x100 ADD MLOAD DUP14 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2AE9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ ISZERO PUSH2 0x2BAC JUMPI PUSH2 0x2B5D PUSH2 0x2B4E DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2B40 DUP12 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP14 PUSH2 0x120 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP14 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP12 POP PUSH2 0x2BA5 PUSH2 0x2B96 DUP11 PUSH2 0x120 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x390F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP13 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP11 POP PUSH2 0x2C69 JUMP JUMPDEST PUSH2 0x2BD7 DUP10 PUSH2 0x100 ADD MLOAD DUP15 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2BC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4275 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x2C44 JUMPI PUSH2 0x2C3D PUSH2 0x2C2E DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2C20 DUP12 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP14 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP12 POP PUSH2 0x2C68 JUMP JUMPDEST PUSH2 0x2C65 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP11 POP JUMPDEST JUMPDEST JUMPDEST DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP15 PUSH32 0x3F2C83616E48A2F8B3C9CC26499E2E5C61643714DAC49027D82CF6732F96A91A DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2A0D JUMP JUMPDEST POP PUSH2 0x2CEE DUP11 DUP10 DUP10 DUP6 PUSH2 0x4493 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD TIMESTAMP LT PUSH2 0x2D6A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x32 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x570A PUSH1 0x32 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2D75 CALLER PUSH2 0x1978 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2EF5 JUMPI PUSH1 0x0 PUSH2 0x2DBE DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2D95 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x4588 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x2EE7 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2DE7 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2DDA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2E59 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x569E PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2E7A DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP6 POP DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP11 PUSH32 0x7EDAE327FE79804B2F38BD490D874A0D188D3AE8911B303205ABE47400086AC4 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMPDEST POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2D7B JUMP JUMPDEST POP PUSH2 0x2F57 CALLER DUP3 PUSH1 0x2 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4633 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST DUP6 PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 0x2FB4 JUMPI POP DUP1 TIMESTAMP LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2FD8 JUMPI POP PUSH1 0x0 DUP1 SHL PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD EQ JUMPDEST PUSH2 0x302D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x58ED PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x2 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0xD SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x30A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5645 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP7 MLOAD EQ DUP1 ISZERO PUSH2 0x30B9 JUMPI POP PUSH1 0x1 DUP6 MLOAD EQ JUMPDEST PUSH2 0x310E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x57FC PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3119 CALLER PUSH2 0x1978 JUMP JUMPDEST SWAP1 POP PUSH2 0x3176 PUSH2 0x3151 DUP3 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x312F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3144 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x38CE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD PUSH2 0x4275 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x31CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x566D PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x31DA DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 CALLER PUSH2 0x46D5 JUMP JUMPDEST POP PUSH2 0x31E4 DUP9 PUSH2 0x1A0D JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP7 PUSH1 0x2 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP LT PUSH2 0x3266 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x59BE PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3275 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 CALLER PUSH2 0x46D5 JUMP JUMPDEST SWAP2 POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP8 PUSH1 0x2 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP LT PUSH2 0x3332 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x59BE PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3341 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x46D5 JUMP JUMPDEST SWAP2 POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3357 PUSH2 0x41F4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3375 PUSH2 0x2F5E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x33FE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3484 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x56C1 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x35E9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x35BE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x35E9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x35CC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x366F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x368C JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x36F9 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x369D JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x36F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5883 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x3776 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x377F JUMPI INVALID JUMPDEST DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3843 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x4CED JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SHL DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 SHL DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 SHL PUSH1 0xC0 DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 SHL ADD ADD PUSH1 0x0 SHL SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x3987 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH9 0x10000000000000000 DUP3 LT PUSH2 0x39F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x58A4 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3AA1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E6E6F7420696E73657274207A65726F2061646472657373000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3B4B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E6E6F7420696E73657274206D61782075696E7436340000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 PUSH2 0x3C33 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 DUP7 ADD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x3C41 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x3D1C JUMP JUMPDEST DUP2 DUP5 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 DUP7 ADD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 DUP4 ADD DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D9C DUP4 DUP4 PUSH2 0x3D23 JUMP JUMPDEST PUSH2 0x3E0E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4D7573742068617665204164647265737320746F206765742049440000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xC0 DUP5 PUSH1 0x0 SHR SWAP1 SHR SWAP3 POP PUSH1 0x60 DUP5 PUSH1 0x0 SHR SWAP1 SHR SWAP2 POP DUP4 PUSH1 0x0 SHR SWAP1 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP3 EQ ISZERO PUSH2 0x3F13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5761 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 EQ ISZERO PUSH2 0x3F89 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5823 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH13 0x1000000000000000000000000 DUP3 LT PUSH2 0x3FFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x561F PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404F PUSH2 0x3E8 PUSH2 0x4041 PUSH1 0x2 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0xA ADD SLOAD DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x40AC JUMPI PUSH2 0x40A7 DUP6 PUSH2 0x409F DUP4 DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP7 PUSH2 0x4493 JUMP JUMPDEST PUSH2 0x41ED JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x40CE PUSH1 0x2 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH1 0x0 PUSH2 0x40F6 DUP8 DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x390F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x413F PUSH2 0x4130 DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4122 DUP6 DUP10 PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP4 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4184 DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4176 DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x4192 DUP11 DUP4 DUP4 DUP12 PUSH2 0x4493 JUMP JUMPDEST PUSH2 0x41E7 DUP11 PUSH2 0x41C9 DUP10 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x41BB DUP14 DUP12 PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x4493 JUMP JUMPDEST POP POP POP POP POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SHL DUP3 EQ ISZERO PUSH2 0x4213 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x4232 JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4245 DUP5 DUP5 PUSH2 0x4588 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x426B JUMPI PUSH1 0x0 DUP1 SHL DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x4284 DUP7 PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4298 DUP9 PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x42CD DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x42FC DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT ISZERO PUSH2 0x4311 JUMPI PUSH1 0x1 SWAP7 POP POP POP POP POP POP POP PUSH2 0x448D JUMP JUMPDEST PUSH2 0x4340 DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x436F DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST GT ISZERO PUSH2 0x4384 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x448D JUMP JUMPDEST DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x43B7 JUMPI PUSH1 0x1 SWAP7 POP POP POP POP POP POP POP PUSH2 0x448D JUMP JUMPDEST DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x43EA JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x448D JUMP JUMPDEST DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4457 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5915 PUSH1 0x2D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x4482 JUMPI PUSH1 0x1 SWAP7 POP POP POP POP POP POP POP PUSH2 0x448D JUMP JUMPDEST PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44A9 DUP3 PUSH1 0x5 PUSH2 0x4DDC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 GT ISZERO PUSH2 0x4516 JUMPI PUSH2 0x4515 DUP2 DUP6 PUSH1 0x2 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4633 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 GT ISZERO PUSH2 0x4581 JUMPI PUSH2 0x4580 DUP2 DUP5 PUSH1 0x2 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4633 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4594 DUP4 DUP4 PUSH2 0x41FC JUMP JUMPDEST PUSH2 0x45A1 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x462D JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 SHL DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x46D0 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x4CED JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x3 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x48DA JUMPI PUSH4 0x19A05A7E PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x19A05A7E DUP6 DUP13 DUP10 DUP10 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP5 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP6 POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x480C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4820 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4836 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x48D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x75736572206E6F7420616C6C6F77656420746F20706C616365206F7264657200 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x48FD PUSH1 0x2 PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH1 0x0 JUMPDEST DUP10 MLOAD DUP2 LT ISZERO PUSH2 0x49F5 JUMPI PUSH2 0x4950 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x491D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4992 DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x496E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT PUSH2 0x49E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5942 PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4905 JUMP JUMPDEST POP POP POP PUSH1 0x0 PUSH2 0x4A03 DUP4 PUSH2 0x1978 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD SLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP10 MLOAD DUP2 LT ISZERO PUSH2 0x4C7C JUMPI PUSH1 0x0 DUP11 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4A3A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x4AA6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x573C PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4AB3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x4B3C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F7264657220746F6F20736D616C6C0000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4BA6 PUSH2 0x4B70 DUP6 DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4B4F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP13 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4B63 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x38CE JUMP JUMPDEST DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4B7C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x4EAF SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x4C6F JUMPI PUSH2 0x4BDF DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4BBA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP12 PUSH32 0x9304F2FC7ED6D42C0400E678DBC7283E1E9054889C3AFEA5F965ADFF66EF9EAC DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4C1A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP13 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4C2E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4A23 JUMP JUMPDEST POP PUSH2 0x4CE0 CALLER ADDRESS DUP5 PUSH1 0x2 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3788 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4D4F DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x515D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x4DD7 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4D70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4DD6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5994 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DE8 DUP4 DUP4 PUSH2 0x5175 JUMP JUMPDEST PUSH2 0x4E5A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4D757374206861766520494420746F2067657420416464726573730000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 DUP5 ADD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4EBB DUP5 PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP POP POP PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F52 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x496E73657274696E67207A65726F206973206E6F7420737570706F7274656400 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 SHL DUP5 EQ ISZERO DUP1 ISZERO PUSH2 0x4F89 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP5 EQ ISZERO JUMPDEST PUSH2 0x4FFB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x496E73657274696E6720656C656D656E74206973206E6F742076616C69640000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5005 DUP6 DUP6 PUSH2 0x41FC JUMP JUMPDEST ISZERO PUSH2 0x5014 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x5156 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SHL DUP4 EQ ISZERO DUP1 ISZERO PUSH2 0x503F JUMPI POP PUSH1 0x0 DUP1 SHL DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ JUMPDEST ISZERO PUSH2 0x504E JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x5156 JUMP JUMPDEST PUSH2 0x5061 DUP5 DUP5 PUSH2 0x4275 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x506F JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x5156 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP1 SHL DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO PUSH2 0x50AD JUMPI DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP3 POP PUSH2 0x5070 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 SWAP1 POP JUMPDEST DUP1 SWAP2 POP DUP7 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH2 0x50E2 DUP7 DUP3 PUSH2 0x4275 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x50B4 JUMPI DUP6 DUP8 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP6 DUP8 PUSH1 0x1 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 DUP8 PUSH1 0x1 ADD PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP8 PUSH1 0x0 ADD PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP4 POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x516C DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x51FB JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 DUP6 ADD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x5256 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5783 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x525F DUP6 PUSH2 0x53A4 JUMP JUMPDEST PUSH2 0x52D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x5321 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x52FE JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5383 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5388 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x5398 DUP3 DUP3 DUP7 PUSH2 0x53B7 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x53C7 JUMPI DUP3 SWAP1 POP PUSH2 0x547C JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x53DA JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5441 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x5426 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x546E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x54C4 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x54F2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x54F2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x54F1 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x54D6 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x54FF SWAP2 SWAP1 PUSH2 0x5601 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x5529 JUMPI POP PUSH2 0x5548 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x5547 SWAP2 SWAP1 PUSH2 0x5601 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x561A JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x5602 JUMP JUMPDEST POP SWAP1 JUMP INVALID MSTORE8 PUSH2 0x6665 NUMBER PUSH2 0x7374 GASPRICE KECCAK256 PUSH23 0x616C756520646F65736E27742066697420696E20393620 PUSH3 0x697473 PUSH15 0x6F7420616C6C6F77656420746F2073 PUSH6 0x74746C652061 PUSH22 0x6374696F6E2061746F6D6963616C6C7970726563616C PUSH4 0x756C6174 PUSH6 0x53656C6C416D PUSH16 0x756E7453756D20697320616C72656164 PUSH26 0x20746F6F20616476616E6365644F6E6C79207468652075736572 KECCAK256 PUSH4 0x616E2063 PUSH2 0x6E63 PUSH6 0x6C2068697320 PUSH16 0x72646572734F776E61626C653A206E65 PUSH24 0x206F776E657220697320746865207A65726F206164647265 PUSH20 0x73746F6B656E732063616E6E6F74206265206175 PUSH4 0x74696F6E PUSH6 0x6420666F7220 PUSH7 0x7265656E6F206C PUSH16 0x6E67657220696E206F7264657220706C PUSH2 0x6365 PUSH14 0x656E7420616E642063616E63656C PUSH2 0x7469 PUSH16 0x6E2070686173655F6D696E427579416D PUSH16 0x756E7473206D75737420626520677265 PUSH2 0x7465 PUSH19 0x207468616E2030547279696E6720746F206765 PUSH21 0x206E657874206F66206C61737420656C656D656E74 COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH10 0x6E73756666696369656E PUSH21 0x2062616C616E636520666F722063616C6C46656520 PUSH10 0x73206E6F7420616C6C6F PUSH24 0x656420746F2062652073657420686967686572207468616E KECCAK256 BALANCE 0x2E CALLDATALOAD 0x25 PUSH2 0x7563 PUSH21 0x696F6E20656E642064617465206D75737420626520 PUSH10 0x6E207468652066757475 PUSH19 0x654F6E6C79206F6E65206F726465722063616E KECCAK256 PUSH3 0x652070 PUSH13 0x616365642061746F6D6963616C PUSH13 0x79547279696E6720746F206765 PUSH21 0x206E657874206F66206E6F6E2D6578697374656E74 KECCAK256 PUSH6 0x6C656D656E74 PUSH14 0x696E696D756D42696464696E6741 PUSH14 0x6F756E745065724F726465722069 PUSH20 0x206E6F7420616C6C6F77656420746F206265207A PUSH6 0x726F53616665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F7753616665436173743A KECCAK256 PUSH23 0x616C756520646F65736E27742066697420696E20363420 PUSH3 0x697473 PUSH16 0x6E6C7920616C6C6F77656420746F2063 PUSH13 0x61696D20666F722073616D6520 PUSH22 0x73657241756374696F6E206E6F7420696E20736F6C75 PUSH21 0x696F6E207375626D697373696F6E20706861736575 PUSH20 0x6572206973206E6F7420616C6C6F77656420746F KECCAK256 PUSH17 0x6C6163652073616D65206F726465722074 PUSH24 0x6963656C696D6974207072696365206E6F74206265747465 PUSH19 0x207468616E206D696D696D616C206F66666572 PUSH21 0x696D6520706572696F647320617265206E6F742063 PUSH16 0x6E6669677572656420636F7272656374 PUSH13 0x795361666545524332303A2045 MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x7563636565646E6F206C6F6E67657220696E206F PUSH19 0x64657220706C6163656D656E74207068617365 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1E SAR RETURNDATASIZE 0xDD PUSH3 0xEEEB1B PUSH20 0x8ADF0540DCD5052F95D7416AA33B2E96FC202D8 0xDE 0xB9 MSTORE PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
          "sourceMap": "502:27678:13:-:0;;;4349:1;4319:31;;4442:1;4408:35;;;;;;;;;;;;;;;;;;;;4280:33;;;;;;;;;;884:17:1;904:12;:10;;;:12;;:::i;:::-;884:32;;935:9;926:6;;:18;;;;;;;;;;;;;;;;;;992:9;959:43;;988:1;959:43;;;;;;;;;;;;850:159;502:27678:13;;598:104:8;651:15;685:10;678:17;;598:104;:::o;502:27678:13:-;;;;;;;"
        },
        "deployedBytecode": {
          "immutableReferences": {},
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x158 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7882DEAF GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xD73792A9 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xD73792A9 EQ PUSH2 0xCCF JUMPI DUP1 PUSH4 0xE4A59EF4 EQ PUSH2 0xCED JUMPI DUP1 PUSH4 0xE86DEA4A EQ PUSH2 0xD45 JUMPI DUP1 PUSH4 0xEC20D0BB EQ PUSH2 0xD63 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xFE0 JUMPI DUP1 PUSH4 0xF59C2F06 EQ PUSH2 0x1024 JUMPI PUSH2 0x158 JUMP JUMPDEST DUP1 PUSH4 0x7882DEAF EQ PUSH2 0x642 JUMPI DUP1 PUSH4 0x7ED18B70 EQ PUSH2 0x71F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x7E1 JUMPI DUP1 PUSH4 0x91CFC1D4 EQ PUSH2 0x815 JUMPI DUP1 PUSH4 0xA7E76644 EQ PUSH2 0xA54 JUMPI DUP1 PUSH4 0xD225269C EQ PUSH2 0xA72 JUMPI PUSH2 0x158 JUMP JUMPDEST DUP1 PUSH4 0x3E12905F GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x3E12905F EQ PUSH2 0x461 JUMPI DUP1 PUSH4 0x40B20B09 EQ PUSH2 0x499 JUMPI DUP1 PUSH4 0x55FC62D2 EQ PUSH2 0x4E7 JUMPI DUP1 PUSH4 0x5CEFB291 EQ PUSH2 0x5C2 JUMPI DUP1 PUSH4 0x63C699A4 EQ PUSH2 0x5EA JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x638 JUMPI PUSH2 0x158 JUMP JUMPDEST DUP1 PUSH4 0xA4CD6C9 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0x15D37B4B EQ PUSH2 0x2F1 JUMPI DUP1 PUSH4 0x19A50F49 EQ PUSH2 0x333 JUMPI DUP1 PUSH4 0x2199D5CD EQ PUSH2 0x35B JUMPI DUP1 PUSH4 0x2B956FF7 EQ PUSH2 0x3BD JUMPI DUP1 PUSH4 0x2E993611 EQ PUSH2 0x41F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2DB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x160 DUP2 LT ISZERO PUSH2 0x174 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x10CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x307 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x178A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x33B PUSH2 0x17E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x39D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x17FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3FF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1978 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x44B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x435 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1A0D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x497 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1FB4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4E5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x22D6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x513 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x241B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP16 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 DUP2 MSTORE PUSH1 0x20 ADD DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP15 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5CA PUSH2 0x24F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x620 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x600 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2513 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x640 PUSH2 0x2542 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x702 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x658 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x67F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x691 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x6B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x26AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7DF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x735 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x75C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x76E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x790 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x2CFB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7E9 PUSH2 0x2F5E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA52 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x82B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x852 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x864 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x886 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x8E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x8F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x91A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x97A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x98C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x9AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xA0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xA20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xA42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x2F87 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA5C PUSH2 0x31EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCAF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xA88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xAAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xAE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xB43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xB55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xB77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xBD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xBE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xC0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xC6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xC7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xC9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x31F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCD7 PUSH2 0x3282 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD19 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3288 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD4D PUSH2 0x32BB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFC0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0xD79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xDA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xDB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xDD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xE34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xE46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xE68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xEC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xEDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xEFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xF5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xF6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xF90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x32C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1022 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xFF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x334F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1050 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x103A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3541 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1090 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1075 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x10BD JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x1144 CALLER ADDRESS PUSH2 0x111D PUSH2 0x3E8 PUSH2 0x110F PUSH2 0x10F2 PUSH1 0x9 SLOAD PUSH2 0x3E8 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP15 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP16 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3788 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x11C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616E6E6F742061756374696F6E207A65726F20746F6B656E73000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x122F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x56E7 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 GT PUSH2 0x1288 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x36 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x584D PUSH1 0x36 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP9 DUP11 GT ISZERO PUSH2 0x12E1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x596B PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP DUP10 GT PUSH2 0x1339 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x57D6 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x134F PUSH1 0x1 PUSH1 0x8 SLOAD PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH2 0x1372 PUSH1 0x1 PUSH1 0x0 PUSH1 0x8 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x3849 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x137D CALLER PUSH2 0x1978 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13DA DUP4 DUP12 DUP14 PUSH2 0x38CE JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH1 0x0 SHL DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 SHL DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP7 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 PUSH1 0x8 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x7 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x8 ADD SSTORE PUSH2 0x120 DUP3 ADD MLOAD DUP2 PUSH1 0x9 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x140 DUP3 ADD MLOAD DUP2 PUSH1 0x9 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x160 DUP3 ADD MLOAD DUP2 PUSH1 0x9 ADD PUSH1 0xD PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x180 DUP3 ADD MLOAD DUP2 PUSH1 0xA ADD SSTORE PUSH2 0x1A0 DUP3 ADD MLOAD DUP2 PUSH1 0xB ADD SSTORE SWAP1 POP POP DUP4 PUSH1 0x3 PUSH1 0x0 PUSH1 0x8 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x4 PUSH1 0x0 PUSH1 0x8 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x162B SWAP3 SWAP2 SWAP1 PUSH2 0x5483 JUMP JUMPDEST POP DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x8 SLOAD PUSH32 0x728D0FED13687F1840DE94F5AE640EAE49B43EDA26B7FFE97E55E79A0DE6E40C DUP15 DUP15 DUP7 DUP16 DUP16 DUP16 DUP16 DUP15 DUP15 PUSH1 0x40 MLOAD DUP1 DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1733 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1718 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1760 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP11 POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x8 SLOAD SWAP2 POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 TIMESTAMP PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD LT ISZERO PUSH2 0x17B3 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x17DF JUMP JUMPDEST PUSH2 0x17DC TIMESTAMP PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x390F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x183C PUSH2 0x1837 PUSH1 0x1 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3992 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1890 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x5 PUSH2 0x39FD SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1902 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5573657220616C72656164792072656769737465726564000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6838F67CB358C332087B73DBE769A6C869A5F87225236C16DDA5D0013A77074C DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x198E DUP3 PUSH1 0x5 PUSH2 0x3D23 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x19AE JUMPI PUSH2 0x19A7 DUP3 PUSH1 0x5 PUSH2 0x3D90 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1A08 JUMP JUMPDEST PUSH2 0x19B7 DUP3 PUSH2 0x17FE JUMP JUMPDEST SWAP1 POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH32 0x969D438B19B6B5FB3C0D3C6F16867E519FCEC4233799D6BE29D1C00F2045BA26 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 0x1A3C JUMPI POP DUP1 TIMESTAMP LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1A60 JUMPI POP PUSH1 0x0 DUP1 SHL PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD EQ JUMPDEST PUSH2 0x1AB5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x58ED PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1ADA PUSH1 0x2 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x1B46 DUP6 PUSH1 0x1 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x3E95 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP2 EQ ISZERO PUSH2 0x1B79 JUMPI POP PUSH2 0x1C02 JUMP JUMPDEST DUP1 SWAP5 POP PUSH2 0x1B85 DUP6 PUSH2 0x3E6F JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP DUP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 SWAP5 POP DUP2 SWAP6 POP POP POP PUSH2 0x1BC5 DUP4 DUP8 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP6 POP POP PUSH2 0x1BE9 DUP3 DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1BFC DUP5 DUP8 PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT PUSH2 0x1B1F JUMPI JUMPDEST PUSH1 0x0 DUP6 GT DUP1 ISZERO PUSH2 0x1C44 JUMPI POP PUSH2 0x1C2E DUP3 DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1C41 DUP5 DUP8 PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT ISZERO JUMPDEST ISZERO PUSH2 0x1D4D JUMPI PUSH1 0x0 PUSH2 0x1C90 PUSH2 0x1C81 DUP6 PUSH2 0x1C73 DUP7 DUP12 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 PUSH2 0x390F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 DUP4 LT PUSH2 0x1D1B JUMPI PUSH1 0x0 PUSH2 0x1CAE DUP3 DUP6 PUSH2 0x390F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1CB9 DUP2 PUSH2 0x3F93 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1D10 DUP3 DUP9 PUSH2 0x390F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP7 POP DUP6 SWAP12 POP POP PUSH2 0x1D47 JUMP JUMPDEST PUSH2 0x1D2E DUP4 DUP8 PUSH2 0x390F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP6 POP PUSH2 0x1D44 PUSH1 0x0 DUP9 PUSH2 0x1D3F DUP10 PUSH2 0x3F93 JUMP JUMPDEST PUSH2 0x38CE JUMP JUMPDEST SWAP11 POP JUMPDEST POP PUSH2 0x1DD9 JUMP JUMPDEST DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 GT ISZERO PUSH2 0x1D7E JUMPI PUSH2 0x1D77 PUSH1 0x0 DUP8 PUSH2 0x1D72 DUP9 PUSH2 0x3F93 JUMP JUMPDEST PUSH2 0x38CE JUMP JUMPDEST SWAP10 POP PUSH2 0x1DD8 JUMP JUMPDEST PUSH2 0x1D8A PUSH1 0x0 DUP8 DUP10 PUSH2 0x38CE JUMP JUMPDEST SWAP10 POP PUSH2 0x1DD5 PUSH2 0x1DD0 DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DC2 DUP10 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3F93 JUMP JUMPDEST SWAP1 POP JUMPDEST JUMPDEST DUP10 PUSH1 0x2 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x2 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0xB ADD SLOAD GT ISZERO PUSH2 0x1E42 JUMPI PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x1E5C DUP12 DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 DUP10 PUSH2 0x4002 JUMP JUMPDEST DUP11 PUSH32 0x4D160A2A345F2FAEB9AC2E65272820B8CA5473B80AABEF416BDF7E07EE7F5910 DUP3 DUP8 DUP14 PUSH1 0x40 MLOAD DUP1 DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x4 PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x1F32 SWAP2 SWAP1 PUSH2 0x5503 JUMP JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x2 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 SHL PUSH1 0x2 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 0x1FE1 JUMPI POP DUP1 TIMESTAMP LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2005 JUMPI POP PUSH1 0x0 DUP1 SHL PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD EQ JUMPDEST PUSH2 0x205A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x58ED PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0x207C PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2128 JUMPI PUSH2 0x20E6 DUP3 PUSH1 0x1 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x3E95 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x20F3 DUP4 PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x2118 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP4 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x20B9 JUMP JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP2 EQ ISZERO PUSH2 0x21C2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x7265616368656420656E64206F66206F72646572206C69737400000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x21CE DUP4 PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH2 0x2202 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x2223 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT PUSH2 0x2296 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x746F6F206D616E79206F72646572732073756D6D656420757000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x2 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x2 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x22DE PUSH2 0x41F4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x22FC PUSH2 0x2F5E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2385 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xF DUP3 GT ISZERO PUSH2 0x23DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x57A9 PUSH1 0x2D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x23E8 DUP2 PUSH2 0x1978 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x9 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 DUP1 PUSH1 0x5 ADD SLOAD SWAP1 DUP1 PUSH1 0x6 ADD SLOAD SWAP1 DUP1 PUSH1 0x7 ADD SLOAD SWAP1 DUP1 PUSH1 0x8 ADD SLOAD SWAP1 DUP1 PUSH1 0x9 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x9 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x9 ADD PUSH1 0xD SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0xA ADD SLOAD SWAP1 DUP1 PUSH1 0xB ADD SLOAD SWAP1 POP DUP15 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x253A DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x41FC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x254A PUSH2 0x41F4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2568 PUSH2 0x2F5E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x25F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x0 DUP1 SHL PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD EQ ISZERO PUSH2 0x2742 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x41756374696F6E206E6F74207965742066696E69736865640000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2805 JUMPI PUSH2 0x2786 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x275D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x4238 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x27F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F72646572206973206E6F206C6F6E67657220636C61696D61626C6500000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2745 JUMP JUMPDEST POP PUSH2 0x280E PUSH2 0x554B JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x8 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 DUP3 ADD PUSH1 0xD SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xB DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x29BA DUP4 PUSH2 0x100 ADD MLOAD PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH1 0x0 PUSH2 0x29DE DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x29D1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3E6F JUMP JUMPDEST POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 JUMPDEST DUP10 MLOAD DUP2 LT ISZERO PUSH2 0x2CE1 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2A37 DUP14 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2A2A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2AA9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x58CA PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 ISZERO PUSH2 0x2AD7 JUMPI PUSH2 0x2AD0 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP11 POP PUSH2 0x2C6A JUMP JUMPDEST DUP9 PUSH2 0x100 ADD MLOAD DUP14 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2AE9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ ISZERO PUSH2 0x2BAC JUMPI PUSH2 0x2B5D PUSH2 0x2B4E DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2B40 DUP12 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP14 PUSH2 0x120 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP14 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP12 POP PUSH2 0x2BA5 PUSH2 0x2B96 DUP11 PUSH2 0x120 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x390F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP13 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP11 POP PUSH2 0x2C69 JUMP JUMPDEST PUSH2 0x2BD7 DUP10 PUSH2 0x100 ADD MLOAD DUP15 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2BC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4275 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x2C44 JUMPI PUSH2 0x2C3D PUSH2 0x2C2E DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2C20 DUP12 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP14 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP12 POP PUSH2 0x2C68 JUMP JUMPDEST PUSH2 0x2C65 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP11 POP JUMPDEST JUMPDEST JUMPDEST DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP15 PUSH32 0x3F2C83616E48A2F8B3C9CC26499E2E5C61643714DAC49027D82CF6732F96A91A DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2A0D JUMP JUMPDEST POP PUSH2 0x2CEE DUP11 DUP10 DUP10 DUP6 PUSH2 0x4493 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD TIMESTAMP LT PUSH2 0x2D6A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x32 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x570A PUSH1 0x32 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2D75 CALLER PUSH2 0x1978 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2EF5 JUMPI PUSH1 0x0 PUSH2 0x2DBE DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2D95 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x4588 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x2EE7 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2DE7 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2DDA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2E59 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x569E PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2E7A DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP6 POP DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP11 PUSH32 0x7EDAE327FE79804B2F38BD490D874A0D188D3AE8911B303205ABE47400086AC4 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMPDEST POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2D7B JUMP JUMPDEST POP PUSH2 0x2F57 CALLER DUP3 PUSH1 0x2 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4633 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST DUP6 PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 0x2FB4 JUMPI POP DUP1 TIMESTAMP LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2FD8 JUMPI POP PUSH1 0x0 DUP1 SHL PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD EQ JUMPDEST PUSH2 0x302D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x58ED PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x2 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0xD SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x30A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5645 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP7 MLOAD EQ DUP1 ISZERO PUSH2 0x30B9 JUMPI POP PUSH1 0x1 DUP6 MLOAD EQ JUMPDEST PUSH2 0x310E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x57FC PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3119 CALLER PUSH2 0x1978 JUMP JUMPDEST SWAP1 POP PUSH2 0x3176 PUSH2 0x3151 DUP3 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x312F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3144 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x38CE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD PUSH2 0x4275 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x31CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x566D PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x31DA DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 CALLER PUSH2 0x46D5 JUMP JUMPDEST POP PUSH2 0x31E4 DUP9 PUSH2 0x1A0D JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP7 PUSH1 0x2 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP LT PUSH2 0x3266 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x59BE PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3275 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 CALLER PUSH2 0x46D5 JUMP JUMPDEST SWAP2 POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP8 PUSH1 0x2 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP LT PUSH2 0x3332 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x59BE PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3341 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x46D5 JUMP JUMPDEST SWAP2 POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3357 PUSH2 0x41F4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3375 PUSH2 0x2F5E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x33FE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3484 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x56C1 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x35E9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x35BE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x35E9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x35CC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x366F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x368C JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x36F9 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x369D JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x36F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5883 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x3776 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x377F JUMPI INVALID JUMPDEST DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3843 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x4CED JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SHL DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 SHL DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 SHL PUSH1 0xC0 DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 SHL ADD ADD PUSH1 0x0 SHL SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x3987 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH9 0x10000000000000000 DUP3 LT PUSH2 0x39F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x58A4 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3AA1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E6E6F7420696E73657274207A65726F2061646472657373000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3B4B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E6E6F7420696E73657274206D61782075696E7436340000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 PUSH2 0x3C33 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 DUP7 ADD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x3C41 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x3D1C JUMP JUMPDEST DUP2 DUP5 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 DUP7 ADD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 DUP4 ADD DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D9C DUP4 DUP4 PUSH2 0x3D23 JUMP JUMPDEST PUSH2 0x3E0E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4D7573742068617665204164647265737320746F206765742049440000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xC0 DUP5 PUSH1 0x0 SHR SWAP1 SHR SWAP3 POP PUSH1 0x60 DUP5 PUSH1 0x0 SHR SWAP1 SHR SWAP2 POP DUP4 PUSH1 0x0 SHR SWAP1 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP3 EQ ISZERO PUSH2 0x3F13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5761 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 EQ ISZERO PUSH2 0x3F89 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5823 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH13 0x1000000000000000000000000 DUP3 LT PUSH2 0x3FFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x561F PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404F PUSH2 0x3E8 PUSH2 0x4041 PUSH1 0x2 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0xA ADD SLOAD DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x40AC JUMPI PUSH2 0x40A7 DUP6 PUSH2 0x409F DUP4 DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP7 PUSH2 0x4493 JUMP JUMPDEST PUSH2 0x41ED JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x40CE PUSH1 0x2 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH1 0x0 PUSH2 0x40F6 DUP8 DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x390F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x413F PUSH2 0x4130 DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4122 DUP6 DUP10 PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP4 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4184 DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4176 DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x4192 DUP11 DUP4 DUP4 DUP12 PUSH2 0x4493 JUMP JUMPDEST PUSH2 0x41E7 DUP11 PUSH2 0x41C9 DUP10 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x41BB DUP14 DUP12 PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x36FF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x4493 JUMP JUMPDEST POP POP POP POP POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SHL DUP3 EQ ISZERO PUSH2 0x4213 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x4232 JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4245 DUP5 DUP5 PUSH2 0x4588 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x426B JUMPI PUSH1 0x0 DUP1 SHL DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x4284 DUP7 PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4298 DUP9 PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x42CD DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x42FC DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT ISZERO PUSH2 0x4311 JUMPI PUSH1 0x1 SWAP7 POP POP POP POP POP POP POP PUSH2 0x448D JUMP JUMPDEST PUSH2 0x4340 DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x436F DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST GT ISZERO PUSH2 0x4384 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x448D JUMP JUMPDEST DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x43B7 JUMPI PUSH1 0x1 SWAP7 POP POP POP POP POP POP POP PUSH2 0x448D JUMP JUMPDEST DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x43EA JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x448D JUMP JUMPDEST DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4457 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5915 PUSH1 0x2D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x4482 JUMPI PUSH1 0x1 SWAP7 POP POP POP POP POP POP POP PUSH2 0x448D JUMP JUMPDEST PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44A9 DUP3 PUSH1 0x5 PUSH2 0x4DDC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 GT ISZERO PUSH2 0x4516 JUMPI PUSH2 0x4515 DUP2 DUP6 PUSH1 0x2 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4633 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 GT ISZERO PUSH2 0x4581 JUMPI PUSH2 0x4580 DUP2 DUP5 PUSH1 0x2 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4633 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4594 DUP4 DUP4 PUSH2 0x41FC JUMP JUMPDEST PUSH2 0x45A1 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x462D JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 SHL DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x46D0 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x4CED JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x3 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x48DA JUMPI PUSH4 0x19A05A7E PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x19A05A7E DUP6 DUP13 DUP10 DUP10 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP5 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP6 POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x480C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4820 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4836 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x48D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x75736572206E6F7420616C6C6F77656420746F20706C616365206F7264657200 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x48FD PUSH1 0x2 PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH1 0x0 JUMPDEST DUP10 MLOAD DUP2 LT ISZERO PUSH2 0x49F5 JUMPI PUSH2 0x4950 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x491D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4992 DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x496E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3679 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT PUSH2 0x49E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5942 PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4905 JUMP JUMPDEST POP POP POP PUSH1 0x0 PUSH2 0x4A03 DUP4 PUSH2 0x1978 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD SLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP10 MLOAD DUP2 LT ISZERO PUSH2 0x4C7C JUMPI PUSH1 0x0 DUP11 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4A3A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x4AA6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x573C PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4AB3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x4B3C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F7264657220746F6F20736D616C6C0000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4BA6 PUSH2 0x4B70 DUP6 DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4B4F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP13 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4B63 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x38CE JUMP JUMPDEST DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4B7C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x4EAF SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x4C6F JUMPI PUSH2 0x4BDF DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4BBA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0x35F1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP12 PUSH32 0x9304F2FC7ED6D42C0400E678DBC7283E1E9054889C3AFEA5F965ADFF66EF9EAC DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4C1A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP13 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4C2E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4A23 JUMP JUMPDEST POP PUSH2 0x4CE0 CALLER ADDRESS DUP5 PUSH1 0x2 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3788 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4D4F DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x515D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x4DD7 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4D70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4DD6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5994 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DE8 DUP4 DUP4 PUSH2 0x5175 JUMP JUMPDEST PUSH2 0x4E5A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4D757374206861766520494420746F2067657420416464726573730000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 DUP5 ADD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4EBB DUP5 PUSH2 0x3E6F JUMP JUMPDEST SWAP3 POP POP POP PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F52 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x496E73657274696E67207A65726F206973206E6F7420737570706F7274656400 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 SHL DUP5 EQ ISZERO DUP1 ISZERO PUSH2 0x4F89 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP5 EQ ISZERO JUMPDEST PUSH2 0x4FFB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x496E73657274696E6720656C656D656E74206973206E6F742076616C69640000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5005 DUP6 DUP6 PUSH2 0x41FC JUMP JUMPDEST ISZERO PUSH2 0x5014 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x5156 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SHL DUP4 EQ ISZERO DUP1 ISZERO PUSH2 0x503F JUMPI POP PUSH1 0x0 DUP1 SHL DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ JUMPDEST ISZERO PUSH2 0x504E JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x5156 JUMP JUMPDEST PUSH2 0x5061 DUP5 DUP5 PUSH2 0x4275 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x506F JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x5156 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP1 SHL DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO PUSH2 0x50AD JUMPI DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP3 POP PUSH2 0x5070 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 SWAP1 POP JUMPDEST DUP1 SWAP2 POP DUP7 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH2 0x50E2 DUP7 DUP3 PUSH2 0x4275 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x50B4 JUMPI DUP6 DUP8 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP6 DUP8 PUSH1 0x1 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 DUP8 PUSH1 0x1 ADD PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP8 PUSH1 0x0 ADD PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP4 POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x516C DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x51FB JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 DUP6 ADD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x5256 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5783 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x525F DUP6 PUSH2 0x53A4 JUMP JUMPDEST PUSH2 0x52D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x5321 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x52FE JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5383 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5388 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x5398 DUP3 DUP3 DUP7 PUSH2 0x53B7 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x53C7 JUMPI DUP3 SWAP1 POP PUSH2 0x547C JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x53DA JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5441 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x5426 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x546E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x54C4 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x54F2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x54F2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x54F1 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x54D6 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x54FF SWAP2 SWAP1 PUSH2 0x5601 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x5529 JUMPI POP PUSH2 0x5548 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x5547 SWAP2 SWAP1 PUSH2 0x5601 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x561A JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x5602 JUMP JUMPDEST POP SWAP1 JUMP INVALID MSTORE8 PUSH2 0x6665 NUMBER PUSH2 0x7374 GASPRICE KECCAK256 PUSH23 0x616C756520646F65736E27742066697420696E20393620 PUSH3 0x697473 PUSH15 0x6F7420616C6C6F77656420746F2073 PUSH6 0x74746C652061 PUSH22 0x6374696F6E2061746F6D6963616C6C7970726563616C PUSH4 0x756C6174 PUSH6 0x53656C6C416D PUSH16 0x756E7453756D20697320616C72656164 PUSH26 0x20746F6F20616476616E6365644F6E6C79207468652075736572 KECCAK256 PUSH4 0x616E2063 PUSH2 0x6E63 PUSH6 0x6C2068697320 PUSH16 0x72646572734F776E61626C653A206E65 PUSH24 0x206F776E657220697320746865207A65726F206164647265 PUSH20 0x73746F6B656E732063616E6E6F74206265206175 PUSH4 0x74696F6E PUSH6 0x6420666F7220 PUSH7 0x7265656E6F206C PUSH16 0x6E67657220696E206F7264657220706C PUSH2 0x6365 PUSH14 0x656E7420616E642063616E63656C PUSH2 0x7469 PUSH16 0x6E2070686173655F6D696E427579416D PUSH16 0x756E7473206D75737420626520677265 PUSH2 0x7465 PUSH19 0x207468616E2030547279696E6720746F206765 PUSH21 0x206E657874206F66206C61737420656C656D656E74 COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH10 0x6E73756666696369656E PUSH21 0x2062616C616E636520666F722063616C6C46656520 PUSH10 0x73206E6F7420616C6C6F PUSH24 0x656420746F2062652073657420686967686572207468616E KECCAK256 BALANCE 0x2E CALLDATALOAD 0x25 PUSH2 0x7563 PUSH21 0x696F6E20656E642064617465206D75737420626520 PUSH10 0x6E207468652066757475 PUSH19 0x654F6E6C79206F6E65206F726465722063616E KECCAK256 PUSH3 0x652070 PUSH13 0x616365642061746F6D6963616C PUSH13 0x79547279696E6720746F206765 PUSH21 0x206E657874206F66206E6F6E2D6578697374656E74 KECCAK256 PUSH6 0x6C656D656E74 PUSH14 0x696E696D756D42696464696E6741 PUSH14 0x6F756E745065724F726465722069 PUSH20 0x206E6F7420616C6C6F77656420746F206265207A PUSH6 0x726F53616665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F7753616665436173743A KECCAK256 PUSH23 0x616C756520646F65736E27742066697420696E20363420 PUSH3 0x697473 PUSH16 0x6E6C7920616C6C6F77656420746F2063 PUSH13 0x61696D20666F722073616D6520 PUSH22 0x73657241756374696F6E206E6F7420696E20736F6C75 PUSH21 0x696F6E207375626D697373696F6E20706861736575 PUSH20 0x6572206973206E6F7420616C6C6F77656420746F KECCAK256 PUSH17 0x6C6163652073616D65206F726465722074 PUSH24 0x6963656C696D6974207072696365206E6F74206265747465 PUSH19 0x207468616E206D696D696D616C206F66666572 PUSH21 0x696D6520706572696F647320617265206E6F742063 PUSH16 0x6E6669677572656420636F7272656374 PUSH13 0x795361666545524332303A2045 MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x7563636565646E6F206C6F6E67657220696E206F PUSH19 0x64657220706C6163656D656E74207068617365 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1E SAR RETURNDATASIZE 0xDD PUSH3 0xEEEB1B PUSH20 0x8ADF0540DCD5052F95D7416AA33B2E96FC202D8 0xDE 0xB9 MSTORE PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
          "sourceMap": "502:27678:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5373:2839;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;27699:298;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4172:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;27099:311;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;27416:277;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;16373:4737;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13711:1401;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4450:450;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3921:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4408:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;28003:173;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1717:145:1;;;:::i;:::-;;21207:2828:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;12164:1353;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1085:85:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;15118:1181:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4220:29;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8218:537;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4356:46;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4003:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4319:31;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8761:581;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;2011:240:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4064:50:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5373:2839;5831:7;6083:224;6130:10;6162:4;6181:110;4398:4;6181:59;6206:33;6226:12;;4398:4;6206:19;;:33;;;;:::i;:::-;6181:20;:24;;;;:59;;;;:::i;:::-;:63;;:110;;;;:::i;:::-;6083:16;:33;;;;:224;;;;;;:::i;:::-;6348:1;6325:20;:24;;;6317:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6414:1;6398:13;:17;;;6390:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6517:1;6486:28;:32;6465:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6657:14;6629:24;:42;;6608:130;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6786:15;6769:14;:32;6748:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6892:21;6911:1;6892:14;;:18;;:21;;;;:::i;:::-;6875:14;:38;;;;6923:48;:10;:26;6934:14;;6923:26;;;;;;;;;;;:46;:48::i;:::-;6981:13;6997:21;7007:10;6997:9;:21::i;:::-;6981:37;;7058:559;;;;;;;;7083:16;7058:559;;;;;;7113:13;7058:559;;;;;;7140:24;7058:559;;;;7178:14;7058:559;;;;7206:142;7259:6;7283:13;7314:20;7206:35;:142::i;:::-;7058:559;;;;7362:28;7058:559;;;;7404:1;7058:559;;;;368:66:27;7419:35:13;;7058:559;;;;7476:1;7468:10;;7058:559;;;;7492:1;7058:559;;;;;;7507:5;7058:559;;;;;;7526:22;7058:559;;;;;;7562:12;;7058:559;;;;7588:19;7058:559;;;7028:11;:27;7040:14;;7028:27;;;;;;;;;;;:589;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7666:21;7627:20;:36;7648:14;;7627:36;;;;;;;;;;;;:60;;;;;;;;;;;;;;;;;;7733:25;7697:17;:33;7715:14;;7697:33;;;;;;;;;;;:61;;;;;;;;;;;;:::i;:::-;;7855:13;7773:401;;7825:16;7773:401;;7797:14;;7773:401;7882:24;7920:14;7948:6;7968:20;8002:13;8029:28;8071:19;8104:21;8139:25;7773:401;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8191:14;;8184:21;;;5373:2839;;;;;;;;;;;;;:::o;27699:298::-;27799:7;27866:15;27826:11;:22;27838:9;27826:22;;;;;;;;;;;:37;;;:55;27822:94;;;27904:1;27897:8;;;;27822:94;27932:58;27974:15;27932:11;:22;27944:9;27932:22;;;;;;;;;;;:37;;;:41;;:58;;;;:::i;:::-;27925:65;;27699:298;;;;:::o;4172:22::-;;;;;;;;;;;;;:::o;27099:311::-;27151:13;27187:26;:15;27200:1;27187:8;;;;;;;;;;;:12;;;;:15;;;;:::i;:::-;:24;:26::i;:::-;27176:8;;:37;;;;;;;;;;;;;;;;;;27244:38;27267:8;;;;;;;;;;;27277:4;27244:15;:22;;:38;;;;;:::i;:::-;27223:108;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27350:8;;;;;;;;;;;27341:17;;27390:4;27373:30;;;27396:6;27373:30;;;;;;;;;;;;;;;;;;;;27099:311;;;:::o;27416:277::-;27465:13;27494:32;27521:4;27494:15;:26;;:32;;;;:::i;:::-;27490:197;;;27551:27;27573:4;27551:15;:21;;:27;;;;:::i;:::-;27542:36;;27490:197;;;27618:18;27631:4;27618:12;:18::i;:::-;27609:27;;27671:4;27655:21;;27663:6;27655:21;;;;;;;;;;;;27490:197;27416:277;;;:::o;16373:4737::-;16492:21;16464:9;1432:22;1457:11;:22;1469:9;1457:22;;;;;;;;;;;:37;;;1432:62;;1551:1;1533:14;:19;;:76;;;;;1595:14;1576:15;:33;;1533:76;:155;;;;;1686:1;1678:10;;1633:11;:22;1645:9;1633:22;;;;;;;;;;;:41;;;:55;1533:155;1508:254;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16373:4737;16543:19:::1;16576:28:::0;16618:26:::1;16657:56;:11;:22;16669:9;16657:22;;;;;;;;;;;:42;;;:54;:56::i;:::-;16529:184;;;;;;16724:21;16748:11;:22;16760:9;16748:22;;;;;;;;;;;:42;;;16724:66;;16800:20;16823:11;:22;16835:9;16823:22;;;;;;;;;;;:35;;;16800:58;;16868:23;16901:24:::0;16935:34:::1;16972:19;16935:56;;17092:500;17109:17;17129:40;17156:12;17129:10;:21;17140:9;17129:21;;;;;;;;;;;:26;;:40;;;;:::i;:::-;17109:60;;577:66:27;17200:33:13;;17187:9;:46;17183:90;;;17253:5;;;17183:90;17301:9;17286:24;;17364:26;:12;:24;:26::i;:::-;17324:66;;;;;;;;;;;;;;;;;;;;;17420:35;17438:16;17420:13;:17;;:35;;;;:::i;:::-;17404:51;;17092:500;17540:41;17564:16;17540:19;:23;;;;:41;;;;:::i;:::-;17487:34;17505:15;17487:13;:17;;:34;;;;:::i;:::-;:94;17092:500;;;17635:1;17619:13;:17;:124;;;;;17702:41;17726:16;17702:19;:23;;;;:41;;;;:::i;:::-;17652:34;17670:15;17652:13;:17;;:34;;;;:::i;:::-;:91;;17619:124;17602:2556;;;17915:21;17939:111;17974:62;18020:15;17974:41;17998:16;17974:19;:23;;;;:41;;;;:::i;:::-;:45;;:62;;;;:::i;:::-;17939:13;:17;;:111;;;;:::i;:::-;17915:135;;18089:13;18069:16;:33;18065:998;;18219:31;18253:73;18295:13;18253:16;:20;;:73;;;;:::i;:::-;18219:107;;18411:34;:23;:32;:34::i;:::-;18344:11;:22;18356:9;18344:22;;;;;;;;;;;:64;;;:101;;;;;;;;;;;;;;;;;;18479:32;18497:13;18479;:17;;:32;;;;:::i;:::-;18463:48;;18545:12;18529:28;;18065:998;;;;18816:35;18834:16;18816:13;:17;;:35;;;;:::i;:::-;18800:51;;18885:163;18942:1;18965:19;19006:24;:13;:22;:24::i;:::-;18885:35;:163::i;:::-;18869:179;;18065:998;17602:2556;;;;19320:21;19304:37;;:13;:37;19300:848;;;19471:163;19528:1;19551:19;19592:24;:13;:22;:24::i;:::-;19471:35;:163::i;:::-;19455:179;;19300:848;;;19798:160;19855:1;19878:19;19919:21;19798:35;:160::i;:::-;19782:176;;20006:127;:99;20083:21;20006:99;;:55;20041:19;20006:55;;:13;:34;;:55;;;;:::i;:::-;:76;;:99;;;;:::i;:::-;:125;:127::i;:::-;19976:157;;19300:848;17602:2556;20211:13;20167:11;:22;20179:9;20167:22;;;;;;;;;;;:41;;:57;;;;20284:13;20239:11;:22;20251:9;20239:22;;;;;;;;;;;:42;;;:58;20235:148;;;20368:4;20313:11;:22;20325:9;20313:22;;;;;;;;;;;:52;;;:59;;;;;;;;;;;;;;;;;;20235:148;20392:162;20435:9;20458:27;20392:162;;20499:12;20525:19;20392:29;:162::i;:::-;20597:9;20569:150;20620:27;20668:13;20696;20569:150;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20794:1;20752:20;:31;20773:9;20752:31;;;;;;;;;;;;:44;;;;;;;;;;;;;;;;;;20813:17;:28;20831:9;20813:28;;;;;;;;;;;;20806:35;;;;:::i;:::-;20904:1;20896:10:::0;::::1;20851:11;:22;20863:9;20851:22;;;;;;;;;;;:42;;:55;;;;20962:1;20954:10:::0;::::1;20916:11;:22;20928:9;20916:22;;;;;;;;;;;:35;;:48;;;;21027:1;20974:11;:22;20986:9;20974:22;;;;;;;;;;;:42;;:55;;;;21101:1;21039:11;:22;21051:9;21039:22;;;;;;;;;;;:51;;:64;;;;1782:1;;;;;;;;16373:4737:::0;;;;:::o;13711:1401::-;13844:9;1432:22;1457:11;:22;1469:9;1457:22;;;;;;;;;;;:37;;;1432:62;;1551:1;1533:14;:19;;:76;;;;;1595:14;1576:15;:33;;1533:76;:155;;;;;1686:1;1678:10;;1633:11;:22;1645:9;1633:22;;;;;;;;;;;:41;;;:55;1533:155;1508:254;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13711:1401;13870:27:::1;13901:74;:11;:22;13913:9;13901:22;;;;;;;;;;;:51;;;:72;:74::i;:::-;13865:110;;;;13985:20;14008:11;:22;14020:9;14008:22;;;;;;;;;;;:42;;;13985:65;;14060:17;14080:11;:22;14092:9;14080:22;;;;;;;;;;;:35;;;14060:55;;14131:9;14126:251;14150:14;14146:1;:18;14126:251;;;14197:37;14224:9;14197:10;:21;14208:9;14197:21;;;;;;;;;;;:26;;:37;;;;:::i;:::-;14185:49;;14253:23;14280;:9;:21;:23::i;:::-;14248:55;;;;14332:34;14349:16;14332:34;;:12;:16;;:34;;;;:::i;:::-;14317:49;;14126:251;14166:3;;;;;;;14126:251;;;;577:66:27;14421:33:13;;14408:9;:46;;14387:118;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;14721:22;14745:23:::0;14772:32:::1;:9;:30;:32::i;:::-;14718:86;;;;;14887:42;14912:16;14887:42;;:20;:24;;;;:42;;;;:::i;:::-;14835:33;14852:15;14835:33;;:12;:16;;:33;;;;:::i;:::-;:94;14814:166;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;15036:12;14991:11;:22;15003:9;14991:22;;;;;;;;;;;:42;;:57;;;;15096:9;15058:11;:22;15070:9;15058:22;;;;;;;;;;;:35;;:47;;;;1782:1;;;;;13711:1401:::0;;;:::o;4450:450::-;1308:12:1;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4623:2:13::1;4604:15;:21;;4583:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4821:32;4831:21;4821:9;:32::i;:::-;4801:17;;:52;;;;;;;;;;;;;;;;;;4878:15;4863:12;:30;;;;4450:450:::0;;:::o;3921:50::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4408:35::-;;;;;;;;;;;;;:::o;28003:173::-;28105:4;28132:37;28163:5;28132:10;:21;28143:9;28132:21;;;;;;;;;;;:30;;:37;;;;:::i;:::-;28125:44;;28003:173;;;;:::o;1717:145:1:-;1308:12;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1823:1:::1;1786:40;;1807:6;::::0;::::1;;;;;;;;1786:40;;;;;;;;;;;;1853:1;1836:6:::0;::::1;:19;;;;;;;;;;;;;;;;;;1717:145::o:0;21207:2828:13:-;21388:32;21434:29;21347:9;1924:1;1916:10;;1871:11;:22;1883:9;1871:22;;;;;;;;;;;:41;;;:55;;1850:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21493:9:::1;21488:327;21512:6;:13;21508:1;:17;21488:327;;;21703:39;21732:6;21739:1;21732:9;;;;;;;;;;;;;;21703:10;:21;21714:9;21703:21;;;;;;;;;;;:28;;:39;;;;:::i;:::-;21678:126;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;21527:3;;;;;;;21488:327;;;;21824:26;;:::i;:::-;21853:11;:22;21865:9;21853:22;;;;;;;;;;;21824:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;21888:21;21911:23:::0;21938:58:::1;:7;:35;;;:56;:58::i;:::-;21885:111;;;;;22008:13;22029:23;:6;22036:1;22029:9;;;;;;;;;;;;;;:21;:23::i;:::-;22007:45;;;;22062:34;22099:11;:22;22111:9;22099:22;;;;;;;;;;;:61;;;;;;;;;;;;22062:98;;22175:9;22170:1704;22194:6;:13;22190:1;:17;22170:1704;;;22229:18;22249:16:::0;22267:17:::1;22288:66;:6;22312:1;22288:39;;;;;;;;;;;;;;:64;:66::i;:::-;22228:126;;;;;;22408:6;22393:21;;:11;:21;;;22368:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22501:29;22497:1290;;;22597:37;22623:10;22597:37;;:21;:25;;:37;;;;:::i;:::-;22573:61;;22497:1290;;;22713:7;:26;;;22700:6;22707:1;22700:9;;;;;;;;;;;;;;:39;22696:1077;;;22817:225;22871:149;23003:16;22871:149;;:102;22958:14;22871:102;;:7;:57;;;:86;;;;:102;;;;:::i;:::-;:131;;:149;;;;:::i;:::-;22817:24;:28;;:225;;;;:::i;:::-;22790:252;;23088:121;23139:48;23154:7;:32;;;23139:48;;:10;:14;;;;:48;;;;:::i;:::-;23088:21;:25;;:121;;;;:::i;:::-;23064:145;;22696:1077;;;23260:49;23282:7;:26;;;23260:6;23267:1;23260:9;;;;;;;;;;;;;;:21;;:49;;;;:::i;:::-;23256:499;;;23395:136;23453:52;23488:16;23453:52;;:30;23468:14;23453:30;;:10;:14;;;;:30;;;;:::i;:::-;:34;;:52;;;;:::i;:::-;23395:24;:28;;:136;;;;:::i;:::-;23368:163;;23256:499;;;23641:91;23696:10;23641:91;;:21;:25;;:91;;;;:::i;:::-;23617:115;;23256:499;22696:1077;22497:1290;23833:6;23805:58;;23822:9;23805:58;23841:9;23852:10;23805:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;22170:1704;;;22209:3;;;;;;;22170:1704;;;;23883:139;23910:9;23933:24;23971:21;24006:6;23883:13;:139::i;:::-;1986:1;;;;;21207:2828:::0;;;;;;:::o;12164:1353::-;12298:9;1207:11;:22;1219:9;1207:22;;;;;;;;;;;:47;;;1189:15;:65;1168:162;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12323:13:::1;12339:21;12349:10;12339:9;:21::i;:::-;12323:37;;12370:23;12412:9:::0;12407:977:::1;12431:11;:18;12427:1;:22;12407:977;;;12620:12;12635:85;12692:11;12704:1;12692:14;;;;;;;;;;;;;;12635:10;:21;12646:9;12635:21;;;;;;;;;;;:39;;:85;;;;:::i;:::-;12620:100;;12738:7;12734:640;;;12787:19;12828:22:::0;12872:23:::1;12916:28;:11;12928:1;12916:14;;;;;;;;;;;;;;:26;:28::i;:::-;12765:179;;;;;;13007:6;12991:22;;:12;:22;;;12962:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13126:37;13146:16;13126:37;;:15;:19;;:37;;;;:::i;:::-;13108:55;;13260:6;13186:173;;13229:9;13186:173;13288:15;13325:16;13186:173;;;;;;;;;;;;;;;;;;;;;;;;;;;;12734:640;;;;12407:977;12451:3;;;;;;;12407:977;;;;13393:111;13455:10;13479:15;13393:11;:22;13405:9;13393:22;;;;;;;;;;;:35;;;;;;;;;;;;:48;;;;:111;;;;;:::i;:::-;1340:1;;12164:1353:::0;;;:::o;1085:85:1:-;1131:7;1157:6;;;;;;;;;;;1150:13;;1085:85;:::o;15118:1181:13:-;15376:9;1432:22;1457:11;:22;1469:9;1457:22;;;;;;;;;;;:37;;;1432:62;;1551:1;1533:14;:19;;:76;;;;;1595:14;1576:15;:33;;1533:76;:155;;;;;1686:1;1678:10;;1633:11;:22;1645:9;1633:22;;;;;;;;;;;:41;;;:55;1533:155;1508:254;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15118:1181;15418:11:::1;:22;15430:9;15418:22;;;;;;;;;;;:45;;;;;;;;;;;;15397:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15584:1;15560:13;:20;:25;:52;;;;;15611:1;15589:11;:18;:23;15560:52;15539:138;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15687:13;15703:21;15713:10;15703:9;:21::i;:::-;15687:37;;15755:234;15820:155;15877:6;15905:13;15919:1;15905:16;;;;;;;;;;;;;;15943:11;15955:1;15943:14;;;;;;;;;;;;;;15820:35;:155::i;:::-;15755:11;:22;15767:9;15755:22;;;;;;;;;;;:35;;;:47;;:234;;;;:::i;:::-;15734:330;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16074:184;16104:9;16127:13;16154:11;16179:14;16207:17;;16238:10;16074:16;:184::i;:::-;;16268:24;16282:9;16268:13;:24::i;:::-;;1782:1;15118:1181:::0;;;;;;;:::o;4220:29::-;;;;:::o;8218:537::-;8489:13;8469:9;973:11;:22;985:9;973:22;;;;;;;;;;;:37;;;955:15;:55;934:136;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8533:215:::1;8567:9;8594:14;8626:12;8656:15;8689:17;;8724:10;8533:16;:215::i;:::-;8514:234;;8218:537:::0;;;;;;;;;:::o;4356:46::-;4398:4;4356:46;:::o;4003:55::-;;;;;;;;;;;;;;;;;;;;;;:::o;4319:31::-;;;;:::o;8761:581::-;9072:13;9052:9;973:11;:22;985:9;973:22;;;;;;;;;;;:37;;;955:15;:55;934:136;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9116:219:::1;9150:9;9177:14;9209:12;9239:15;9272:17;;9307:14;9116:16;:219::i;:::-;9097:238;;8761:581:::0;;;;;;;;;;:::o;2011:240:1:-;1308:12;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2119:1:::1;2099:22;;:8;:22;;;;2091:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2208:8;2179:38;;2200:6;::::0;::::1;;;;;;;;2179:38;;;;;;;;;;;;2236:8;2227:6;::::0;:17:::1;;;;;;;;;;;;;;;;;;2011:240:::0;:::o;4064:50:13:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2690:175:3:-;2748:7;2767:9;2783:1;2779;:5;2767:17;;2807:1;2802;:6;;2794:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2857:1;2850:8;;;2690:175;;;;:::o;3538:215::-;3596:7;3624:1;3619;:6;3615:20;;;3634:1;3627:8;;;;3615:20;3645:9;3661:1;3657;:5;3645:17;;3689:1;3684;3680;:5;;;;;;:10;3672:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3745:1;3738:8;;;3538:215;;;;;:::o;4217:150::-;4275:7;4306:1;4302;:5;4294:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4359:1;4355;:5;;;;;;4348:12;;4217:150;;;;:::o;885:203:6:-;985:96;1005:5;1035:27;;;1064:4;1070:2;1074:5;1012:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;985:19;:96::i;:::-;885:203;;;;:::o;1589:158:27:-;577:66;1684:9;;1656:4;:12;;:25;368:66;1669:11;;1656:25;;;;;;;;;;;:37;;;;368:66;1729:11;;1703:4;:12;;:23;577:66;1716:9;;1703:23;;;;;;;;;;;:37;;;;1589:158;:::o;7896:325::-;8022:7;8189:10;8181:19;;8155:2;8141:9;8133:18;;:24;;8105:3;8094:6;8086:15;;:22;;8085:73;:115;8060:154;;8041:173;;7896:325;;;;;:::o;3136:155:3:-;3194:7;3226:1;3221;:6;;3213:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3283:1;3279;:5;3272:12;;3136:155;;;;:::o;515:175:28:-;571:6;605:5;597;:13;589:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;677:5;663:20;;515:175;;;:::o;1418:555:26:-;1526:4;1566:1;1550:18;;:4;:18;;;;1542:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1630:2;1617:16;;:2;:16;;;;1609:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1761:1;1735:4;:16;;:22;1752:4;1735:22;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;;:81;;;;1814:1;1778:38;;:4;:16;;:24;1800:1;1795:2;:6;1778:24;;;;;;;;;;;;;;;;;;;;;;;;;:38;;;;1735:81;1718:146;;;1848:5;1841:12;;;;1718:146;1900:4;1873;:16;;:24;1895:1;1890:2;:6;1873:24;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;1944:1;1939:2;:6;1914:4;:16;;:22;1931:4;1914:22;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;1962:4;1955:11;;1418:555;;;;;;:::o;785:161::-;885:4;938:1;912:4;:16;;:22;929:4;912:22;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;;905:34;;785:161;;;;:::o;1183:229::-;1278:6;1308:22;1319:4;1325;1308:10;:22::i;:::-;1300:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1404:1;1379:4;:16;;:22;1396:4;1379:22;;;;;;;;;;;;;;;;;;;;;;;;;:26;1372:33;;1183:229;;;;:::o;7435:455:27:-;7536:13;7563:16;7593:17;7774:3;7759:10;7751:19;;:26;;7735:43;;7830:2;7815:10;7807:19;;:25;;7788:45;;7871:10;7863:19;;7843:40;;7435:455;;;;;:::o;7036:393::-;7131:7;577:66;7171:9;;7162:5;:18;;7154:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7229:19;7251:4;:12;;:19;7264:5;7251:19;;;;;;;;;;;;7229:41;;7324:1;7316:10;;7301:11;:25;;7280:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7411:11;7404:18;;;7036:393;;;;:::o;334:175:28:-;390:6;424:5;416;:13;408:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;496:5;482:20;;334:175;;;:::o;24041:2067:13:-;24242:17;24262:99;4398:4;24262:69;24295:11;:22;24307:9;24295:22;;;;;;;;;;;:35;;;24262:19;:32;;;;:69;;;;:::i;:::-;:82;;:99;;;;:::i;:::-;24242:119;;24382:11;:22;24394:9;24382:22;;;;;;;;;;;:52;;;;;;;;;;;;24378:1724;;;24450:155;24481:9;24508:34;24532:9;24508:19;:23;;;;:34;;;;:::i;:::-;24560:1;24579:12;24450:13;:155::i;:::-;24378:1724;;;24664:21;24687:23;24714:111;:11;:52;24743:9;24714:52;;;;;;;;;;;:84;;;:109;:111::i;:::-;24661:164;;;;;24929:30;24962:82;25003:27;24962:19;:23;;;;:82;;;;:::i;:::-;24929:115;;25186:29;25218:120;25262:62;25304:19;25262:62;;:37;25276:22;25262:9;:13;;:37;;;;:::i;:::-;:41;;:62;;;;:::i;:::-;25218:22;:26;;:120;;;;:::i;:::-;25186:152;;25454:26;25483:95;25563:14;25483:95;;:62;25528:16;25483:62;;:27;:44;;:62;;;;:::i;:::-;:79;;:95;;;;:::i;:::-;25454:124;;25592:159;25623:9;25650:21;25689:18;25725:12;25592:13;:159::i;:::-;25771:314;25802:9;25912:105;25980:19;25912:105;;:42;25926:27;25912:9;:13;;:42;;;;:::i;:::-;:46;;:105;;;;:::i;:::-;26035:1;26054:17;;;;;;;;;;;25771:13;:314::i;:::-;24378:1724;;;;;;24041:2067;;;;;:::o;598:104:8:-;651:15;685:10;678:17;;598:104;:::o;5259:332:27:-;5358:4;368:66;5391:11;;5382:5;:20;5378:63;;;5425:5;5418:12;;;;5378:63;5582:1;5574:10;;5551:4;:12;;:19;5564:5;5551:19;;;;;;;;;;;;:33;;5544:40;;5259:332;;;;;:::o;4967:286::-;5061:4;5081:11;5095:40;5113:4;5119:15;5095:17;:40::i;:::-;5081:54;;5149:6;5145:79;;;5211:1;5203:10;;5171:4;:12;;:29;5184:15;5171:29;;;;;;;;;;;:42;;;;5145:79;5240:6;5233:13;;;4967:286;;;;:::o;5728:1110::-;5835:4;5869:17;5900:25;5939:27;5979:22;5991:9;5979:11;:22::i;:::-;5855:146;;;;;;6025:18;6057:26;6097:28;6138:23;6150:10;6138:11;:23::i;:::-;6011:150;;;;;;6249:45;6273:20;6249:45;;:19;:23;;;;:45;;;;:::i;:::-;6189;6212:21;6189:45;;:18;:22;;;;:45;;;;:::i;:::-;:105;6172:144;;;6312:4;6305:11;;;;;;;;;;6172:144;6403:45;6427:20;6403:45;;:19;:23;;;;:45;;;;:::i;:::-;6343;6366:21;6343:45;;:18;:22;;;;:45;;;;:::i;:::-;:105;6326:145;;;6466:5;6459:12;;;;;;;;;;6326:145;6507:19;6486:40;;:18;:40;;;6482:57;;;6535:4;6528:11;;;;;;;;;;6482:57;6574:19;6553:40;;:18;:40;;;6549:58;;;6602:5;6595:12;;;;;;;;;;6549:58;6652:11;6638:25;;:10;:25;;;;6617:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6761:11;6748:24;;:10;:24;;;6744:66;;;6795:4;6788:11;;;;;;;;;;6744:66;6826:5;6819:12;;;;;;;;5728:1110;;;;;:::o;26468:625:13:-;26641:19;26663:36;26692:6;26663:15;:28;;:36;;;;:::i;:::-;26641:58;;26737:1;26713:21;:25;26709:189;;;26754:133;26823:11;26852:21;26754:11;:22;26766:9;26754:22;;;;;;;;;;;:38;;;;;;;;;;;;:51;;;;:133;;;;;:::i;:::-;26709:189;26932:1;26911:18;:22;26907:180;;;26949:127;27015:11;27044:18;26949:11;:22;26961:9;26949:22;;;;;;;;;;;:35;;;;;;;;;;;;:48;;;;:127;;;;;:::i;:::-;26907:180;26468:625;;;;;:::o;4192:511:27:-;4297:4;4322:31;4331:4;4337:15;4322:8;:31::i;:::-;4317:75;;4376:5;4369:12;;;;4317:75;4401:23;4427:4;:12;;:29;4440:15;4427:29;;;;;;;;;;;;4401:55;;4466:19;4488:4;:12;;:29;4501:15;4488:29;;;;;;;;;;;;4466:51;;4559:11;4527:4;:12;;:29;4540:15;4527:29;;;;;;;;;;;:43;;;;4608:15;4580:4;:12;;:25;4593:11;4580:25;;;;;;;;;;;:43;;;;4673:1;4665:10;;4633:4;:12;;:29;4646:15;4633:29;;;;;;;;;;;:42;;;;4692:4;4685:11;;;;4192:511;;;;;:::o;704:175:6:-;786:86;806:5;836:23;;;861:2;865:5;813:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;786:19;:86::i;:::-;704:175;;;:::o;9348:2810:13:-;9619:13;9658:24;9685:20;:31;9706:9;9685:31;;;;;;;;;;;;;;;;;;;;;9658:58;;9762:1;9734:30;;:16;:30;;;9730:394;;311:10:19;10002:34:13;;9813:223;;;9831:16;9813:45;;;9884:14;9924:9;9959:17;;9813:185;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:223;;;;9784:325;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9730:394;9348:2810;10193:37;10248:38;10303:56;:11;:22;10315:9;10303:22;;;;;;;;;;;:42;;;:54;:56::i;:::-;10157:202;;;;;10378:9;10373:329;10397:14;:21;10393:1;:25;10373:329;;;10552:52;10588:12;10601:1;10588:15;;;;;;;;;;;;;;10552:52;;:31;:35;;;;:52;;;;:::i;:::-;10472:53;10494:30;10472:53;;:14;10487:1;10472:17;;;;;;;;;;;;;;:21;;;;:53;;;;:::i;:::-;:132;10443:244;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10420:3;;;;;;;10373:329;;;;9348:2810;;10721:24;10768:25;10778:14;10768:9;:25::i;:::-;10759:34;;10803:36;10842:11;:22;10854:9;10842:22;;;;;;;;;;;:60;;;10803:99;;10917:9;10912:1081;10936:14;:21;10932:1;:25;10912:1081;;;11023:1;11003:14;11018:1;11003:17;;;;;;;;;;;;;;:21;;;10978:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11298:28;11280:12;11293:1;11280:15;;;;;;;;;;;;;;:46;;;11255:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11410:281;11460:173;11521:6;11553:14;11568:1;11553:17;;;;;;;;;;;;;;11596:12;11609:1;11596:15;;;;;;;;;;;;;;11460:35;:173::i;:::-;11655:15;11671:1;11655:18;;;;;;;;;;;;;;11410:10;:21;11421:9;11410:21;;;;;;;;;;;:28;;:281;;;;;:::i;:::-;11389:594;;;11743:37;11764:12;11777:1;11764:15;;;;;;;;;;;;;;11743:37;;:16;:20;;:37;;;;:::i;:::-;11724:56;;11868:6;11803:165;;11837:9;11803:165;11896:14;11911:1;11896:17;;;;;;;;;;;;;;11935:12;11948:1;11935:15;;;;;;;;;;;;;;11803:165;;;;;;;;;;;;;;;;;;;;;;;;;;;;11389:594;10959:3;;;;;;;10912:1081;;;;12002:143;12068:10;12100:4;12119:16;12002:11;:22;12014:9;12002:22;;;;;;;;;;;:35;;;;;;;;;;;;:52;;;;:143;;;;;;:::i;:::-;9348:2810;;;;;;;;;;;:::o;2967:751:6:-;3386:23;3412:69;3440:4;3412:69;;;;;;;;;;;;;;;;;3420:5;3412:27;;;;:69;;;;;:::i;:::-;3386:95;;3515:1;3495:10;:17;:21;3491:221;;;3635:10;3624:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3616:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3491:221;2967:751;;;:::o;952:225:26:-;1051:7;1082:15;1088:4;1094:2;1082:5;:15::i;:::-;1074:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1146:4;:16;;:24;1168:1;1163:2;:6;1146:24;;;;;;;;;;;;;;;;;;;;;;;;;1139:31;;952:225;;;;:::o;1886:2070:27:-;2023:4;2044:18;2066:28;2078:15;2066:11;:28::i;:::-;2039:55;;;;2134:1;2112:24;;:11;:24;;;;2104:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;368:66;2222:11;;2203:15;:30;;:62;;;;;577:66;2256:9;;2237:15;:28;;2203:62;2182:139;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2335:31;2344:4;2350:15;2335:8;:31::i;:::-;2331:74;;;2389:5;2382:12;;;;;2331:74;368:66;2454:11;;2431:19;:34;;:97;;;;;2526:1;2518:10;;2481:4;:12;;:33;2494:19;2481:33;;;;;;;;;;;;:47;2431:97;2414:162;;;2560:5;2553:12;;;;;2414:162;2590:48;2622:15;2590:19;:31;;:48;;;;:::i;:::-;2585:92;;2661:5;2654:12;;;;;2585:92;3172:136;3224:1;3216:10;;3179:4;:12;;:33;3192:19;3179:33;;;;;;;;;;;;:47;3172:136;;;3264:4;:12;;:33;3277:19;3264:33;;;;;;;;;;;;3242:55;;3172:136;;;3466:16;3492:15;3510:19;3492:37;;3539:137;3567:7;3556:18;;3598:4;:12;;:21;3611:7;3598:21;;;;;;;;;;;;3588:31;;3638:36;3658:15;3638:7;:19;;:36;;;;:::i;:::-;3539:137;;3764:15;3739:4;:12;;:22;3752:8;3739:22;;;;;;;;;;;:40;;;;3813:15;3789:4;:12;;:21;3802:7;3789:21;;;;;;;;;;;:39;;;;3870:8;3838:4;:12;;:29;3851:15;3838:29;;;;;;;;;;;:40;;;;3920:7;3888:4;:12;;:29;3901:15;3888:29;;;;;;;;;;;:39;;;;3945:4;3938:11;;;;;1886:2070;;;;;;:::o;3581:193:7:-;3684:12;3715:52;3737:6;3745:4;3751:1;3754:12;3715:21;:52::i;:::-;3708:59;;3581:193;;;;;:::o;643:136:26:-;711:4;770:1;734:38;;:4;:16;;:24;756:1;751:2;:6;734:24;;;;;;;;;;;;;;;;;;;;;;;;;:38;;;;727:45;;643:136;;;;:::o;4608:523:7:-;4735:12;4792:5;4767:21;:30;;4759:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4858:18;4869:6;4858:10;:18::i;:::-;4850:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4981:12;4995:23;5022:6;:11;;5042:5;5050:4;5022:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4980:75;;;;5072:52;5090:7;5099:10;5111:12;5072:17;:52::i;:::-;5065:59;;;;4608:523;;;;;;:::o;726:413::-;786:4;989:12;1098:7;1086:20;1078:28;;1131:1;1124:4;:8;1117:15;;;726:413;;;:::o;7091:725::-;7206:12;7234:7;7230:580;;;7264:10;7257:17;;;;7230:580;7395:1;7375:10;:17;:21;7371:429;;;7633:10;7627:17;7693:15;7680:10;7676:2;7672:19;7665:44;7582:145;7772:12;7765:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7091:725;;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "4612200",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "FEE_DENOMINATOR()": "227",
            "auctionAccessData(uint256)": "infinite",
            "auctionAccessManager(uint256)": "1238",
            "auctionCounter()": "1116",
            "auctionData(uint256)": "12370",
            "cancelSellOrders(uint256,bytes32[])": "infinite",
            "claimFromParticipantOrder(uint256,bytes32[])": "infinite",
            "containsOrder(uint256,bytes32)": "infinite",
            "feeNumerator()": "1071",
            "feeReceiverUserId()": "1136",
            "getSecondsRemainingInBatch(uint256)": "infinite",
            "getUserId(address)": "infinite",
            "initiateAuction(address,address,uint256,uint256,uint96,uint96,uint256,uint256,bool,address,bytes)": "infinite",
            "numUsers()": "1115",
            "owner()": "1122",
            "placeSellOrders(uint256,uint96[],uint96[],bytes32[],bytes)": "infinite",
            "placeSellOrdersOnBehalf(uint256,uint96[],uint96[],bytes32[],bytes,address)": "infinite",
            "precalculateSellAmountSum(uint256,uint256)": "infinite",
            "registerUser(address)": "infinite",
            "renounceOwnership()": "24462",
            "setFeeParameters(uint256,address)": "infinite",
            "settleAuction(uint256)": "infinite",
            "settleAuctionAtomically(uint256,uint96[],uint96[],bytes32[],bytes)": "infinite",
            "transferOwnership(address)": "infinite"
          },
          "internal": {
            "_placeSellOrders(uint256,uint96[] memory,uint96[] memory,bytes32[] memory,bytes calldata,address)": "infinite",
            "processFeesAndAuctioneerFunds(uint256,uint256,uint64,uint96)": "infinite",
            "sendOutTokens(uint256,uint256,uint256,uint64)": "infinite"
          }
        },
        "methodIdentifiers": {
          "FEE_DENOMINATOR()": "d73792a9",
          "auctionAccessData(uint256)": "f59c2f06",
          "auctionAccessManager(uint256)": "e4a59ef4",
          "auctionCounter()": "a7e76644",
          "auctionData(uint256)": "55fc62d2",
          "cancelSellOrders(uint256,bytes32[])": "7ed18b70",
          "claimFromParticipantOrder(uint256,bytes32[])": "7882deaf",
          "containsOrder(uint256,bytes32)": "63c699a4",
          "feeNumerator()": "e86dea4a",
          "feeReceiverUserId()": "5cefb291",
          "getSecondsRemainingInBatch(uint256)": "15d37b4b",
          "getUserId(address)": "2b956ff7",
          "initiateAuction(address,address,uint256,uint256,uint96,uint96,uint256,uint256,bool,address,bytes)": "0a4cd6c9",
          "numUsers()": "19a50f49",
          "owner()": "8da5cb5b",
          "placeSellOrders(uint256,uint96[],uint96[],bytes32[],bytes)": "d225269c",
          "placeSellOrdersOnBehalf(uint256,uint96[],uint96[],bytes32[],bytes,address)": "ec20d0bb",
          "precalculateSellAmountSum(uint256,uint256)": "3e12905f",
          "registerUser(address)": "2199d5cd",
          "renounceOwnership()": "715018a6",
          "setFeeParameters(uint256,address)": "40b20b09",
          "settleAuction(uint256)": "2e993611",
          "settleAuctionAtomically(uint256,uint96[],uint96[],bytes32[],bytes)": "91cfc1d4",
          "transferOwnership(address)": "f2fde38b"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"soldAuctioningTokens\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"soldBiddingTokens\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"clearingPriceOrder\",\"type\":\"bytes32\"}],\"name\":\"AuctionCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"}],\"name\":\"CancellationSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"}],\"name\":\"ClaimedFromOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_auctioningToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_biddingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderCancellationEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_auctionedSellAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_minBuyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumBiddingAmountPerOrder\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minFundingThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"allowListContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"allowListData\",\"type\":\"bytes\"}],\"name\":\"NewAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"}],\"name\":\"NewSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"NewUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"name\":\"UserRegistration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionAccessData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionAccessManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionData\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"auctioningToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"biddingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderCancellationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initialAuctionOrder\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minimumBiddingAmountPerOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interimSumBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"interimOrder\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"clearingPriceOrder\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"volumeClearingPriceOrder\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"minFundingThresholdNotReached\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAtomicClosureAllowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"feeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFundingThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_sellOrders\",\"type\":\"bytes32[]\"}],\"name\":\"cancelSellOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"orders\",\"type\":\"bytes32[]\"}],\"name\":\"claimFromParticipantOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sumAuctioningTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumBiddingTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"order\",\"type\":\"bytes32\"}],\"name\":\"containsOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiverUserId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getSecondsRemainingInBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_auctioningToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_biddingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderCancellationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_auctionedSellAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_minBuyAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minimumBiddingAmountPerOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFundingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAtomicClosureAllowed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"accessManagerContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"accessManagerContractData\",\"type\":\"bytes\"}],\"name\":\"initiateAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numUsers\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint96[]\",\"name\":\"_minBuyAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_sellAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_prevSellOrders\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"allowListCallData\",\"type\":\"bytes\"}],\"name\":\"placeSellOrders\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint96[]\",\"name\":\"_minBuyAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_sellAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_prevSellOrders\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"allowListCallData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"orderSubmitter\",\"type\":\"address\"}],\"name\":\"placeSellOrdersOnBehalf\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iterationSteps\",\"type\":\"uint256\"}],\"name\":\"precalculateSellAmountSum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"registerUser\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newfeeReceiverAddress\",\"type\":\"address\"}],\"name\":\"setFeeParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"clearingOrder\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint96[]\",\"name\":\"_minBuyAmount\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_sellAmount\",\"type\":\"uint96[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_prevSellOrder\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"allowListCallData\",\"type\":\"bytes\"}],\"name\":\"settleAuctionAtomically\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimFromParticipantOrder(uint256,bytes32[])\":{\"notice\":\"First we will remove the given orders from contract sell orders list.*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AnnexBatchAuction.sol\":\"AnnexBatchAuction\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/AnnexBatchAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./libraries/IterableOrderedOrderSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"./interfaces/AllowListVerifier.sol\\\";\\nimport \\\"./libraries/IdToAddressBiMap.sol\\\";\\nimport \\\"./libraries/SafeCast.sol\\\";\\n\\ncontract AnnexBatchAuction is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint64;\\n    using SafeMath for uint96;\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using IterableOrderedOrderSet for IterableOrderedOrderSet.Data;\\n    using IterableOrderedOrderSet for bytes32;\\n    using IdToAddressBiMap for IdToAddressBiMap.Data;\\n\\n    modifier atStageOrderPlacement(uint256 auctionId) {\\n        require(\\n            block.timestamp < auctionData[auctionId].auctionEndDate,\\n            \\\"no longer in order placement phase\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier atStageOrderPlacementAndCancelation(uint256 auctionId) {\\n        require(\\n            block.timestamp < auctionData[auctionId].orderCancellationEndDate,\\n            \\\"no longer in order placement and cancelation phase\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier atStageSolutionSubmission(uint256 auctionId) {\\n        {\\n            uint256 auctionEndDate = auctionData[auctionId].auctionEndDate;\\n            require(\\n                auctionEndDate != 0 &&\\n                    block.timestamp >= auctionEndDate &&\\n                    auctionData[auctionId].clearingPriceOrder == bytes32(0),\\n                \\\"Auction not in solution submission phase\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier atStageFinished(uint256 auctionId) {\\n        require(\\n            auctionData[auctionId].clearingPriceOrder != bytes32(0),\\n            \\\"Auction not yet finished\\\"\\n        );\\n        _;\\n    }\\n\\n    event NewSellOrder(\\n        uint256 indexed auctionId,\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    );\\n    event CancellationSellOrder(\\n        uint256 indexed auctionId,\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    );\\n    event ClaimedFromOrder(\\n        uint256 indexed auctionId,\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    );\\n    event NewUser(uint64 indexed userId, address indexed userAddress);\\n    event NewAuction(\\n        uint256 indexed auctionId,\\n        IERC20 indexed _auctioningToken,\\n        IERC20 indexed _biddingToken,\\n        uint256 orderCancellationEndDate,\\n        uint256 auctionEndDate,\\n        uint64 userId,\\n        uint96 _auctionedSellAmount,\\n        uint96 _minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold,\\n        address allowListContract,\\n        bytes allowListData\\n    );\\n    event AuctionCleared(\\n        uint256 indexed auctionId,\\n        uint96 soldAuctioningTokens,\\n        uint96 soldBiddingTokens,\\n        bytes32 clearingPriceOrder\\n    );\\n    event UserRegistration(address indexed user, uint64 userId);\\n\\n    /**\\n    @param {auctioningToken}\\n    **/\\n    struct AuctionData {\\n        IERC20 auctioningToken;\\n        IERC20 biddingToken;\\n        uint256 orderCancellationEndDate;\\n        uint256 auctionEndDate;\\n        bytes32 initialAuctionOrder;\\n        uint256 minimumBiddingAmountPerOrder;\\n        uint256 interimSumBidAmount;\\n        bytes32 interimOrder;\\n        bytes32 clearingPriceOrder;\\n        uint96 volumeClearingPriceOrder;\\n        bool minFundingThresholdNotReached;\\n        bool isAtomicClosureAllowed;\\n        uint256 feeNumerator;\\n        uint256 minFundingThreshold;\\n    }\\n    mapping(uint256 => IterableOrderedOrderSet.Data) internal sellOrders; // Store total number of sell orders\\n    mapping(uint256 => AuctionData) public auctionData; // Store auctions details\\n    mapping(uint256 => address) public auctionAccessManager;\\n    mapping(uint256 => bytes) public auctionAccessData;\\n\\n    IdToAddressBiMap.Data private registeredUsers;\\n    uint64 public numUsers; // counter of users\\n    uint256 public auctionCounter; // counter for auctions\\n\\n    constructor() public Ownable() {}\\n\\n    uint256 public feeNumerator = 0;\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n    uint64 public feeReceiverUserId = 1;\\n\\n    function setFeeParameters(\\n        uint256 newFeeNumerator,\\n        address newfeeReceiverAddress\\n    ) public onlyOwner() {\\n        require(\\n            newFeeNumerator <= 15,\\n            \\\"Fee is not allowed to be set higher than 1.5%\\\"\\n        );\\n        // caution: for currently running auctions, the feeReceiverUserId is changing as well.\\n        feeReceiverUserId = getUserId(newfeeReceiverAddress);\\n        feeNumerator = newFeeNumerator;\\n    }\\n\\n    // @dev: function to intiate a new auction\\n    // Warning: In case the auction is expected to raise more than\\n    // 2^96 units of the biddingToken, don't start the auction, as\\n    // it will not be settlable. This corresponds to about 79\\n    // billion DAI.\\n    //\\n    // Prices between biddingToken and auctioningToken are expressed by a\\n    // fraction whose components are stored as uint96.\\n    // Amount transfered out is no larger than amount transfered in\\n    function initiateAuction(\\n        IERC20 _auctioningToken,\\n        IERC20 _biddingToken,\\n        uint256 orderCancellationEndDate,\\n        uint256 auctionEndDate,\\n        uint96 _auctionedSellAmount,\\n        uint96 _minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold,\\n        bool isAtomicClosureAllowed,\\n        address accessManagerContract,\\n        bytes memory accessManagerContractData\\n    ) public returns (uint256) {\\n        /* \\n        ( _auctionedSellAmount * ( 1000 + feeNumerator ) ) / 1000\\n        // withdraws sellAmount + fees\\n        // i.e: autionTokens = 1000\\n        // fees = 1%\\n        then 1010 will be added to the contract\\n        */\\n        _auctioningToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _auctionedSellAmount.mul(FEE_DENOMINATOR.add(feeNumerator)).div(\\n                FEE_DENOMINATOR\\n            ) //[0]\\n        );\\n        require(_auctionedSellAmount > 0, \\\"cannot auction zero tokens\\\");\\n        require(_minBuyAmount > 0, \\\"tokens cannot be auctioned for free\\\");\\n        require(\\n            minimumBiddingAmountPerOrder > 0,\\n            \\\"minimumBiddingAmountPerOrder is not allowed to be zero\\\"\\n        );\\n        require(\\n            orderCancellationEndDate <= auctionEndDate,\\n            \\\"time periods are not configured correctly\\\"\\n        );\\n        require(\\n            auctionEndDate > block.timestamp,\\n            \\\"auction end date must be in the future\\\"\\n        );\\n        auctionCounter = auctionCounter.add(1);\\n        sellOrders[auctionCounter].initializeEmptyList();\\n        uint64 userId = getUserId(msg.sender);\\n        auctionData[auctionCounter] = AuctionData(\\n            _auctioningToken,\\n            _biddingToken,\\n            orderCancellationEndDate,\\n            auctionEndDate,\\n            IterableOrderedOrderSet.encodeOrder(\\n                userId,\\n                _minBuyAmount,\\n                _auctionedSellAmount\\n            ),\\n            minimumBiddingAmountPerOrder,\\n            0,\\n            IterableOrderedOrderSet.QUEUE_START,\\n            bytes32(0),\\n            0,\\n            false,\\n            isAtomicClosureAllowed,\\n            feeNumerator,\\n            minFundingThreshold\\n        );\\n        auctionAccessManager[auctionCounter] = accessManagerContract;\\n        auctionAccessData[auctionCounter] = accessManagerContractData;\\n        emit NewAuction(\\n            auctionCounter,\\n            _auctioningToken,\\n            _biddingToken,\\n            orderCancellationEndDate,\\n            auctionEndDate,\\n            userId,\\n            _auctionedSellAmount,\\n            _minBuyAmount,\\n            minimumBiddingAmountPerOrder,\\n            minFundingThreshold,\\n            accessManagerContract,\\n            accessManagerContractData\\n        );\\n        return auctionCounter;\\n    }\\n\\n    function placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        bytes calldata allowListCallData\\n    ) external atStageOrderPlacement(auctionId) returns (uint64 userId) {\\n        return\\n            _placeSellOrders(\\n                auctionId,\\n                _minBuyAmounts,\\n                _sellAmounts,\\n                _prevSellOrders,\\n                allowListCallData,\\n                msg.sender\\n            );\\n    }\\n\\n    function placeSellOrdersOnBehalf(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        bytes calldata allowListCallData,\\n        address orderSubmitter\\n    ) external atStageOrderPlacement(auctionId) returns (uint64 userId) {\\n        return\\n            _placeSellOrders(\\n                auctionId,\\n                _minBuyAmounts,\\n                _sellAmounts,\\n                _prevSellOrders,\\n                allowListCallData,\\n                orderSubmitter\\n            );\\n    }\\n\\n    function _placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        bytes calldata allowListCallData,\\n        address orderSubmitter\\n    ) internal returns (uint64 userId) {\\n        {\\n            address allowListManager = auctionAccessManager[auctionId];\\n            if (allowListManager != address(0)) {\\n                require(\\n                    AllowListVerifier(allowListManager).isAllowed(\\n                        orderSubmitter,\\n                        auctionId,\\n                        allowListCallData\\n                    ) == AllowListVerifierHelper.MAGICVALUE,\\n                    \\\"user not allowed to place order\\\"\\n                );\\n            }\\n        }\\n        {\\n            (\\n                ,\\n                uint96 buyAmountOfInitialAuctionOrder,\\n                uint96 sellAmountOfInitialAuctionOrder\\n            ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\\n            for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\\n                require(\\n                    _minBuyAmounts[i].mul(buyAmountOfInitialAuctionOrder) <\\n                        sellAmountOfInitialAuctionOrder.mul(_sellAmounts[i]),\\n                    \\\"limit price not better than mimimal offer\\\"\\n                );\\n            }\\n        }\\n        uint256 sumOfSellAmounts = 0;\\n        userId = getUserId(orderSubmitter);\\n        uint256 minimumBiddingAmountPerOrder = auctionData[auctionId]\\n        .minimumBiddingAmountPerOrder;\\n        for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\\n            require(\\n                _minBuyAmounts[i] > 0,\\n                \\\"_minBuyAmounts must be greater than 0\\\"\\n            );\\n            // orders should have a minimum bid size in order to limit the gas\\n            // required to compute the final price of the auction.\\n            require(\\n                _sellAmounts[i] > minimumBiddingAmountPerOrder,\\n                \\\"order too small\\\"\\n            );\\n            if (\\n                sellOrders[auctionId].insert(\\n                    IterableOrderedOrderSet.encodeOrder(\\n                        userId,\\n                        _minBuyAmounts[i],\\n                        _sellAmounts[i]\\n                    ),\\n                    _prevSellOrders[i]\\n                )\\n            ) {\\n                sumOfSellAmounts = sumOfSellAmounts.add(_sellAmounts[i]);\\n                emit NewSellOrder(\\n                    auctionId,\\n                    userId,\\n                    _minBuyAmounts[i],\\n                    _sellAmounts[i]\\n                );\\n            }\\n        }\\n        auctionData[auctionId].biddingToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            sumOfSellAmounts\\n        ); //[1]\\n    }\\n\\n    function cancelSellOrders(uint256 auctionId, bytes32[] memory _sellOrders)\\n        public\\n        atStageOrderPlacementAndCancelation(auctionId)\\n    {\\n        uint64 userId = getUserId(msg.sender);\\n        uint256 claimableAmount = 0;\\n        for (uint256 i = 0; i < _sellOrders.length; i++) {\\n            // Note: we keep the back pointer of the deleted element so that\\n            // it can be used as a reference point to insert a new node.\\n            bool success = sellOrders[auctionId].removeKeepHistory(\\n                _sellOrders[i]\\n            );\\n            if (success) {\\n                (\\n                    uint64 userIdOfIter,\\n                    uint96 buyAmountOfIter,\\n                    uint96 sellAmountOfIter\\n                ) = _sellOrders[i].decodeOrder();\\n                require(\\n                    userIdOfIter == userId,\\n                    \\\"Only the user can cancel his orders\\\"\\n                );\\n                claimableAmount = claimableAmount.add(sellAmountOfIter);\\n                emit CancellationSellOrder(\\n                    auctionId,\\n                    userId,\\n                    buyAmountOfIter,\\n                    sellAmountOfIter\\n                );\\n            }\\n        }\\n        auctionData[auctionId].biddingToken.safeTransfer(\\n            msg.sender,\\n            claimableAmount\\n        ); //[2]\\n    }\\n\\n    // By calling this function you can pre calculate(before auction ending) sum of total\\n    // total token sold.This function will calculate sum by taking offsent of orders linked list.\\n    function precalculateSellAmountSum(\\n        uint256 auctionId,\\n        uint256 iterationSteps\\n    ) public atStageSolutionSubmission(auctionId) {\\n        (, , uint96 auctioneerSellAmount) = auctionData[auctionId]\\n        .initialAuctionOrder\\n        .decodeOrder();\\n        uint256 sumBidAmount = auctionData[auctionId].interimSumBidAmount;\\n        bytes32 iterOrder = auctionData[auctionId].interimOrder;\\n\\n        for (uint256 i = 0; i < iterationSteps; i++) {\\n            iterOrder = sellOrders[auctionId].next(iterOrder);\\n            (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\\n            sumBidAmount = sumBidAmount.add(sellAmountOfIter);\\n        }\\n\\n        require(\\n            iterOrder != IterableOrderedOrderSet.QUEUE_END,\\n            \\\"reached end of order list\\\"\\n        );\\n\\n        // it is checked that not too many iteration steps were taken:\\n        // require that the sum of SellAmounts times the price of the last order\\n        // is not more than initially sold amount\\n        (, uint96 buyAmountOfIter, uint96 sellAmountOfIter) = iterOrder\\n        .decodeOrder();\\n        require(\\n            sumBidAmount.mul(buyAmountOfIter) <\\n                auctioneerSellAmount.mul(sellAmountOfIter),\\n            \\\"too many orders summed up\\\"\\n        );\\n\\n        auctionData[auctionId].interimSumBidAmount = sumBidAmount;\\n        auctionData[auctionId].interimOrder = iterOrder;\\n    }\\n\\n    function settleAuctionAtomically(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmount,\\n        uint96[] memory _sellAmount,\\n        bytes32[] memory _prevSellOrder,\\n        bytes calldata allowListCallData\\n    ) public atStageSolutionSubmission(auctionId) {\\n        require(\\n            auctionData[auctionId].isAtomicClosureAllowed,\\n            \\\"not allowed to settle auction atomically\\\"\\n        );\\n        require(\\n            _minBuyAmount.length == 1 && _sellAmount.length == 1,\\n            \\\"Only one order can be placed atomically\\\"\\n        );\\n        uint64 userId = getUserId(msg.sender);\\n        require(\\n            auctionData[auctionId].interimOrder.smallerThan(\\n                IterableOrderedOrderSet.encodeOrder(\\n                    userId,\\n                    _minBuyAmount[0],\\n                    _sellAmount[0]\\n                )\\n            ),\\n            \\\"precalculateSellAmountSum is already too advanced\\\"\\n        );\\n        _placeSellOrders(\\n            auctionId,\\n            _minBuyAmount,\\n            _sellAmount,\\n            _prevSellOrder,\\n            allowListCallData,\\n            msg.sender\\n        );\\n        settleAuction(auctionId);\\n    }\\n\\n    // @dev function settling the auction and calculating the price\\n    function settleAuction(uint256 auctionId)\\n        public\\n        atStageSolutionSubmission(auctionId)\\n        returns (bytes32 clearingOrder)\\n    {\\n        (\\n            uint64 auctioneerId,\\n            uint96 minAuctionedBuyAmount,\\n            uint96 fullAuctionedAmount\\n        ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\\n\\n        uint256 currentBidSum = auctionData[auctionId].interimSumBidAmount;\\n        bytes32 currentOrder = auctionData[auctionId].interimOrder;\\n        uint256 buyAmountOfIter;\\n        uint256 sellAmountOfIter;\\n        uint96 fillVolumeOfAuctioneerOrder = fullAuctionedAmount;\\n        // Sum order up, until fullAuctionedAmount is fully bought or queue end is reached\\n        do {\\n            bytes32 nextOrder = sellOrders[auctionId].next(currentOrder);\\n            if (nextOrder == IterableOrderedOrderSet.QUEUE_END) {\\n                break;\\n            }\\n            currentOrder = nextOrder;\\n            (, buyAmountOfIter, sellAmountOfIter) = currentOrder.decodeOrder();\\n            currentBidSum = currentBidSum.add(sellAmountOfIter);\\n        } while (\\n            currentBidSum.mul(buyAmountOfIter) <\\n                fullAuctionedAmount.mul(sellAmountOfIter)\\n        );\\n\\n        if (\\n            currentBidSum > 0 &&\\n            currentBidSum.mul(buyAmountOfIter) >=\\n            fullAuctionedAmount.mul(sellAmountOfIter)\\n        ) {\\n            // All considered/summed orders are sufficient to close the auction fully\\n            // at price between current and previous orders.\\n            uint256 uncoveredBids = currentBidSum.sub(\\n                fullAuctionedAmount.mul(sellAmountOfIter).div(buyAmountOfIter)\\n            );\\n\\n            if (sellAmountOfIter >= uncoveredBids) {\\n                //[13]\\n                // Auction fully filled via partial match of currentOrder\\n                uint256 sellAmountClearingOrder = sellAmountOfIter.sub(\\n                    uncoveredBids\\n                );\\n                auctionData[auctionId]\\n                .volumeClearingPriceOrder = sellAmountClearingOrder.toUint96();\\n                currentBidSum = currentBidSum.sub(uncoveredBids);\\n                clearingOrder = currentOrder;\\n            } else {\\n                //[14]\\n                // Auction fully filled via price strictly between currentOrder and the order\\n                // immediately before. For a proof, see the security-considerations.md\\n                currentBidSum = currentBidSum.sub(sellAmountOfIter);\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\n                    0,\\n                    fullAuctionedAmount,\\n                    currentBidSum.toUint96()\\n                );\\n            }\\n        } else {\\n            // All considered/summed orders are not sufficient to close the auction fully at price of last order //[18]\\n            // Either a higher price must be used or auction is only partially filled\\n\\n            if (currentBidSum > minAuctionedBuyAmount) {\\n                //[15]\\n                // Price higher than last order would fill the auction\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\n                    0,\\n                    fullAuctionedAmount,\\n                    currentBidSum.toUint96()\\n                );\\n            } else {\\n                //[16]\\n                // Even at the initial auction price, the auction is partially filled\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\n                    0,\\n                    fullAuctionedAmount,\\n                    minAuctionedBuyAmount\\n                );\\n                fillVolumeOfAuctioneerOrder = currentBidSum\\n                .mul(fullAuctionedAmount)\\n                .div(minAuctionedBuyAmount)\\n                .toUint96();\\n            }\\n        }\\n        auctionData[auctionId].clearingPriceOrder = clearingOrder;\\n\\n        if (auctionData[auctionId].minFundingThreshold > currentBidSum) {\\n            auctionData[auctionId].minFundingThresholdNotReached = true;\\n        }\\n        processFeesAndAuctioneerFunds(\\n            auctionId,\\n            fillVolumeOfAuctioneerOrder,\\n            auctioneerId,\\n            fullAuctionedAmount\\n        );\\n        emit AuctionCleared(\\n            auctionId,\\n            fillVolumeOfAuctioneerOrder,\\n            uint96(currentBidSum),\\n            clearingOrder\\n        );\\n        // Gas refunds\\n        auctionAccessManager[auctionId] = address(0);\\n        delete auctionAccessData[auctionId];\\n        auctionData[auctionId].initialAuctionOrder = bytes32(0);\\n        auctionData[auctionId].interimOrder = bytes32(0);\\n        auctionData[auctionId].interimSumBidAmount = uint256(0);\\n        auctionData[auctionId].minimumBiddingAmountPerOrder = uint256(0);\\n    }\\n\\n    /**\\n\\n    First we will remove the given orders from contract sell orders list.\\n    **/\\n    function claimFromParticipantOrder(\\n        uint256 auctionId,\\n        bytes32[] memory orders\\n    )\\n        public\\n        atStageFinished(auctionId)\\n        returns (\\n            uint256 sumAuctioningTokenAmount,\\n            uint256 sumBiddingTokenAmount\\n        )\\n    {\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            // Note: we don't need to keep any information about the node since\\n            // no new elements need to be inserted.\\n            require(\\n                sellOrders[auctionId].remove(orders[i]),\\n                \\\"order is no longer claimable\\\"\\n            );\\n        }\\n        AuctionData memory auction = auctionData[auctionId];\\n        (, uint96 priceNumerator, uint96 priceDenominator) = auction\\n        .clearingPriceOrder\\n        .decodeOrder();\\n\\n        (uint64 userId, , ) = orders[0].decodeOrder();\\n        bool minFundingThresholdNotReached = auctionData[auctionId]\\n        .minFundingThresholdNotReached;\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            (uint64 userIdOrder, uint96 buyAmount, uint96 sellAmount) = orders[\\n                i\\n            ]\\n            .decodeOrder();\\n            require(\\n                userIdOrder == userId,\\n                \\\"only allowed to claim for same user\\\"\\n            );\\n            if (minFundingThresholdNotReached) {\\n                //[10]\\n                sumBiddingTokenAmount = sumBiddingTokenAmount.add(sellAmount);\\n            } else {\\n                //[23]\\n                if (orders[i] == auction.clearingPriceOrder) {\\n                    //[25]\\n                    sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\\n                        auction\\n                        .volumeClearingPriceOrder\\n                        .mul(priceNumerator)\\n                        .div(priceDenominator)\\n                    );\\n                    sumBiddingTokenAmount = sumBiddingTokenAmount.add(\\n                        sellAmount.sub(auction.volumeClearingPriceOrder)\\n                    );\\n                } else {\\n                    if (orders[i].smallerThan(auction.clearingPriceOrder)) {\\n                        //[17]\\n                        sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\\n                            sellAmount.mul(priceNumerator).div(priceDenominator)\\n                        );\\n                    } else {\\n                        //[24]\\n                        sumBiddingTokenAmount = sumBiddingTokenAmount.add(\\n                            sellAmount\\n                        );\\n                    }\\n                }\\n            }\\n            emit ClaimedFromOrder(auctionId, userId, buyAmount, sellAmount);\\n        }\\n        sendOutTokens(\\n            auctionId,\\n            sumAuctioningTokenAmount,\\n            sumBiddingTokenAmount,\\n            userId\\n        ); //[3]\\n    }\\n\\n    function processFeesAndAuctioneerFunds(\\n        uint256 auctionId,\\n        uint256 fillVolumeOfAuctioneerOrder,\\n        uint64 auctioneerId,\\n        uint96 fullAuctionedAmount\\n    ) internal {\\n        uint256 feeAmount = fullAuctionedAmount\\n        .mul(auctionData[auctionId].feeNumerator)\\n        .div(FEE_DENOMINATOR); //[20]\\n        if (auctionData[auctionId].minFundingThresholdNotReached) {\\n            sendOutTokens(\\n                auctionId,\\n                fullAuctionedAmount.add(feeAmount),\\n                0,\\n                auctioneerId\\n            ); //[4]\\n        } else {\\n            //[11]\\n            (, uint96 priceNumerator, uint96 priceDenominator) = auctionData[\\n                auctionId\\n            ]\\n            .clearingPriceOrder\\n            .decodeOrder();\\n            // unsettledAuctionTokens = fullAuctionedAmount - fillVolumeOfAuctioneerOrder\\n            uint256 unsettledAuctionTokens = fullAuctionedAmount.sub(\\n                fillVolumeOfAuctioneerOrder\\n            );\\n            // auctioningTokenAmount = unsettledAuctionTokens + ( ( feeAmount * unsettledAuctionTokens ) / fullAuctionedAmount)\\n            uint256 auctioningTokenAmount = unsettledAuctionTokens.add(\\n                feeAmount.mul(unsettledAuctionTokens).div(fullAuctionedAmount)\\n            );\\n            // biddingTokenAmount = (fillVolumeOfAuctioneerOrder * priceDenominator) / priceNumerator\\n            uint256 biddingTokenAmount = fillVolumeOfAuctioneerOrder\\n            .mul(priceDenominator)\\n            .div(priceNumerator);\\n            sendOutTokens(\\n                auctionId,\\n                auctioningTokenAmount,\\n                biddingTokenAmount,\\n                auctioneerId\\n            ); //[5]\\n            sendOutTokens(\\n                auctionId,\\n                // (feeAmount * fillVolumeOfAuctioneerOrder) / fullAuctionedAmount\\n                feeAmount.mul(fillVolumeOfAuctioneerOrder).div(\\n                    fullAuctionedAmount\\n                ),\\n                0,\\n                feeReceiverUserId\\n            ); //[7]\\n        }\\n    }\\n\\n    /* send back either auctioning or bidding tokens to the given user.\\n    Transfers out occur on:\\n    1- order cancellation,giving back the amount bid by the user in an order.\\n    2- users claiming funds after the auction is concluded \\n    3- auction closing and sending\\n        1-funds to the auctioneer\\n        2-fees to the dedicated address\\n    */\\n    function sendOutTokens(\\n        uint256 auctionId,\\n        uint256 auctioningTokenAmount,\\n        uint256 biddingTokenAmount,\\n        uint64 userId\\n    ) internal {\\n        address userAddress = registeredUsers.getAddressAt(userId);\\n        if (auctioningTokenAmount > 0) {\\n            auctionData[auctionId].auctioningToken.safeTransfer(\\n                userAddress,\\n                auctioningTokenAmount\\n            );\\n        }\\n        if (biddingTokenAmount > 0) {\\n            auctionData[auctionId].biddingToken.safeTransfer(\\n                userAddress,\\n                biddingTokenAmount\\n            );\\n        }\\n    }\\n\\n    function registerUser(address user) public returns (uint64 userId) {\\n        numUsers = numUsers.add(1).toUint64();\\n        require(\\n            registeredUsers.insert(numUsers, user),\\n            \\\"User already registered\\\"\\n        );\\n        userId = numUsers;\\n        emit UserRegistration(user, userId);\\n    }\\n\\n    function getUserId(address user) public returns (uint64 userId) {\\n        if (registeredUsers.hasAddress(user)) {\\n            userId = registeredUsers.getId(user);\\n        } else {\\n            userId = registerUser(user);\\n            emit NewUser(userId, user);\\n        }\\n    }\\n\\n    function getSecondsRemainingInBatch(uint256 auctionId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (auctionData[auctionId].auctionEndDate < block.timestamp) {\\n            return 0;\\n        }\\n        return auctionData[auctionId].auctionEndDate.sub(block.timestamp);\\n    }\\n\\n    function containsOrder(uint256 auctionId, bytes32 order)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return sellOrders[auctionId].contains(order);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x34ea185a0000ac2579314432e3178fbe5bee303e35bcc8b43f9b2e4507dc81ee\",\"license\":\"MIT\"},\"contracts/interfaces/AllowListVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nlibrary AllowListVerifierHelper {\\n    /// @dev Value returned by a call to `isAllowed` if the check\\n    /// was successful. The value is defined as:\\n    /// bytes4(keccak256(\\\"isAllowed(address,uint256,bytes)\\\"))\\n    bytes4 internal constant MAGICVALUE = 0x19a05a7e;\\n}\\n\\n///\\n/// @dev Standardized interface for an allowList manager for annexAuction\\n/// The interface was inspired by EIP-1271\\ninterface AllowListVerifier {\\n    /// @dev Should return whether the a specific user has access to an auction\\n    /// by returning the magic value from AllowListVerifierHelper\\n    function isAllowed(\\n        address user,\\n        uint256 auctionId,\\n        bytes calldata callData\\n    ) external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0x0b893e72e2e5576bc24fbae1fa0ce82e32b81f99f34feb78d19fdc964f63f96f\",\"license\":\"MIT\"},\"contracts/libraries/IdToAddressBiMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\\n// Contract does not have test coverage, as it was nearly copied from:\\n// https://github.com/gnosis/solidity-data-structures/blob/master/contracts/libraries/IdToAddressBiMap.sol\\n// The only change is uint16 -> uint64\\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\nlibrary IdToAddressBiMap {\\n    struct Data {\\n        mapping(uint64 => address) idToAddress;\\n        mapping(address => uint64) addressToId;\\n    }\\n\\n    function hasId(Data storage self, uint64 id) internal view returns (bool) {\\n        return self.idToAddress[id + 1] != address(0);\\n    }\\n\\n    function hasAddress(Data storage self, address addr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return self.addressToId[addr] != 0;\\n    }\\n\\n    function getAddressAt(Data storage self, uint64 id)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        require(hasId(self, id), \\\"Must have ID to get Address\\\");\\n        return self.idToAddress[id + 1];\\n    }\\n\\n    function getId(Data storage self, address addr)\\n        internal\\n        view\\n        returns (uint64)\\n    {\\n        require(hasAddress(self, addr), \\\"Must have Address to get ID\\\");\\n        return self.addressToId[addr] - 1;\\n    }\\n\\n    function insert(\\n        Data storage self,\\n        uint64 id,\\n        address addr\\n    ) internal returns (bool) {\\n        require(addr != address(0), \\\"Cannot insert zero address\\\");\\n        require(id != uint64(-1), \\\"Cannot insert max uint64\\\");\\n        // Ensure bijectivity of the mappings\\n        if (\\n            self.addressToId[addr] != 0 ||\\n            self.idToAddress[id + 1] != address(0)\\n        ) {\\n            return false;\\n        }\\n        self.idToAddress[id + 1] = addr;\\n        self.addressToId[addr] = id + 1;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2161e11695ddcc53c30cdf04ba2244b0de3c1a6b6e8ab62efa5552e914f30c9a\",\"license\":\"MIT\"},\"contracts/libraries/IterableOrderedOrderSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary IterableOrderedOrderSet {\\n    using SafeMath for uint96;\\n    using IterableOrderedOrderSet for bytes32;\\n\\n    // represents smallest possible value for an order under comparison of fn smallerThan()\\n    bytes32 internal constant QUEUE_START =\\n        0x0000000000000000000000000000000000000000000000000000000000000001;\\n    // represents highest possible value for an order under comparison of fn smallerThan()\\n    bytes32 internal constant QUEUE_END =\\n        0xffffffffffffffffffffffffffffffffffffffff000000000000000000000001;\\n\\n    /// The struct is used to implement a modified version of a doubly linked\\n    /// list with sorted elements. The list starts from QUEUE_START to\\n    /// QUEUE_END, and each node keeps track of its predecessor and successor.\\n    /// Nodes can be added or removed.\\n    ///\\n    /// `next` and `prev` have a different role. The list is supposed to be\\n    /// traversed with `next`. If `next` is empty, the node is not part of the\\n    /// list. However, `prev` might be set for elements that are not in the\\n    /// list, which is why it should not be used for traversing. Having a `prev`\\n    /// set for elements not in the list is used to keep track of the history of\\n    /// the position in the list of a removed element.\\n    struct Data {\\n        mapping(bytes32 => bytes32) nextMap;\\n        mapping(bytes32 => bytes32) prevMap;\\n    }\\n\\n    struct Order {\\n        uint64 owner;\\n        uint96 buyAmount;\\n        uint96 sellAmount;\\n    }\\n\\n    function initializeEmptyList(Data storage self) internal {\\n        self.nextMap[QUEUE_START] = QUEUE_END;\\n        self.prevMap[QUEUE_END] = QUEUE_START;\\n    }\\n\\n    function isEmpty(Data storage self) internal view returns (bool) {\\n        return self.nextMap[QUEUE_START] == QUEUE_END;\\n    }\\n\\n    function insert(\\n        Data storage self,\\n        bytes32 elementToInsert,\\n        bytes32 elementBeforeNewOne\\n    ) internal returns (bool) {\\n        (, , uint96 denominator) = decodeOrder(elementToInsert);\\n        require(denominator != uint96(0), \\\"Inserting zero is not supported\\\");\\n        require(\\n            elementToInsert != QUEUE_START && elementToInsert != QUEUE_END,\\n            \\\"Inserting element is not valid\\\"\\n        );\\n        if (contains(self, elementToInsert)) {\\n            return false;\\n        }\\n        if (\\n            elementBeforeNewOne != QUEUE_START &&\\n            self.prevMap[elementBeforeNewOne] == bytes32(0)\\n        ) {\\n            return false;\\n        }\\n        if (!elementBeforeNewOne.smallerThan(elementToInsert)) {\\n            return false;\\n        }\\n\\n        // `elementBeforeNewOne` might have been removed during the time it\\n        // took to the transaction calling this function to be mined, so\\n        // the new order cannot be appended directly to this. We follow the\\n        // history of previous links backwards until we find an element in\\n        // the list from which to start our search.\\n        // Note that following the link backwards returns elements that are\\n        // before `elementBeforeNewOne` in sorted order.\\n        while (self.nextMap[elementBeforeNewOne] == bytes32(0)) {\\n            elementBeforeNewOne = self.prevMap[elementBeforeNewOne];\\n        }\\n\\n        // `elementBeforeNewOne` belongs now to the linked list. We search the\\n        // largest entry that is smaller than the element to insert.\\n        bytes32 previous;\\n        bytes32 current = elementBeforeNewOne;\\n        do {\\n            previous = current;\\n            current = self.nextMap[current];\\n        } while (current.smallerThan(elementToInsert));\\n        // Note: previous < elementToInsert < current\\n        self.nextMap[previous] = elementToInsert;\\n        self.prevMap[current] = elementToInsert;\\n        self.prevMap[elementToInsert] = previous;\\n        self.nextMap[elementToInsert] = current;\\n\\n        return true;\\n    }\\n\\n    /// The element is removed from the linked list, but the node retains\\n    /// information on which predecessor it had, so that a node in the chain\\n    /// can be reached by following the predecessor chain of deleted elements.\\n    function removeKeepHistory(Data storage self, bytes32 elementToRemove)\\n        internal\\n        returns (bool)\\n    {\\n        if (!contains(self, elementToRemove)) {\\n            return false;\\n        }\\n        bytes32 previousElement = self.prevMap[elementToRemove];\\n        bytes32 nextElement = self.nextMap[elementToRemove];\\n        self.nextMap[previousElement] = nextElement;\\n        self.prevMap[nextElement] = previousElement;\\n        self.nextMap[elementToRemove] = bytes32(0);\\n        return true;\\n    }\\n\\n    /// Remove an element from the chain, clearing all related storage.\\n    /// Note that no elements should be inserted using as a reference point a\\n    /// node deleted after calling `remove`, since an element in the `prev`\\n    /// chain might be missing.\\n    function remove(Data storage self, bytes32 elementToRemove)\\n        internal\\n        returns (bool)\\n    {\\n        bool result = removeKeepHistory(self, elementToRemove);\\n        if (result) {\\n            self.prevMap[elementToRemove] = bytes32(0);\\n        }\\n        return result;\\n    }\\n\\n    function contains(Data storage self, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (value == QUEUE_START) {\\n            return false;\\n        }\\n        // Note: QUEUE_END is not contained in the list since it has no\\n        // successor.\\n        return self.nextMap[value] != bytes32(0);\\n    }\\n\\n    // @dev orders are ordered by\\n    // 1. their price - buyAmount/sellAmount\\n    // 2. by the sellAmount\\n    // 3. their userId,\\n    function smallerThan(bytes32 orderLeft, bytes32 orderRight)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        (\\n            uint64 userIdLeft,\\n            uint96 priceNumeratorLeft,\\n            uint96 priceDenominatorLeft\\n        ) = decodeOrder(orderLeft);\\n        (\\n            uint64 userIdRight,\\n            uint96 priceNumeratorRight,\\n            uint96 priceDenominatorRight\\n        ) = decodeOrder(orderRight);\\n\\n        if (\\n            priceNumeratorLeft.mul(priceDenominatorRight) <\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\n        ) return true;\\n        if (\\n            priceNumeratorLeft.mul(priceDenominatorRight) >\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\n        ) return false;\\n\\n        if (priceNumeratorLeft < priceNumeratorRight) return true;\\n        if (priceNumeratorLeft > priceNumeratorRight) return false;\\n        require(\\n            userIdLeft != userIdRight,\\n            \\\"user is not allowed to place same order twice\\\"\\n        );\\n        if (userIdLeft < userIdRight) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function first(Data storage self) internal view returns (bytes32) {\\n        require(!isEmpty(self), \\\"Trying to get first from empty set\\\");\\n        return self.nextMap[QUEUE_START];\\n    }\\n\\n    function next(Data storage self, bytes32 value)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        require(value != QUEUE_END, \\\"Trying to get next of last element\\\");\\n        bytes32 nextElement = self.nextMap[value];\\n        require(\\n            nextElement != bytes32(0),\\n            \\\"Trying to get next of non-existent element\\\"\\n        );\\n        return nextElement;\\n    }\\n\\n    function decodeOrder(bytes32 _orderData)\\n        internal\\n        pure\\n        returns (\\n            uint64 userId,\\n            uint96 buyAmount,\\n            uint96 sellAmount\\n        )\\n    {\\n        // Note: converting to uint discards the binary digits that do not fit\\n        // the type.\\n        userId = uint64(uint256(_orderData) >> 192);\\n        buyAmount = uint96(uint256(_orderData) >> 96);\\n        sellAmount = uint96(uint256(_orderData));\\n    }\\n\\n    function encodeOrder(\\n        uint64 userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(\\n                (uint256(userId) << 192) +\\n                    (uint256(buyAmount) << 96) +\\n                    uint256(sellAmount)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x6d47cfcfe34b3017d499d4f5ab5486d7039b6e092fbe7df6bb1c2cb3877b2c5d\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Logic was copied and modified from here: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/SafeCast.sol\\n */\\nlibrary SafeCast {\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value < 2**96, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n}\\n\",\"keccak256\":\"0x9faf507c56a6df12ada89ae2308068946490a1b0b06fb3bbf787865e41bb7659\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 290,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "_owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3015,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "sellOrders",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(Data)7995_storage)"
          },
          {
            "astId": 3019,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "auctionData",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(AuctionData)3011_storage)"
          },
          {
            "astId": 3023,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "auctionAccessManager",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 3027,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "auctionAccessData",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_bytes_storage)"
          },
          {
            "astId": 3029,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "registeredUsers",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(Data)7804_storage"
          },
          {
            "astId": 3031,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "numUsers",
            "offset": 0,
            "slot": "7",
            "type": "t_uint64"
          },
          {
            "astId": 3033,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "auctionCounter",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3042,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "feeNumerator",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 3048,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "feeReceiverUserId",
            "offset": 0,
            "slot": "10",
            "type": "t_uint64"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_bytes_storage": {
            "encoding": "bytes",
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20)1401": {
            "encoding": "inplace",
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_uint64)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint64)",
            "numberOfBytes": "32",
            "value": "t_uint64"
          },
          "t_mapping(t_bytes32,t_bytes32)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => bytes32)",
            "numberOfBytes": "32",
            "value": "t_bytes32"
          },
          "t_mapping(t_uint256,t_address)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => bytes)",
            "numberOfBytes": "32",
            "value": "t_bytes_storage"
          },
          "t_mapping(t_uint256,t_struct(AuctionData)3011_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct AnnexBatchAuction.AuctionData)",
            "numberOfBytes": "32",
            "value": "t_struct(AuctionData)3011_storage"
          },
          "t_mapping(t_uint256,t_struct(Data)7995_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
            "numberOfBytes": "32",
            "value": "t_struct(Data)7995_storage"
          },
          "t_mapping(t_uint64,t_address)": {
            "encoding": "mapping",
            "key": "t_uint64",
            "label": "mapping(uint64 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_struct(AuctionData)3011_storage": {
            "encoding": "inplace",
            "label": "struct AnnexBatchAuction.AuctionData",
            "members": [
              {
                "astId": 2984,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "auctioningToken",
                "offset": 0,
                "slot": "0",
                "type": "t_contract(IERC20)1401"
              },
              {
                "astId": 2986,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "biddingToken",
                "offset": 0,
                "slot": "1",
                "type": "t_contract(IERC20)1401"
              },
              {
                "astId": 2988,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "orderCancellationEndDate",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 2990,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "auctionEndDate",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              },
              {
                "astId": 2992,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "initialAuctionOrder",
                "offset": 0,
                "slot": "4",
                "type": "t_bytes32"
              },
              {
                "astId": 2994,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "minimumBiddingAmountPerOrder",
                "offset": 0,
                "slot": "5",
                "type": "t_uint256"
              },
              {
                "astId": 2996,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "interimSumBidAmount",
                "offset": 0,
                "slot": "6",
                "type": "t_uint256"
              },
              {
                "astId": 2998,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "interimOrder",
                "offset": 0,
                "slot": "7",
                "type": "t_bytes32"
              },
              {
                "astId": 3000,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "clearingPriceOrder",
                "offset": 0,
                "slot": "8",
                "type": "t_bytes32"
              },
              {
                "astId": 3002,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "volumeClearingPriceOrder",
                "offset": 0,
                "slot": "9",
                "type": "t_uint96"
              },
              {
                "astId": 3004,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "minFundingThresholdNotReached",
                "offset": 12,
                "slot": "9",
                "type": "t_bool"
              },
              {
                "astId": 3006,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "isAtomicClosureAllowed",
                "offset": 13,
                "slot": "9",
                "type": "t_bool"
              },
              {
                "astId": 3008,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "feeNumerator",
                "offset": 0,
                "slot": "10",
                "type": "t_uint256"
              },
              {
                "astId": 3010,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "minFundingThreshold",
                "offset": 0,
                "slot": "11",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(Data)7804_storage": {
            "encoding": "inplace",
            "label": "struct IdToAddressBiMap.Data",
            "members": [
              {
                "astId": 7799,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "idToAddress",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_uint64,t_address)"
              },
              {
                "astId": 7803,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "addressToId",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint64)"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Data)7995_storage": {
            "encoding": "inplace",
            "label": "struct IterableOrderedOrderSet.Data",
            "members": [
              {
                "astId": 7990,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "nextMap",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_bytes32,t_bytes32)"
              },
              {
                "astId": 7994,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "prevMap",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_bytes32,t_bytes32)"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "encoding": "inplace",
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint96": {
            "encoding": "inplace",
            "label": "uint96",
            "numberOfBytes": "12"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "claimFromParticipantOrder(uint256,bytes32[])": {
            "notice": "First we will remove the given orders from contract sell orders list.*"
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/Access/AnnexAccessControls.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nimport \\\"./AnnexAdminAccess.sol\\\";\\n\\ncontract ANNEXAccessControls is AnnexAdminAccess {\\n    /// @notice Role definitions\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant SMART_CONTRACT_ROLE = keccak256(\\\"SMART_CONTRACT_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /// @notice Events for adding and removing various roles\\n\\n    event MinterRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event MinterRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses\\n     */\\n    constructor() public {\\n    }\\n\\n\\n    /////////////\\n    // Lookups //\\n    /////////////\\n\\n    /**\\n     * @notice Used to check whether an address has the minter role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasMinterRole(address _address) public view returns (bool) {\\n        return hasRole(MINTER_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the smart contract role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasSmartContractRole(address _address) public view returns (bool) {\\n        return hasRole(SMART_CONTRACT_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the operator role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasOperatorRole(address _address) public view returns (bool) {\\n        return hasRole(OPERATOR_ROLE, _address);\\n    }\\n\\n    ///////////////\\n    // Modifiers //\\n    ///////////////\\n\\n    /**\\n     * @notice Grants the minter role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addMinterRole(address _address) external {\\n        grantRole(MINTER_ROLE, _address);\\n        emit MinterRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the minter role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeMinterRole(address _address) external {\\n        revokeRole(MINTER_ROLE, _address);\\n        emit MinterRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the smart contract role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addSmartContractRole(address _address) external {\\n        grantRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the smart contract role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeSmartContractRole(address _address) external {\\n        revokeRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the operator role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addOperatorRole(address _address) external {\\n        grantRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the operator role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeOperatorRole(address _address) external {\\n        revokeRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleRemoved(_address, _msgSender());\\n    }\\n\\n}\\n\"\n    },\n    \"contracts/Access/AnnexAdminAccess.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract AnnexAdminAccess is AccessControl {\\n\\n    /// @dev Whether access is initialised.\\n    bool private initAccess;\\n\\n    /// @notice Events for adding and removing various roles.\\n    event AdminRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event AdminRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n\\n    /// @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses.\\n    constructor() public {\\n    }\\n\\n    /**\\n     * @notice Initializes access controls.\\n     * @param _admin Admins address.\\n     */\\n    function initAccessControls(address _admin) public {\\n        require(!initAccess, \\\"Already initialised\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        initAccess = true;\\n    }\\n\\n    /////////////\\n    // Lookups //\\n    /////////////\\n\\n    /**\\n     * @notice Used to check whether an address has the admin role.\\n     * @param _address EOA or contract being checked.\\n     * @return bool True if the account has the role or false if it does not.\\n     */\\n    function hasAdminRole(address _address) public  view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\n    }\\n\\n    ///////////////\\n    // Modifiers //\\n    ///////////////\\n\\n    /**\\n     * @notice Grants the admin role to an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract receiving the new role.\\n     */\\n    function addAdminRole(address _address) external {\\n        grantRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the admin role from an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract affected.\\n     */\\n    function removeAdminRole(address _address) external {\\n        revokeRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleRemoved(_address, _msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"contracts/AnnexDutchAuction.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./Access/AnnexAccessControls.sol\\\";\\nimport \\\"./Access/AnnexAdminAccess.sol\\\";\\nimport \\\"./interfaces/IAnnexMarket.sol\\\";\\nimport \\\"./interfaces/IPointList.sol\\\";\\nimport \\\"./libraries/AnnexERC20.sol\\\";\\nimport \\\"./libraries/AnnexERC20.sol\\\";\\nimport \\\"./Utils/AnnexBatchable.sol\\\";\\nimport \\\"./libraries/AnnexMath.sol\\\";\\nimport \\\"./Utils/SafeTransfer.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./Utils/Documents.sol\\\";\\n\\n\\ncontract AnnexDutchAuction is IAnnexMarket, ANNEXAccessControls, AnnexBatchable, SafeTransfer, Documents , ReentrancyGuard  {\\n    using AnnexMath for uint256;\\n    using AnnexMath128 for uint128;\\n    using AnnexMath64 for uint64;\\n    using AnnexERC20 for IERC20;\\n\\n    /// @notice ANNEXMarket template id for the factory contract.\\n    /// @dev For different marketplace types, this must be incremented.\\n    uint256 public constant override marketTemplate = 2;\\n    /// @dev The placeholder ETH address.\\n    address private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @notice Main market variables.\\n    struct MarketInfo {\\n        uint64 startTime;\\n        uint64 endTime;\\n        uint128 totalTokens;\\n    }\\n    MarketInfo public marketInfo;\\n\\n    /// @notice Market price variables.\\n    struct MarketPrice {\\n        uint128 startPrice;\\n        uint128 minimumPrice;\\n    }\\n    MarketPrice public marketPrice;\\n\\n    /// @notice Market dynamic variables.\\n    struct MarketStatus {\\n        uint128 commitmentsTotal;\\n        bool finalized;\\n        bool usePointList;\\n    }\\n\\n    MarketStatus public marketStatus;\\n\\n    /// @notice The token being sold.\\n    address public auctionToken; \\n    /// @notice The currency the auction accepts for payment. Can be ETH or token address.\\n    address public paymentCurrency;  \\n    /// @notice Where the auction funds will get paid.\\n    address payable public wallet;  \\n    /// @notice Address that manages auction approvals.\\n    address public pointList;\\n\\n    /// @notice The commited amount of accounts.\\n    mapping(address => uint256) public commitments; \\n    /// @notice Amount of tokens to claim per address.\\n    mapping(address => uint256) public claimed;\\n\\n    /// @notice Event for updating auction times.  Needs to be before auction starts.\\n    event AuctionTimeUpdated(uint256 startTime, uint256 endTime); \\n    /// @notice Event for updating auction prices. Needs to be before auction starts.\\n    event AuctionPriceUpdated(uint256 startPrice, uint256 minimumPrice); \\n    /// @notice Event for updating auction wallet. Needs to be before auction starts.\\n    event AuctionWalletUpdated(address wallet); \\n\\n    /// @notice Event for adding a commitment.\\n    event AddedCommitment(address addr, uint256 commitment);   \\n    /// @notice Event for finalization of the auction.\\n    event AuctionFinalized();\\n    /// @notice Event for cancellation of the auction.\\n    event AuctionCancelled();\\n\\n    /**\\n     * @notice Initializes main contract variables and transfers funds for the auction.\\n     * @dev Init function.\\n     * @param _funder The address that funds the token for crowdsale.\\n     * @param _token Address of the token being sold.\\n     * @param _totalTokens The total number of tokens to sell in auction.\\n     * @param _startTime Auction start time.\\n     * @param _endTime Auction end time.\\n     * @param _paymentCurrency The currency the crowdsale accepts for payment. Can be ETH or token address.\\n     * @param _startPrice Starting price of the auction.\\n     * @param _minimumPrice The minimum auction price.\\n     * @param _admin Address that can finalize auction.\\n     * @param _pointList Address that will manage auction approvals.\\n     * @param _wallet Address where collected funds will be forwarded to.\\n     */\\n    function initAuction(\\n        address _funder,\\n        address _token,\\n        uint256 _totalTokens,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        address _paymentCurrency,\\n        uint256 _startPrice,\\n        uint256 _minimumPrice,\\n        address _admin,\\n        address _pointList,\\n        address payable _wallet\\n    ) public {\\n        require(_startTime < 10000000000, \\\"AnnexDutchAuction: enter an unix timestamp in seconds, not miliseconds\\\");\\n        require(_endTime < 10000000000, \\\"AnnexDutchAuction: enter an unix timestamp in seconds, not miliseconds\\\");\\n        require(_startTime >= block.timestamp, \\\"AnnexDutchAuction: start time is before current time\\\");\\n        require(_endTime > _startTime, \\\"AnnexDutchAuction: end time must be older than start price\\\");\\n        require(_totalTokens > 0,\\\"AnnexDutchAuction: total tokens must be greater than zero\\\");\\n        require(_startPrice > _minimumPrice, \\\"AnnexDutchAuction: start price must be higher than minimum price\\\");\\n        require(_minimumPrice > 0, \\\"AnnexDutchAuction: minimum price must be greater than 0\\\"); \\n        require(_admin != address(0), \\\"AnnexDutchAuction: admin is the zero address\\\");\\n        require(_wallet != address(0), \\\"AnnexDutchAuction: wallet is the zero address\\\");\\n        require(IERC20(_token).decimals() == 18, \\\"AnnexDutchAuction: Token does not have 18 decimals\\\");\\n        if (_paymentCurrency != ETH_ADDRESS) {\\n            require(IERC20(_paymentCurrency).decimals() > 0, \\\"AnnexDutchAuction: Payment currency is not ERC20\\\");\\n        }\\n\\n        marketInfo.startTime = AnnexMath.to64(_startTime);\\n        marketInfo.endTime = AnnexMath.to64(_endTime);\\n        marketInfo.totalTokens = AnnexMath.to128(_totalTokens);\\n\\n        marketPrice.startPrice = AnnexMath.to128(_startPrice);\\n        marketPrice.minimumPrice = AnnexMath.to128(_minimumPrice);\\n\\n        auctionToken = _token;\\n        paymentCurrency = _paymentCurrency;\\n        wallet = _wallet;\\n\\n        initAccessControls(_admin);\\n\\n        _setList(_pointList);\\n        _safeTransferFrom(_token, _funder, _totalTokens);\\n    }\\n\\n\\n\\n    /**\\n     AnnexDutch Auction Price Function\\n     ============================\\n     \\n     Start Price -----\\n                      \\\\\\n                       \\\\\\n                        \\\\\\n                         \\\\ ------------ Clearing Price\\n                        / \\\\            = AmountRaised/TokenSupply\\n         Token Price  --   \\\\\\n                     /      \\\\\\n                   --        ----------- Minimum Price\\n     Amount raised /          End Time\\n    */\\n\\n    /**\\n     * @notice Calculates the average price of each token from all commitments.\\n     * @return Average token price.\\n     */\\n    function tokenPrice() public view returns (uint256) {\\n        return uint256(marketStatus.commitmentsTotal).mul(1e18).div(uint256(marketInfo.totalTokens));\\n    }\\n\\n    /**\\n     * @notice Returns auction price in any time.\\n     * @return Fixed start price or minimum price if outside of auction time, otherwise calculated current price.\\n     */\\n    function priceFunction() public view returns (uint256) {\\n        /// @dev Return Auction Price\\n        if (block.timestamp <= uint256(marketInfo.startTime)) {\\n            return uint256(marketPrice.startPrice);\\n        }\\n        if (block.timestamp >= uint256(marketInfo.endTime)) {\\n            return uint256(marketPrice.minimumPrice);\\n        }\\n\\n        return _currentPrice();\\n    }\\n\\n    /**\\n     * @notice The current clearing price of the Dutch auction.\\n     * @return The bigger from tokenPrice and priceFunction.\\n     */\\n    function clearingPrice() public view returns (uint256) {\\n        /// @dev If auction successful, return tokenPrice\\n        if (tokenPrice() > priceFunction()) {\\n            return tokenPrice();\\n        }\\n        return priceFunction();\\n    }\\n\\n\\n    ///--------------------------------------------------------\\n    /// Commit to buying tokens!\\n    ///--------------------------------------------------------\\n\\n    receive() external payable {\\n        revertBecauseUserDidNotProvideAgreement();\\n    }\\n\\n    /** \\n     * @dev Attribution to the awesome delta.financial contracts\\n    */  \\n    function marketParticipationAgreement() public pure returns (string memory) {\\n        return \\\"I understand that I'm interacting with a smart contract. I understand that tokens commited are subject to the token issuer and local laws where applicable. I reviewed code of the smart contract and understand it fully. I agree to not hold developers or other people associated with the project liable for any losses or misunderstandings\\\";\\n    }\\n    /** \\n     * @dev Not using modifiers is a purposeful choice for code readability.\\n    */ \\n    function revertBecauseUserDidNotProvideAgreement() internal pure {\\n        revert(\\\"No agreement provided, please review the smart contract before interacting with it\\\");\\n    }\\n\\n    /**\\n     * @notice Checks the amount of ETH to commit and adds the commitment. Refunds the buyer if commit is too high.\\n     * @param _beneficiary Auction participant ETH address.\\n     */\\n    function commitEth(\\n        address payable _beneficiary,\\n        bool readAndAgreedToMarketParticipationAgreement\\n    )\\n        public payable\\n    {\\n        require(paymentCurrency == ETH_ADDRESS, \\\"AnnexDutchAuction: payment currency is not ETH address\\\"); \\n        if(readAndAgreedToMarketParticipationAgreement == false) {\\n            revertBecauseUserDidNotProvideAgreement();\\n        }\\n        // Get ETH able to be committed\\n        uint256 ethToTransfer = calculateCommitment(msg.value);\\n\\n        /// @notice Accept ETH Payments.\\n        uint256 ethToRefund = msg.value.sub(ethToTransfer);\\n        if (ethToTransfer > 0) {\\n            _addCommitment(_beneficiary, ethToTransfer);\\n        }\\n        /// @notice Return any ETH to be refunded.\\n        if (ethToRefund > 0) {\\n            _beneficiary.transfer(ethToRefund);\\n        }\\n    }\\n\\n    /**\\n     * @notice Buy Tokens by commiting approved ERC20 tokens to this contract address.\\n     * @param _amount Amount of tokens to commit.\\n     */\\n    function commitTokens(uint256 _amount, bool readAndAgreedToMarketParticipationAgreement) public {\\n        commitTokensFrom(msg.sender, _amount, readAndAgreedToMarketParticipationAgreement);\\n    }\\n\\n\\n    /**\\n     * @notice Checks how much is user able to commit and processes that commitment.\\n     * @dev Users must approve contract prior to committing tokens to auction.\\n     * @param _from User ERC20 address.\\n     * @param _amount Amount of approved ERC20 tokens.\\n     */\\n    function commitTokensFrom(\\n        address _from,\\n        uint256 _amount,\\n        bool readAndAgreedToMarketParticipationAgreement\\n    )\\n        public   nonReentrant  \\n    {\\n        require(address(paymentCurrency) != ETH_ADDRESS, \\\"AnnexDutchAuction: Payment currency is not a token\\\");\\n        if(readAndAgreedToMarketParticipationAgreement == false) {\\n            revertBecauseUserDidNotProvideAgreement();\\n        }\\n        uint256 tokensToTransfer = calculateCommitment(_amount);\\n        if (tokensToTransfer > 0) {\\n            _safeTransferFrom(paymentCurrency, msg.sender, tokensToTransfer);\\n            _addCommitment(_from, tokensToTransfer);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the pricedrop factor.\\n     * @return Value calculated from auction start and end price difference divided the auction duration.\\n     */\\n    function priceDrop() public view returns (uint256) {\\n        MarketInfo memory _marketInfo = marketInfo;\\n        MarketPrice memory _marketPrice = marketPrice;\\n\\n        uint256 numerator = uint256(_marketPrice.startPrice.sub(_marketPrice.minimumPrice));\\n        uint256 denominator = uint256(_marketInfo.endTime.sub(_marketInfo.startTime));\\n        return numerator / denominator;\\n    }\\n\\n\\n   /**\\n     * @notice How many tokens the user is able to claim.\\n     * @param _user Auction participant address.\\n     * @return User commitments reduced by already claimed tokens.\\n     */\\n    function tokensClaimable(address _user) public view returns (uint256) {\\n        uint256 tokensAvailable = commitments[_user].mul(1e18).div(clearingPrice());\\n        return tokensAvailable.sub(claimed[_user]);\\n    }\\n\\n    /**\\n     * @notice Calculates total amount of tokens committed at current auction price.\\n     * @return Number of tokens commited.\\n     */\\n    function totalTokensCommitted() public view returns (uint256) {\\n        return uint256(marketStatus.commitmentsTotal).mul(1e18).div(clearingPrice());\\n    }\\n\\n    /**\\n     * @notice Calculates the amout able to be committed during an auction.\\n     * @param _commitment Commitment user would like to make.\\n     * @return committed Amount allowed to commit.\\n     */\\n    function calculateCommitment(uint256 _commitment) public view returns (uint256 committed) {\\n        uint256 maxCommitment = uint256(marketInfo.totalTokens).mul(clearingPrice()).div(1e18);\\n        if (uint256(marketStatus.commitmentsTotal).add(_commitment) > maxCommitment) {\\n            return maxCommitment.sub(uint256(marketStatus.commitmentsTotal));\\n        }\\n        return _commitment;\\n    }\\n\\n    /**\\n     * @notice Checks if the auction is open.\\n     * @return True if current time is greater than startTime and less than endTime.\\n     */\\n    function isOpen() public view returns (bool) {\\n        return block.timestamp >= uint256(marketInfo.startTime) && block.timestamp <= uint256(marketInfo.endTime);\\n    }\\n\\n    /**\\n     * @notice Successful if tokens sold equals totalTokens.\\n     * @return True if tokenPrice is bigger or equal clearingPrice.\\n     */\\n    function auctionSuccessful() public view returns (bool) {\\n        return tokenPrice() >= clearingPrice();\\n    }\\n\\n    /**\\n     * @notice Checks if the auction has ended.\\n     * @return True if auction is successful or time has ended.\\n     */\\n    function auctionEnded() public view returns (bool) {\\n        return auctionSuccessful() || block.timestamp > uint256(marketInfo.endTime);\\n    }\\n\\n    /**\\n     * @return Returns true if market has been finalized\\n     */\\n    function finalized() public view returns (bool) {\\n        return marketStatus.finalized;\\n    }\\n\\n    /**\\n     * @return Returns true if 14 days have passed since the end of the auction\\n     */\\n    function finalizeTimeExpired() public view returns (bool) {\\n        return uint256(marketInfo.endTime) + 7 days < block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Calculates price during the auction.\\n     * @return Current auction price.\\n     */\\n    function _currentPrice() private view returns (uint256) {\\n        uint256 priceDiff = block.timestamp.sub(uint256(marketInfo.startTime)).mul(priceDrop());\\n        return uint256(marketPrice.startPrice).sub(priceDiff);\\n    }\\n\\n    /**\\n     * @notice Updates commitment for this address and total commitment of the auction.\\n     * @param _addr Bidders address.\\n     * @param _commitment The amount to commit.\\n     */\\n    function _addCommitment(address _addr, uint256 _commitment) internal {\\n        require(block.timestamp >= uint256(marketInfo.startTime) && block.timestamp <= uint256(marketInfo.endTime), \\\"AnnexDutchAuction: outside auction hours\\\");\\n        MarketStatus storage status = marketStatus;\\n        \\n        uint256 newCommitment = commitments[_addr].add(_commitment);\\n        if (status.usePointList) {\\n            require(IPointList(pointList).hasPoints(_addr, newCommitment));\\n        }\\n        \\n        commitments[_addr] = newCommitment;\\n        status.commitmentsTotal = AnnexMath.to128(uint256(status.commitmentsTotal).add(_commitment));\\n        emit AddedCommitment(_addr, _commitment);\\n    }\\n\\n\\n    //--------------------------------------------------------\\n    // Finalize Auction\\n    //--------------------------------------------------------\\n\\n\\n    /**\\n     * @notice Cancel Auction\\n     * @dev Admin can cancel the auction before it starts\\n     */\\n    function cancelAuction() public   nonReentrant  \\n    {\\n        require(hasAdminRole(msg.sender));\\n        MarketStatus storage status = marketStatus;\\n        require(!status.finalized, \\\"AnnexDutchAuction: auction already finalized\\\");\\n        require( uint256(status.commitmentsTotal) == 0, \\\"AnnexDutchAuction: auction already committed\\\" );\\n        _safeTokenPayment(auctionToken, wallet, uint256(marketInfo.totalTokens));\\n        status.finalized = true;\\n        emit AuctionCancelled();\\n    }\\n\\n    /**\\n     * @notice Auction finishes successfully above the reserve.\\n     * @dev Transfer contract funds to initialized wallet.\\n     */\\n    function finalize() public   nonReentrant  \\n    {\\n\\n        require(hasAdminRole(msg.sender) \\n                || hasSmartContractRole(msg.sender) \\n                || wallet == msg.sender\\n                || finalizeTimeExpired(), \\\"AnnexDutchAuction: sender must be an admin\\\");\\n        MarketStatus storage status = marketStatus;\\n\\n        require(!status.finalized, \\\"AnnexDutchAuction: auction already finalized\\\");\\n        if (auctionSuccessful()) {\\n            /// @dev Successful auction\\n            /// @dev Transfer contributed tokens to wallet.\\n            _safeTokenPayment(paymentCurrency, wallet, uint256(status.commitmentsTotal));\\n        } else {\\n            /// @dev Failed auction\\n            /// @dev Return auction tokens back to wallet.\\n            require(block.timestamp > uint256(marketInfo.endTime), \\\"AnnexDutchAuction: auction has not finished yet\\\"); \\n            _safeTokenPayment(auctionToken, wallet, uint256(marketInfo.totalTokens));\\n        }\\n        status.finalized = true;\\n        emit AuctionFinalized();\\n    }\\n\\n\\n    /// @notice Withdraws bought tokens, or returns commitment if the sale is unsuccessful.\\n    function withdrawTokens() public  {\\n        withdrawTokens(msg.sender);\\n    }\\n\\n   /**\\n     * @notice Withdraws bought tokens, or returns commitment if the sale is unsuccessful.\\n     * @dev Withdraw tokens only after auction ends.\\n     * @param beneficiary Whose tokens will be withdrawn.\\n     */\\n    function withdrawTokens(address payable beneficiary) public   nonReentrant  {\\n        if (auctionSuccessful()) {\\n            require(marketStatus.finalized, \\\"AnnexDutchAuction: not finalized\\\");\\n            /// @dev Successful auction! Transfer claimed tokens.\\n            uint256 tokensToClaim = tokensClaimable(beneficiary);\\n            require(tokensToClaim > 0, \\\"AnnexDutchAuction: No tokens to claim\\\"); \\n            claimed[beneficiary] = claimed[beneficiary].add(tokensToClaim);\\n            _safeTokenPayment(auctionToken, beneficiary, tokensToClaim);\\n        } else {\\n            /// @dev Auction did not meet reserve price.\\n            /// @dev Return committed funds back to user.\\n            require(block.timestamp > uint256(marketInfo.endTime), \\\"AnnexDutchAuction: auction has not finished yet\\\");\\n            uint256 fundsCommitted = commitments[beneficiary];\\n            commitments[beneficiary] = 0; // Stop multiple withdrawals and free some gas\\n            _safeTokenPayment(paymentCurrency, beneficiary, fundsCommitted);\\n        }\\n    }\\n\\n\\n    //--------------------------------------------------------\\n    // Documents\\n    //--------------------------------------------------------\\n\\n    function setDocument(string calldata _name, string calldata _data) external {\\n        require(hasAdminRole(msg.sender) );\\n        _setDocument( _name, _data);\\n    }\\n\\n    function setDocuments(string[] calldata _name, string[] calldata _data) external {\\n        require(hasAdminRole(msg.sender) );\\n        uint256 numDocs = _name.length;\\n        for (uint256 i = 0; i < numDocs; i++) {\\n            _setDocument( _name[i], _data[i]);\\n        }\\n    }\\n\\n    function removeDocument(string calldata _name) external {\\n        require(hasAdminRole(msg.sender));\\n        _removeDocument(_name);\\n    }\\n\\n\\n    //--------------------------------------------------------\\n    // Point Lists\\n    //--------------------------------------------------------\\n\\n\\n    function setList(address _list) external {\\n        require(hasAdminRole(msg.sender));\\n        _setList(_list);\\n    }\\n\\n    function enableList(bool _status) external {\\n        require(hasAdminRole(msg.sender));\\n        marketStatus.usePointList = _status;\\n    }\\n\\n    function _setList(address _pointList) private {\\n        if (_pointList != address(0)) {\\n            pointList = _pointList;\\n            marketStatus.usePointList = true;\\n        }\\n    }\\n\\n    //--------------------------------------------------------\\n    // Setter Functions\\n    //--------------------------------------------------------\\n\\n    /**\\n     * @notice Admin can set start and end time through this function.\\n     * @param _startTime Auction start time.\\n     * @param _endTime Auction end time.\\n     */\\n    function setAuctionTime(uint256 _startTime, uint256 _endTime) external {\\n        require(hasAdminRole(msg.sender));\\n        require(_startTime < 10000000000, \\\"AnnexDutchAuction: enter an unix timestamp in seconds, not miliseconds\\\");\\n        require(_endTime < 10000000000, \\\"AnnexDutchAuction: enter an unix timestamp in seconds, not miliseconds\\\");\\n        require(_startTime >= block.timestamp, \\\"AnnexDutchAuction: start time is before current time\\\");\\n        require(_endTime > _startTime, \\\"AnnexDutchAuction: end time must be older than start time\\\");\\n        require(marketStatus.commitmentsTotal == 0, \\\"AnnexDutchAuction: auction cannot have already started\\\");\\n\\n        marketInfo.startTime = AnnexMath.to64(_startTime);\\n        marketInfo.endTime = AnnexMath.to64(_endTime);\\n        \\n        emit AuctionTimeUpdated(_startTime,_endTime);\\n    }\\n\\n    /**\\n     * @notice Admin can set start and min price through this function.\\n     * @param _startPrice Auction start price.\\n     * @param _minimumPrice Auction minimum price.\\n     */\\n    function setAuctionPrice(uint256 _startPrice, uint256 _minimumPrice) external {\\n        require(hasAdminRole(msg.sender));\\n        require(_startPrice > _minimumPrice, \\\"AnnexDutchAuction: start price must be higher than minimum price\\\");\\n        require(_minimumPrice > 0, \\\"AnnexDutchAuction: minimum price must be greater than 0\\\"); \\n        require(marketStatus.commitmentsTotal == 0, \\\"AnnexDutchAuction: auction cannot have already started\\\");\\n\\n        marketPrice.startPrice = AnnexMath.to128(_startPrice);\\n        marketPrice.minimumPrice = AnnexMath.to128(_minimumPrice);\\n        emit AuctionPriceUpdated(_startPrice,_minimumPrice);\\n    }\\n\\n    /**\\n     * @notice Admin can set the auction wallet through this function.\\n     * @param _wallet Auction wallet is where funds will be sent.\\n     */\\n    function setAuctionWallet(address payable _wallet) external {\\n        require(hasAdminRole(msg.sender));\\n        require(_wallet != address(0), \\\"AnnexDutchAuction: wallet is the zero address\\\");\\n\\n        wallet = _wallet;\\n\\n        emit AuctionWalletUpdated(_wallet);\\n    }\\n\\n\\n   //--------------------------------------------------------\\n    // Market Launchers\\n    //--------------------------------------------------------\\n\\n    /**\\n     * @notice Decodes and hands auction data to the initAuction function.\\n     * @param _data Encoded data for initialization.\\n     */\\n\\n    function init(bytes calldata _data) external override payable {\\n\\n    }\\n\\n    function initMarket(\\n        bytes calldata _data\\n    ) public override {\\n        (\\n        address _funder,\\n        address _token,\\n        uint256 _totalTokens,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        address _paymentCurrency,\\n        uint256 _startPrice,\\n        uint256 _minimumPrice,\\n        address _admin,\\n        address _pointList,\\n        address payable _wallet\\n        ) = abi.decode(_data, (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint256,\\n            uint256,\\n            address,\\n            address,\\n            address\\n        ));\\n        initAuction(_funder, _token, _totalTokens, _startTime, _endTime, _paymentCurrency, _startPrice, _minimumPrice, _admin, _pointList, _wallet);\\n    }\\n\\n    /**\\n     * @notice Collects data to initialize the auction and encodes them.\\n     * @param _funder The address that funds the token for crowdsale.\\n     * @param _token Address of the token being sold.\\n     * @param _totalTokens The total number of tokens to sell in auction.\\n     * @param _startTime Auction start time.\\n     * @param _endTime Auction end time.\\n     * @param _paymentCurrency The currency the crowdsale accepts for payment. Can be ETH or token address.\\n     * @param _startPrice Starting price of the auction.\\n     * @param _minimumPrice The minimum auction price.\\n     * @param _admin Address that can finalize auction.\\n     * @param _pointList Address that will manage auction approvals.\\n     * @param _wallet Address where collected funds will be forwarded to.\\n     * @return _data All the data in bytes format.\\n     */\\n    function getAuctionInitData(\\n        address _funder,\\n        address _token,\\n        uint256 _totalTokens,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        address _paymentCurrency,\\n        uint256 _startPrice,\\n        uint256 _minimumPrice,\\n        address _admin,\\n        address _pointList,\\n        address payable _wallet\\n    )\\n        external \\n        pure\\n        returns (bytes memory _data)\\n    {\\n            return abi.encode(\\n                _funder,\\n                _token,\\n                _totalTokens,\\n                _startTime,\\n                _endTime,\\n                _paymentCurrency,\\n                _startPrice,\\n                _minimumPrice,\\n                _admin,\\n                _pointList,\\n                _wallet\\n            );\\n    }\\n        \\n    function getBaseInformation() external view returns(\\n        address, \\n        uint64,\\n        uint64,\\n        bool \\n    ) {\\n        return (auctionToken, marketInfo.startTime, marketInfo.endTime, marketStatus.finalized);\\n    }\\n\\n    function getTotalTokens() external view returns(uint256) {\\n        return uint256(marketInfo.totalTokens);\\n    }\\n\\n}\"\n    },\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IAnnexMarket.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ninterface IAnnexMarket {\\n\\n    function init(bytes calldata data) external payable;\\n    function initMarket( bytes calldata data ) external;\\n    function marketTemplate() external view returns (uint256);\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/IPointList.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\n// ----------------------------------------------------------------------------\\n// White List interface\\n// ----------------------------------------------------------------------------\\n\\ninterface IPointList {\\n    function isInList(address account) external view returns (bool);\\n    function hasPoints(address account, uint256 amount) external view  returns (bool);\\n    function setPoints(\\n        address[] memory accounts,\\n        uint256[] memory amounts\\n    ) external; \\n    function initPointList(address accessControl) external ;\\n\\n}\"\n    },\n    \"contracts/libraries/AnnexERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary AnnexERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"AnnexERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"AnnexERC20: TransferFrom failed\\\");\\n    }\\n}\"\n    },\n    \"contracts/Utils/AnnexBatchable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable no-inline-assembly\\n\\n\\ncontract BaseAnnexBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract AnnexBatchable is BaseAnnexBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\"\n    },\n    \"contracts/libraries/AnnexMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary AnnexMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"AnnexMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"AnnexMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"AnnexMath: Mul Overflow\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b > 0, \\\"AnnexMath: Div zero\\\");\\n        c = a / b;\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"AnnexMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"AnnexMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"AnnexMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n\\n    function to16(uint256 a) internal pure returns (uint16 c) {\\n        require(a <= uint16(-1), \\\"AnnexMath: uint16 Overflow\\\");\\n        c = uint16(a);\\n    }\\n\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary AnnexMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"AnnexMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"AnnexMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary AnnexMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"AnnexMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"AnnexMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary AnnexMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"AnnexMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"AnnexMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary AnnexMath16 {\\n    function add(uint16 a, uint16 b) internal pure returns (uint16 c) {\\n        require((c = a + b) >= b, \\\"AnnexMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint16 a, uint16 b) internal pure returns (uint16 c) {\\n        require((c = a - b) <= a, \\\"AnnexMath: Underflow\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/Utils/SafeTransfer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ncontract SafeTransfer {\\n\\n    address private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Helper function to handle both ETH and ERC20 payments\\n    function _safeTokenPayment(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == ETH_ADDRESS) {\\n            _safeTransferETH(_to,_amount );\\n        } else {\\n            _safeTransfer(_token, _to, _amount);\\n        }\\n    }\\n\\n\\n    /// @dev Helper function to handle both ETH and ERC20 payments\\n    function _tokenPayment(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == ETH_ADDRESS) {\\n            _to.transfer(_amount);\\n        } else {\\n            _safeTransfer(_token, _to, _amount);\\n        }\\n    }\\n\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function _safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) =\\n            token.call(\\n                // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n                abi.encodeWithSelector(0xa9059cbb, to, amount)\\n            );\\n        require(success && (data.length == 0 || abi.decode(data, (bool)))); // ERC20 Transfer failed\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) internal virtual {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) =\\n            token.call(\\n                // 0x23b872dd = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"))\\n                abi.encodeWithSelector(0x23b872dd, from, address(this), amount)\\n            );\\n        require(success && (data.length == 0 || abi.decode(data, (bool)))); // ERC20 TransferFrom failed\\n    }\\n\\n    function _safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function _safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/Utils/Documents.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Standard implementation of ERC1643 Document management\\n */\\ncontract Documents {\\n\\n    struct Document {\\n        uint32 docIndex;    // Store the document name indexes\\n        uint64 lastModified; // Timestamp at which document details was last modified\\n        string data; // data of the document that exist off-chain\\n    }\\n\\n    // mapping to store the documents details in the document\\n    mapping(string => Document) internal _documents;\\n    // mapping to store the document name indexes\\n    mapping(string => uint32) internal _docIndexes;\\n    // Array use to store all the document name present in the contracts\\n    string[] private _docNames;\\n\\n    // Document Events\\n    event DocumentRemoved(string indexed _name, string _data);\\n    event DocumentUpdated(string indexed _name, string _data);\\n\\n    /**\\n     * @notice Used to attach a new document to the contract, or update the data or hash of an existing attached document\\n     * @dev Can only be executed by the owner of the contract.\\n     * @param _name Name of the document. It should be unique always\\n     * @param _data Off-chain data of the document from where it is accessible to investors/advisors to read.\\n     */\\n    function _setDocument(string calldata _name, string calldata _data) internal {\\n        require(bytes(_name).length > 0, \\\"Zero name is not allowed\\\");\\n        require(bytes(_data).length > 0, \\\"Should not be a empty data\\\");\\n        // Document storage document = _documents[_name];\\n        if (_documents[_name].lastModified == uint64(0)) {\\n            _docNames.push(_name);\\n            _documents[_name].docIndex = uint32(_docNames.length);\\n        }\\n        _documents[_name] = Document(_documents[_name].docIndex, uint64(block.timestamp), _data);\\n        emit DocumentUpdated(_name, _data);\\n    }\\n\\n    /**\\n     * @notice Used to remove an existing document from the contract by giving the name of the document.\\n     * @dev Can only be executed by the owner of the contract.\\n     * @param _name Name of the document. It should be unique always\\n     */\\n\\n    function _removeDocument(string calldata _name) internal {\\n        require(_documents[_name].lastModified != uint64(0), \\\"Document should exist\\\");\\n        uint32 index = _documents[_name].docIndex - 1;\\n        if (index != _docNames.length - 1) {\\n            _docNames[index] = _docNames[_docNames.length - 1];\\n            _documents[_docNames[index]].docIndex = index + 1; \\n        }\\n        _docNames.pop();\\n        emit DocumentRemoved(_name, _documents[_name].data);\\n        delete _documents[_name];\\n    }\\n\\n    /**\\n     * @notice Used to return the details of a document with a known name (`string`).\\n     * @param _name Name of the document\\n     * @return string The data associated with the document.\\n     * @return uint256 the timestamp at which the document was last modified.\\n     */\\n    function getDocument(string calldata _name) external view returns (string memory, uint256) {\\n        return (\\n            _documents[_name].data,\\n            uint256(_documents[_name].lastModified)\\n        );\\n    }\\n\\n    /**\\n     * @notice Used to retrieve a full list of documents attached to the smart contract.\\n     * @return string List of all documents names present in the contract.\\n     */\\n    function getAllDocuments() external view returns (string[] memory) {\\n        return _docNames;\\n    }\\n\\n    /**\\n     * @notice Used to retrieve the total documents in the smart contract.\\n     * @return uint256 Count of the document names present in the contract.\\n     */\\n    function getDocumentCount() external view returns (uint256) {\\n        return _docNames.length;\\n    }\\n\\n    /**\\n     * @notice Used to retrieve the document name from index in the smart contract.\\n     * @return string Name of the document name.\\n     */\\n    function getDocumentName(uint256 _index) external view returns (string memory) {\\n        require(_index < _docNames.length, \\\"Index out of bounds\\\");\\n        return _docNames[_index];\\n    }\\n\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/IterableOrderedOrderSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary IterableOrderedOrderSet {\\n    using SafeMath for uint96;\\n    using IterableOrderedOrderSet for bytes32;\\n\\n    // represents smallest possible value for an order under comparison of fn smallerThan()\\n    bytes32 internal constant QUEUE_START =\\n        0x0000000000000000000000000000000000000000000000000000000000000001;\\n    // represents highest possible value for an order under comparison of fn smallerThan()\\n    bytes32 internal constant QUEUE_END =\\n        0xffffffffffffffffffffffffffffffffffffffff000000000000000000000001;\\n\\n    /// The struct is used to implement a modified version of a doubly linked\\n    /// list with sorted elements. The list starts from QUEUE_START to\\n    /// QUEUE_END, and each node keeps track of its predecessor and successor.\\n    /// Nodes can be added or removed.\\n    ///\\n    /// `next` and `prev` have a different role. The list is supposed to be\\n    /// traversed with `next`. If `next` is empty, the node is not part of the\\n    /// list. However, `prev` might be set for elements that are not in the\\n    /// list, which is why it should not be used for traversing. Having a `prev`\\n    /// set for elements not in the list is used to keep track of the history of\\n    /// the position in the list of a removed element.\\n    struct Data {\\n        mapping(bytes32 => bytes32) nextMap;\\n        mapping(bytes32 => bytes32) prevMap;\\n    }\\n\\n    struct Order {\\n        uint64 owner;\\n        uint96 buyAmount;\\n        uint96 sellAmount;\\n    }\\n\\n    function initializeEmptyList(Data storage self) internal {\\n        self.nextMap[QUEUE_START] = QUEUE_END;\\n        self.prevMap[QUEUE_END] = QUEUE_START;\\n    }\\n\\n    function isEmpty(Data storage self) internal view returns (bool) {\\n        return self.nextMap[QUEUE_START] == QUEUE_END;\\n    }\\n\\n    function insert(\\n        Data storage self,\\n        bytes32 elementToInsert,\\n        bytes32 elementBeforeNewOne\\n    ) internal returns (bool) {\\n        (, , uint96 denominator) = decodeOrder(elementToInsert);\\n        require(denominator != uint96(0), \\\"Inserting zero is not supported\\\");\\n        require(\\n            elementToInsert != QUEUE_START && elementToInsert != QUEUE_END,\\n            \\\"Inserting element is not valid\\\"\\n        );\\n        if (contains(self, elementToInsert)) {\\n            return false;\\n        }\\n        if (\\n            elementBeforeNewOne != QUEUE_START &&\\n            self.prevMap[elementBeforeNewOne] == bytes32(0)\\n        ) {\\n            return false;\\n        }\\n        if (!elementBeforeNewOne.smallerThan(elementToInsert)) {\\n            return false;\\n        }\\n\\n        // `elementBeforeNewOne` might have been removed during the time it\\n        // took to the transaction calling this function to be mined, so\\n        // the new order cannot be appended directly to this. We follow the\\n        // history of previous links backwards until we find an element in\\n        // the list from which to start our search.\\n        // Note that following the link backwards returns elements that are\\n        // before `elementBeforeNewOne` in sorted order.\\n        while (self.nextMap[elementBeforeNewOne] == bytes32(0)) {\\n            elementBeforeNewOne = self.prevMap[elementBeforeNewOne];\\n        }\\n\\n        // `elementBeforeNewOne` belongs now to the linked list. We search the\\n        // largest entry that is smaller than the element to insert.\\n        bytes32 previous;\\n        bytes32 current = elementBeforeNewOne;\\n        do {\\n            previous = current;\\n            current = self.nextMap[current];\\n        } while (current.smallerThan(elementToInsert));\\n        // Note: previous < elementToInsert < current\\n        self.nextMap[previous] = elementToInsert;\\n        self.prevMap[current] = elementToInsert;\\n        self.prevMap[elementToInsert] = previous;\\n        self.nextMap[elementToInsert] = current;\\n\\n        return true;\\n    }\\n\\n    /// The element is removed from the linked list, but the node retains\\n    /// information on which predecessor it had, so that a node in the chain\\n    /// can be reached by following the predecessor chain of deleted elements.\\n    function removeKeepHistory(Data storage self, bytes32 elementToRemove)\\n        internal\\n        returns (bool)\\n    {\\n        if (!contains(self, elementToRemove)) {\\n            return false;\\n        }\\n        bytes32 previousElement = self.prevMap[elementToRemove];\\n        bytes32 nextElement = self.nextMap[elementToRemove];\\n        self.nextMap[previousElement] = nextElement;\\n        self.prevMap[nextElement] = previousElement;\\n        self.nextMap[elementToRemove] = bytes32(0);\\n        return true;\\n    }\\n\\n    /// Remove an element from the chain, clearing all related storage.\\n    /// Note that no elements should be inserted using as a reference point a\\n    /// node deleted after calling `remove`, since an element in the `prev`\\n    /// chain might be missing.\\n    function remove(Data storage self, bytes32 elementToRemove)\\n        internal\\n        returns (bool)\\n    {\\n        bool result = removeKeepHistory(self, elementToRemove);\\n        if (result) {\\n            self.prevMap[elementToRemove] = bytes32(0);\\n        }\\n        return result;\\n    }\\n\\n    function contains(Data storage self, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (value == QUEUE_START) {\\n            return false;\\n        }\\n        // Note: QUEUE_END is not contained in the list since it has no\\n        // successor.\\n        return self.nextMap[value] != bytes32(0);\\n    }\\n\\n    // @dev orders are ordered by\\n    // 1. their price - buyAmount/sellAmount\\n    // 2. by the sellAmount\\n    // 3. their userId,\\n    function smallerThan(bytes32 orderLeft, bytes32 orderRight)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        (\\n            uint64 userIdLeft,\\n            uint96 priceNumeratorLeft,\\n            uint96 priceDenominatorLeft\\n        ) = decodeOrder(orderLeft);\\n        (\\n            uint64 userIdRight,\\n            uint96 priceNumeratorRight,\\n            uint96 priceDenominatorRight\\n        ) = decodeOrder(orderRight);\\n\\n        if (\\n            priceNumeratorLeft.mul(priceDenominatorRight) <\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\n        ) return true;\\n        if (\\n            priceNumeratorLeft.mul(priceDenominatorRight) >\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\n        ) return false;\\n\\n        if (priceNumeratorLeft < priceNumeratorRight) return true;\\n        if (priceNumeratorLeft > priceNumeratorRight) return false;\\n        require(\\n            userIdLeft != userIdRight,\\n            \\\"user is not allowed to place same order twice\\\"\\n        );\\n        if (userIdLeft < userIdRight) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function first(Data storage self) internal view returns (bytes32) {\\n        require(!isEmpty(self), \\\"Trying to get first from empty set\\\");\\n        return self.nextMap[QUEUE_START];\\n    }\\n\\n    function next(Data storage self, bytes32 value)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        require(value != QUEUE_END, \\\"Trying to get next of last element\\\");\\n        bytes32 nextElement = self.nextMap[value];\\n        require(\\n            nextElement != bytes32(0),\\n            \\\"Trying to get next of non-existent element\\\"\\n        );\\n        return nextElement;\\n    }\\n\\n    function decodeOrder(bytes32 _orderData)\\n        internal\\n        pure\\n        returns (\\n            uint64 userId,\\n            uint96 buyAmount,\\n            uint96 sellAmount\\n        )\\n    {\\n        // Note: converting to uint discards the binary digits that do not fit\\n        // the type.\\n        userId = uint64(uint256(_orderData) >> 192);\\n        buyAmount = uint96(uint256(_orderData) >> 96);\\n        sellAmount = uint96(uint256(_orderData));\\n    }\\n\\n    function encodeOrder(\\n        uint64 userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(\\n                (uint256(userId) << 192) +\\n                    (uint256(buyAmount) << 96) +\\n                    uint256(sellAmount)\\n            );\\n    }\\n}\\n\"\n    },\n    \"contracts/test/IterableOrderedOrderSetWrapper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-newer\\npragma solidity ^0.6.0;\\nimport \\\"../libraries/IterableOrderedOrderSet.sol\\\";\\n\\ncontract IterableOrderedOrderSetWrapper {\\n    using IterableOrderedOrderSet for IterableOrderedOrderSet.Data;\\n\\n    IterableOrderedOrderSet.Data internal data;\\n\\n    function initializeEmptyList() public {\\n        data.initializeEmptyList();\\n    }\\n\\n    function insert(bytes32 value) public returns (bool) {\\n        return data.insert(value, IterableOrderedOrderSet.QUEUE_START);\\n    }\\n\\n    function insertAt(bytes32 value, bytes32 at) public returns (bool) {\\n        return data.insert(value, at);\\n    }\\n\\n    function remove(bytes32 value) public returns (bool) {\\n        return data.remove(value);\\n    }\\n\\n    function removeKeepHistory(bytes32 value) public returns (bool) {\\n        return data.removeKeepHistory(value);\\n    }\\n\\n    function contains(bytes32 value) public view returns (bool) {\\n        return data.contains(value);\\n    }\\n\\n    function isEmpty() public view returns (bool) {\\n        return data.isEmpty();\\n    }\\n\\n    function first() public view returns (bytes32) {\\n        return data.first();\\n    }\\n\\n    function next(bytes32 value) public view returns (bytes32) {\\n        return data.next(value);\\n    }\\n\\n    function nextMap(bytes32 value) public view returns (bytes32) {\\n        return data.nextMap[value];\\n    }\\n\\n    function prevMap(bytes32 value) public view returns (bytes32) {\\n        return data.prevMap[value];\\n    }\\n\\n    function decodeOrder(bytes32 value)\\n        public\\n        pure\\n        returns (\\n            uint64,\\n            uint96,\\n            uint96\\n        )\\n    {\\n        return IterableOrderedOrderSet.decodeOrder(value);\\n    }\\n\\n    function encodeOrder(\\n        uint64 userId,\\n        uint96 sellAmount,\\n        uint96 buyAmount\\n    ) public pure returns (bytes32) {\\n        return\\n            IterableOrderedOrderSet.encodeOrder(userId, sellAmount, buyAmount);\\n    }\\n\\n    function smallerThan(bytes32 orderLeft, bytes32 orderRight)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        return IterableOrderedOrderSet.smallerThan(orderLeft, orderRight);\\n    }\\n}\\n\"\n    },\n    \"contracts/AnnexBatchAuction.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./libraries/IterableOrderedOrderSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"./interfaces/AllowListVerifier.sol\\\";\\nimport \\\"./libraries/IdToAddressBiMap.sol\\\";\\nimport \\\"./libraries/SafeCast.sol\\\";\\n\\ncontract AnnexBatchAuction is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint64;\\n    using SafeMath for uint96;\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using IterableOrderedOrderSet for IterableOrderedOrderSet.Data;\\n    using IterableOrderedOrderSet for bytes32;\\n    using IdToAddressBiMap for IdToAddressBiMap.Data;\\n\\n    modifier atStageOrderPlacement(uint256 auctionId) {\\n        require(\\n            block.timestamp < auctionData[auctionId].auctionEndDate,\\n            \\\"no longer in order placement phase\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier atStageOrderPlacementAndCancelation(uint256 auctionId) {\\n        require(\\n            block.timestamp < auctionData[auctionId].orderCancellationEndDate,\\n            \\\"no longer in order placement and cancelation phase\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier atStageSolutionSubmission(uint256 auctionId) {\\n        {\\n            uint256 auctionEndDate = auctionData[auctionId].auctionEndDate;\\n            require(\\n                auctionEndDate != 0 &&\\n                    block.timestamp >= auctionEndDate &&\\n                    auctionData[auctionId].clearingPriceOrder == bytes32(0),\\n                \\\"Auction not in solution submission phase\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier atStageFinished(uint256 auctionId) {\\n        require(\\n            auctionData[auctionId].clearingPriceOrder != bytes32(0),\\n            \\\"Auction not yet finished\\\"\\n        );\\n        _;\\n    }\\n\\n    event NewSellOrder(\\n        uint256 indexed auctionId,\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    );\\n    event CancellationSellOrder(\\n        uint256 indexed auctionId,\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    );\\n    event ClaimedFromOrder(\\n        uint256 indexed auctionId,\\n        uint64 indexed userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    );\\n    event NewUser(uint64 indexed userId, address indexed userAddress);\\n    event NewAuction(\\n        uint256 indexed auctionId,\\n        IERC20 indexed _auctioningToken,\\n        IERC20 indexed _biddingToken,\\n        uint256 orderCancellationEndDate,\\n        uint256 auctionEndDate,\\n        uint64 userId,\\n        uint96 _auctionedSellAmount,\\n        uint96 _minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold,\\n        address allowListContract,\\n        bytes allowListData\\n    );\\n    event AuctionCleared(\\n        uint256 indexed auctionId,\\n        uint96 soldAuctioningTokens,\\n        uint96 soldBiddingTokens,\\n        bytes32 clearingPriceOrder\\n    );\\n    event UserRegistration(address indexed user, uint64 userId);\\n\\n    /**\\n    @param {auctioningToken}\\n    **/\\n    struct AuctionData {\\n        IERC20 auctioningToken;\\n        IERC20 biddingToken;\\n        uint256 orderCancellationEndDate;\\n        uint256 auctionEndDate;\\n        bytes32 initialAuctionOrder;\\n        uint256 minimumBiddingAmountPerOrder;\\n        uint256 interimSumBidAmount;\\n        bytes32 interimOrder;\\n        bytes32 clearingPriceOrder;\\n        uint96 volumeClearingPriceOrder;\\n        bool minFundingThresholdNotReached;\\n        bool isAtomicClosureAllowed;\\n        uint256 feeNumerator;\\n        uint256 minFundingThreshold;\\n    }\\n    mapping(uint256 => IterableOrderedOrderSet.Data) internal sellOrders; // Store total number of sell orders\\n    mapping(uint256 => AuctionData) public auctionData; // Store auctions details\\n    mapping(uint256 => address) public auctionAccessManager;\\n    mapping(uint256 => bytes) public auctionAccessData;\\n\\n    IdToAddressBiMap.Data private registeredUsers;\\n    uint64 public numUsers; // counter of users\\n    uint256 public auctionCounter; // counter for auctions\\n\\n    constructor() public Ownable() {}\\n\\n    uint256 public feeNumerator = 0;\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n    uint64 public feeReceiverUserId = 1;\\n\\n    function setFeeParameters(\\n        uint256 newFeeNumerator,\\n        address newfeeReceiverAddress\\n    ) public onlyOwner() {\\n        require(\\n            newFeeNumerator <= 15,\\n            \\\"Fee is not allowed to be set higher than 1.5%\\\"\\n        );\\n        // caution: for currently running auctions, the feeReceiverUserId is changing as well.\\n        feeReceiverUserId = getUserId(newfeeReceiverAddress);\\n        feeNumerator = newFeeNumerator;\\n    }\\n\\n    // @dev: function to intiate a new auction\\n    // Warning: In case the auction is expected to raise more than\\n    // 2^96 units of the biddingToken, don't start the auction, as\\n    // it will not be settlable. This corresponds to about 79\\n    // billion DAI.\\n    //\\n    // Prices between biddingToken and auctioningToken are expressed by a\\n    // fraction whose components are stored as uint96.\\n    // Amount transfered out is no larger than amount transfered in\\n    function initiateAuction(\\n        IERC20 _auctioningToken,\\n        IERC20 _biddingToken,\\n        uint256 orderCancellationEndDate,\\n        uint256 auctionEndDate,\\n        uint96 _auctionedSellAmount,\\n        uint96 _minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold,\\n        bool isAtomicClosureAllowed,\\n        address accessManagerContract,\\n        bytes memory accessManagerContractData\\n    ) public returns (uint256) {\\n        /* \\n        ( _auctionedSellAmount * ( 1000 + feeNumerator ) ) / 1000\\n        // withdraws sellAmount + fees\\n        // i.e: autionTokens = 1000\\n        // fees = 1%\\n        then 1010 will be added to the contract\\n        */\\n        _auctioningToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _auctionedSellAmount.mul(FEE_DENOMINATOR.add(feeNumerator)).div(\\n                FEE_DENOMINATOR\\n            ) //[0]\\n        );\\n        require(_auctionedSellAmount > 0, \\\"cannot auction zero tokens\\\");\\n        require(_minBuyAmount > 0, \\\"tokens cannot be auctioned for free\\\");\\n        require(\\n            minimumBiddingAmountPerOrder > 0,\\n            \\\"minimumBiddingAmountPerOrder is not allowed to be zero\\\"\\n        );\\n        require(\\n            orderCancellationEndDate <= auctionEndDate,\\n            \\\"time periods are not configured correctly\\\"\\n        );\\n        require(\\n            auctionEndDate > block.timestamp,\\n            \\\"auction end date must be in the future\\\"\\n        );\\n        auctionCounter = auctionCounter.add(1);\\n        sellOrders[auctionCounter].initializeEmptyList();\\n        uint64 userId = getUserId(msg.sender);\\n        auctionData[auctionCounter] = AuctionData(\\n            _auctioningToken,\\n            _biddingToken,\\n            orderCancellationEndDate,\\n            auctionEndDate,\\n            IterableOrderedOrderSet.encodeOrder(\\n                userId,\\n                _minBuyAmount,\\n                _auctionedSellAmount\\n            ),\\n            minimumBiddingAmountPerOrder,\\n            0,\\n            IterableOrderedOrderSet.QUEUE_START,\\n            bytes32(0),\\n            0,\\n            false,\\n            isAtomicClosureAllowed,\\n            feeNumerator,\\n            minFundingThreshold\\n        );\\n        auctionAccessManager[auctionCounter] = accessManagerContract;\\n        auctionAccessData[auctionCounter] = accessManagerContractData;\\n        emit NewAuction(\\n            auctionCounter,\\n            _auctioningToken,\\n            _biddingToken,\\n            orderCancellationEndDate,\\n            auctionEndDate,\\n            userId,\\n            _auctionedSellAmount,\\n            _minBuyAmount,\\n            minimumBiddingAmountPerOrder,\\n            minFundingThreshold,\\n            accessManagerContract,\\n            accessManagerContractData\\n        );\\n        return auctionCounter;\\n    }\\n\\n    function placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        bytes calldata allowListCallData\\n    ) external atStageOrderPlacement(auctionId) returns (uint64 userId) {\\n        return\\n            _placeSellOrders(\\n                auctionId,\\n                _minBuyAmounts,\\n                _sellAmounts,\\n                _prevSellOrders,\\n                allowListCallData,\\n                msg.sender\\n            );\\n    }\\n\\n    function placeSellOrdersOnBehalf(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        bytes calldata allowListCallData,\\n        address orderSubmitter\\n    ) external atStageOrderPlacement(auctionId) returns (uint64 userId) {\\n        return\\n            _placeSellOrders(\\n                auctionId,\\n                _minBuyAmounts,\\n                _sellAmounts,\\n                _prevSellOrders,\\n                allowListCallData,\\n                orderSubmitter\\n            );\\n    }\\n\\n    function _placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        bytes calldata allowListCallData,\\n        address orderSubmitter\\n    ) internal returns (uint64 userId) {\\n        {\\n            address allowListManager = auctionAccessManager[auctionId];\\n            if (allowListManager != address(0)) {\\n                require(\\n                    AllowListVerifier(allowListManager).isAllowed(\\n                        orderSubmitter,\\n                        auctionId,\\n                        allowListCallData\\n                    ) == AllowListVerifierHelper.MAGICVALUE,\\n                    \\\"user not allowed to place order\\\"\\n                );\\n            }\\n        }\\n        {\\n            (\\n                ,\\n                uint96 buyAmountOfInitialAuctionOrder,\\n                uint96 sellAmountOfInitialAuctionOrder\\n            ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\\n            for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\\n                require(\\n                    _minBuyAmounts[i].mul(buyAmountOfInitialAuctionOrder) <\\n                        sellAmountOfInitialAuctionOrder.mul(_sellAmounts[i]),\\n                    \\\"limit price not better than mimimal offer\\\"\\n                );\\n            }\\n        }\\n        uint256 sumOfSellAmounts = 0;\\n        userId = getUserId(orderSubmitter);\\n        uint256 minimumBiddingAmountPerOrder = auctionData[auctionId]\\n        .minimumBiddingAmountPerOrder;\\n        for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\\n            require(\\n                _minBuyAmounts[i] > 0,\\n                \\\"_minBuyAmounts must be greater than 0\\\"\\n            );\\n            // orders should have a minimum bid size in order to limit the gas\\n            // required to compute the final price of the auction.\\n            require(\\n                _sellAmounts[i] > minimumBiddingAmountPerOrder,\\n                \\\"order too small\\\"\\n            );\\n            if (\\n                sellOrders[auctionId].insert(\\n                    IterableOrderedOrderSet.encodeOrder(\\n                        userId,\\n                        _minBuyAmounts[i],\\n                        _sellAmounts[i]\\n                    ),\\n                    _prevSellOrders[i]\\n                )\\n            ) {\\n                sumOfSellAmounts = sumOfSellAmounts.add(_sellAmounts[i]);\\n                emit NewSellOrder(\\n                    auctionId,\\n                    userId,\\n                    _minBuyAmounts[i],\\n                    _sellAmounts[i]\\n                );\\n            }\\n        }\\n        auctionData[auctionId].biddingToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            sumOfSellAmounts\\n        ); //[1]\\n    }\\n\\n    function cancelSellOrders(uint256 auctionId, bytes32[] memory _sellOrders)\\n        public\\n        atStageOrderPlacementAndCancelation(auctionId)\\n    {\\n        uint64 userId = getUserId(msg.sender);\\n        uint256 claimableAmount = 0;\\n        for (uint256 i = 0; i < _sellOrders.length; i++) {\\n            // Note: we keep the back pointer of the deleted element so that\\n            // it can be used as a reference point to insert a new node.\\n            bool success = sellOrders[auctionId].removeKeepHistory(\\n                _sellOrders[i]\\n            );\\n            if (success) {\\n                (\\n                    uint64 userIdOfIter,\\n                    uint96 buyAmountOfIter,\\n                    uint96 sellAmountOfIter\\n                ) = _sellOrders[i].decodeOrder();\\n                require(\\n                    userIdOfIter == userId,\\n                    \\\"Only the user can cancel his orders\\\"\\n                );\\n                claimableAmount = claimableAmount.add(sellAmountOfIter);\\n                emit CancellationSellOrder(\\n                    auctionId,\\n                    userId,\\n                    buyAmountOfIter,\\n                    sellAmountOfIter\\n                );\\n            }\\n        }\\n        auctionData[auctionId].biddingToken.safeTransfer(\\n            msg.sender,\\n            claimableAmount\\n        ); //[2]\\n    }\\n\\n    // By calling this function you can pre calculate(before auction ending) sum of total\\n    // total token sold.This function will calculate sum by taking offsent of orders linked list.\\n    function precalculateSellAmountSum(\\n        uint256 auctionId,\\n        uint256 iterationSteps\\n    ) public atStageSolutionSubmission(auctionId) {\\n        (, , uint96 auctioneerSellAmount) = auctionData[auctionId]\\n        .initialAuctionOrder\\n        .decodeOrder();\\n        uint256 sumBidAmount = auctionData[auctionId].interimSumBidAmount;\\n        bytes32 iterOrder = auctionData[auctionId].interimOrder;\\n\\n        for (uint256 i = 0; i < iterationSteps; i++) {\\n            iterOrder = sellOrders[auctionId].next(iterOrder);\\n            (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\\n            sumBidAmount = sumBidAmount.add(sellAmountOfIter);\\n        }\\n\\n        require(\\n            iterOrder != IterableOrderedOrderSet.QUEUE_END,\\n            \\\"reached end of order list\\\"\\n        );\\n\\n        // it is checked that not too many iteration steps were taken:\\n        // require that the sum of SellAmounts times the price of the last order\\n        // is not more than initially sold amount\\n        (, uint96 buyAmountOfIter, uint96 sellAmountOfIter) = iterOrder\\n        .decodeOrder();\\n        require(\\n            sumBidAmount.mul(buyAmountOfIter) <\\n                auctioneerSellAmount.mul(sellAmountOfIter),\\n            \\\"too many orders summed up\\\"\\n        );\\n\\n        auctionData[auctionId].interimSumBidAmount = sumBidAmount;\\n        auctionData[auctionId].interimOrder = iterOrder;\\n    }\\n\\n    function settleAuctionAtomically(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmount,\\n        uint96[] memory _sellAmount,\\n        bytes32[] memory _prevSellOrder,\\n        bytes calldata allowListCallData\\n    ) public atStageSolutionSubmission(auctionId) {\\n        require(\\n            auctionData[auctionId].isAtomicClosureAllowed,\\n            \\\"not allowed to settle auction atomically\\\"\\n        );\\n        require(\\n            _minBuyAmount.length == 1 && _sellAmount.length == 1,\\n            \\\"Only one order can be placed atomically\\\"\\n        );\\n        uint64 userId = getUserId(msg.sender);\\n        require(\\n            auctionData[auctionId].interimOrder.smallerThan(\\n                IterableOrderedOrderSet.encodeOrder(\\n                    userId,\\n                    _minBuyAmount[0],\\n                    _sellAmount[0]\\n                )\\n            ),\\n            \\\"precalculateSellAmountSum is already too advanced\\\"\\n        );\\n        _placeSellOrders(\\n            auctionId,\\n            _minBuyAmount,\\n            _sellAmount,\\n            _prevSellOrder,\\n            allowListCallData,\\n            msg.sender\\n        );\\n        settleAuction(auctionId);\\n    }\\n\\n    // @dev function settling the auction and calculating the price\\n    function settleAuction(uint256 auctionId)\\n        public\\n        atStageSolutionSubmission(auctionId)\\n        returns (bytes32 clearingOrder)\\n    {\\n        (\\n            uint64 auctioneerId,\\n            uint96 minAuctionedBuyAmount,\\n            uint96 fullAuctionedAmount\\n        ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\\n\\n        uint256 currentBidSum = auctionData[auctionId].interimSumBidAmount;\\n        bytes32 currentOrder = auctionData[auctionId].interimOrder;\\n        uint256 buyAmountOfIter;\\n        uint256 sellAmountOfIter;\\n        uint96 fillVolumeOfAuctioneerOrder = fullAuctionedAmount;\\n        // Sum order up, until fullAuctionedAmount is fully bought or queue end is reached\\n        do {\\n            bytes32 nextOrder = sellOrders[auctionId].next(currentOrder);\\n            if (nextOrder == IterableOrderedOrderSet.QUEUE_END) {\\n                break;\\n            }\\n            currentOrder = nextOrder;\\n            (, buyAmountOfIter, sellAmountOfIter) = currentOrder.decodeOrder();\\n            currentBidSum = currentBidSum.add(sellAmountOfIter);\\n        } while (\\n            currentBidSum.mul(buyAmountOfIter) <\\n                fullAuctionedAmount.mul(sellAmountOfIter)\\n        );\\n\\n        if (\\n            currentBidSum > 0 &&\\n            currentBidSum.mul(buyAmountOfIter) >=\\n            fullAuctionedAmount.mul(sellAmountOfIter)\\n        ) {\\n            // All considered/summed orders are sufficient to close the auction fully\\n            // at price between current and previous orders.\\n            uint256 uncoveredBids = currentBidSum.sub(\\n                fullAuctionedAmount.mul(sellAmountOfIter).div(buyAmountOfIter)\\n            );\\n\\n            if (sellAmountOfIter >= uncoveredBids) {\\n                //[13]\\n                // Auction fully filled via partial match of currentOrder\\n                uint256 sellAmountClearingOrder = sellAmountOfIter.sub(\\n                    uncoveredBids\\n                );\\n                auctionData[auctionId]\\n                .volumeClearingPriceOrder = sellAmountClearingOrder.toUint96();\\n                currentBidSum = currentBidSum.sub(uncoveredBids);\\n                clearingOrder = currentOrder;\\n            } else {\\n                //[14]\\n                // Auction fully filled via price strictly between currentOrder and the order\\n                // immediately before. For a proof, see the security-considerations.md\\n                currentBidSum = currentBidSum.sub(sellAmountOfIter);\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\n                    0,\\n                    fullAuctionedAmount,\\n                    currentBidSum.toUint96()\\n                );\\n            }\\n        } else {\\n            // All considered/summed orders are not sufficient to close the auction fully at price of last order //[18]\\n            // Either a higher price must be used or auction is only partially filled\\n\\n            if (currentBidSum > minAuctionedBuyAmount) {\\n                //[15]\\n                // Price higher than last order would fill the auction\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\n                    0,\\n                    fullAuctionedAmount,\\n                    currentBidSum.toUint96()\\n                );\\n            } else {\\n                //[16]\\n                // Even at the initial auction price, the auction is partially filled\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\n                    0,\\n                    fullAuctionedAmount,\\n                    minAuctionedBuyAmount\\n                );\\n                fillVolumeOfAuctioneerOrder = currentBidSum\\n                .mul(fullAuctionedAmount)\\n                .div(minAuctionedBuyAmount)\\n                .toUint96();\\n            }\\n        }\\n        auctionData[auctionId].clearingPriceOrder = clearingOrder;\\n\\n        if (auctionData[auctionId].minFundingThreshold > currentBidSum) {\\n            auctionData[auctionId].minFundingThresholdNotReached = true;\\n        }\\n        processFeesAndAuctioneerFunds(\\n            auctionId,\\n            fillVolumeOfAuctioneerOrder,\\n            auctioneerId,\\n            fullAuctionedAmount\\n        );\\n        emit AuctionCleared(\\n            auctionId,\\n            fillVolumeOfAuctioneerOrder,\\n            uint96(currentBidSum),\\n            clearingOrder\\n        );\\n        // Gas refunds\\n        auctionAccessManager[auctionId] = address(0);\\n        delete auctionAccessData[auctionId];\\n        auctionData[auctionId].initialAuctionOrder = bytes32(0);\\n        auctionData[auctionId].interimOrder = bytes32(0);\\n        auctionData[auctionId].interimSumBidAmount = uint256(0);\\n        auctionData[auctionId].minimumBiddingAmountPerOrder = uint256(0);\\n    }\\n\\n    /**\\n\\n    First we will remove the given orders from contract sell orders list.\\n    **/\\n    function claimFromParticipantOrder(\\n        uint256 auctionId,\\n        bytes32[] memory orders\\n    )\\n        public\\n        atStageFinished(auctionId)\\n        returns (\\n            uint256 sumAuctioningTokenAmount,\\n            uint256 sumBiddingTokenAmount\\n        )\\n    {\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            // Note: we don't need to keep any information about the node since\\n            // no new elements need to be inserted.\\n            require(\\n                sellOrders[auctionId].remove(orders[i]),\\n                \\\"order is no longer claimable\\\"\\n            );\\n        }\\n        AuctionData memory auction = auctionData[auctionId];\\n        (, uint96 priceNumerator, uint96 priceDenominator) = auction\\n        .clearingPriceOrder\\n        .decodeOrder();\\n\\n        (uint64 userId, , ) = orders[0].decodeOrder();\\n        bool minFundingThresholdNotReached = auctionData[auctionId]\\n        .minFundingThresholdNotReached;\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            (uint64 userIdOrder, uint96 buyAmount, uint96 sellAmount) = orders[\\n                i\\n            ]\\n            .decodeOrder();\\n            require(\\n                userIdOrder == userId,\\n                \\\"only allowed to claim for same user\\\"\\n            );\\n            if (minFundingThresholdNotReached) {\\n                //[10]\\n                sumBiddingTokenAmount = sumBiddingTokenAmount.add(sellAmount);\\n            } else {\\n                //[23]\\n                if (orders[i] == auction.clearingPriceOrder) {\\n                    //[25]\\n                    sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\\n                        auction\\n                        .volumeClearingPriceOrder\\n                        .mul(priceNumerator)\\n                        .div(priceDenominator)\\n                    );\\n                    sumBiddingTokenAmount = sumBiddingTokenAmount.add(\\n                        sellAmount.sub(auction.volumeClearingPriceOrder)\\n                    );\\n                } else {\\n                    if (orders[i].smallerThan(auction.clearingPriceOrder)) {\\n                        //[17]\\n                        sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\\n                            sellAmount.mul(priceNumerator).div(priceDenominator)\\n                        );\\n                    } else {\\n                        //[24]\\n                        sumBiddingTokenAmount = sumBiddingTokenAmount.add(\\n                            sellAmount\\n                        );\\n                    }\\n                }\\n            }\\n            emit ClaimedFromOrder(auctionId, userId, buyAmount, sellAmount);\\n        }\\n        sendOutTokens(\\n            auctionId,\\n            sumAuctioningTokenAmount,\\n            sumBiddingTokenAmount,\\n            userId\\n        ); //[3]\\n    }\\n\\n    function processFeesAndAuctioneerFunds(\\n        uint256 auctionId,\\n        uint256 fillVolumeOfAuctioneerOrder,\\n        uint64 auctioneerId,\\n        uint96 fullAuctionedAmount\\n    ) internal {\\n        uint256 feeAmount = fullAuctionedAmount\\n        .mul(auctionData[auctionId].feeNumerator)\\n        .div(FEE_DENOMINATOR); //[20]\\n        if (auctionData[auctionId].minFundingThresholdNotReached) {\\n            sendOutTokens(\\n                auctionId,\\n                fullAuctionedAmount.add(feeAmount),\\n                0,\\n                auctioneerId\\n            ); //[4]\\n        } else {\\n            //[11]\\n            (, uint96 priceNumerator, uint96 priceDenominator) = auctionData[\\n                auctionId\\n            ]\\n            .clearingPriceOrder\\n            .decodeOrder();\\n            // unsettledAuctionTokens = fullAuctionedAmount - fillVolumeOfAuctioneerOrder\\n            uint256 unsettledAuctionTokens = fullAuctionedAmount.sub(\\n                fillVolumeOfAuctioneerOrder\\n            );\\n            // auctioningTokenAmount = unsettledAuctionTokens + ( ( feeAmount * unsettledAuctionTokens ) / fullAuctionedAmount)\\n            uint256 auctioningTokenAmount = unsettledAuctionTokens.add(\\n                feeAmount.mul(unsettledAuctionTokens).div(fullAuctionedAmount)\\n            );\\n            // biddingTokenAmount = (fillVolumeOfAuctioneerOrder * priceDenominator) / priceNumerator\\n            uint256 biddingTokenAmount = fillVolumeOfAuctioneerOrder\\n            .mul(priceDenominator)\\n            .div(priceNumerator);\\n            sendOutTokens(\\n                auctionId,\\n                auctioningTokenAmount,\\n                biddingTokenAmount,\\n                auctioneerId\\n            ); //[5]\\n            sendOutTokens(\\n                auctionId,\\n                // (feeAmount * fillVolumeOfAuctioneerOrder) / fullAuctionedAmount\\n                feeAmount.mul(fillVolumeOfAuctioneerOrder).div(\\n                    fullAuctionedAmount\\n                ),\\n                0,\\n                feeReceiverUserId\\n            ); //[7]\\n        }\\n    }\\n\\n    /* send back either auctioning or bidding tokens to the given user.\\n    Transfers out occur on:\\n    1- order cancellation,giving back the amount bid by the user in an order.\\n    2- users claiming funds after the auction is concluded \\n    3- auction closing and sending\\n        1-funds to the auctioneer\\n        2-fees to the dedicated address\\n    */\\n    function sendOutTokens(\\n        uint256 auctionId,\\n        uint256 auctioningTokenAmount,\\n        uint256 biddingTokenAmount,\\n        uint64 userId\\n    ) internal {\\n        address userAddress = registeredUsers.getAddressAt(userId);\\n        if (auctioningTokenAmount > 0) {\\n            auctionData[auctionId].auctioningToken.safeTransfer(\\n                userAddress,\\n                auctioningTokenAmount\\n            );\\n        }\\n        if (biddingTokenAmount > 0) {\\n            auctionData[auctionId].biddingToken.safeTransfer(\\n                userAddress,\\n                biddingTokenAmount\\n            );\\n        }\\n    }\\n\\n    function registerUser(address user) public returns (uint64 userId) {\\n        numUsers = numUsers.add(1).toUint64();\\n        require(\\n            registeredUsers.insert(numUsers, user),\\n            \\\"User already registered\\\"\\n        );\\n        userId = numUsers;\\n        emit UserRegistration(user, userId);\\n    }\\n\\n    function getUserId(address user) public returns (uint64 userId) {\\n        if (registeredUsers.hasAddress(user)) {\\n            userId = registeredUsers.getId(user);\\n        } else {\\n            userId = registerUser(user);\\n            emit NewUser(userId, user);\\n        }\\n    }\\n\\n    function getSecondsRemainingInBatch(uint256 auctionId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (auctionData[auctionId].auctionEndDate < block.timestamp) {\\n            return 0;\\n        }\\n        return auctionData[auctionId].auctionEndDate.sub(block.timestamp);\\n    }\\n\\n    function containsOrder(uint256 auctionId, bytes32 order)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return sellOrders[auctionId].contains(order);\\n    }\\n\\n\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/AllowListVerifier.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nlibrary AllowListVerifierHelper {\\n    /// @dev Value returned by a call to `isAllowed` if the check\\n    /// was successful. The value is defined as:\\n    /// bytes4(keccak256(\\\"isAllowed(address,uint256,bytes)\\\"))\\n    bytes4 internal constant MAGICVALUE = 0x19a05a7e;\\n}\\n\\n///\\n/// @dev Standardized interface for an allowList manager for annexAuction\\n/// The interface was inspired by EIP-1271\\ninterface AllowListVerifier {\\n    /// @dev Should return whether the a specific user has access to an auction\\n    /// by returning the magic value from AllowListVerifierHelper\\n    function isAllowed(\\n        address user,\\n        uint256 auctionId,\\n        bytes calldata callData\\n    ) external view returns (bytes4);\\n}\\n\"\n    },\n    \"contracts/libraries/IdToAddressBiMap.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\\n// Contract does not have test coverage, as it was nearly copied from:\\n// https://github.com/gnosis/solidity-data-structures/blob/master/contracts/libraries/IdToAddressBiMap.sol\\n// The only change is uint16 -> uint64\\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\nlibrary IdToAddressBiMap {\\n    struct Data {\\n        mapping(uint64 => address) idToAddress;\\n        mapping(address => uint64) addressToId;\\n    }\\n\\n    function hasId(Data storage self, uint64 id) internal view returns (bool) {\\n        return self.idToAddress[id + 1] != address(0);\\n    }\\n\\n    function hasAddress(Data storage self, address addr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return self.addressToId[addr] != 0;\\n    }\\n\\n    function getAddressAt(Data storage self, uint64 id)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        require(hasId(self, id), \\\"Must have ID to get Address\\\");\\n        return self.idToAddress[id + 1];\\n    }\\n\\n    function getId(Data storage self, address addr)\\n        internal\\n        view\\n        returns (uint64)\\n    {\\n        require(hasAddress(self, addr), \\\"Must have Address to get ID\\\");\\n        return self.addressToId[addr] - 1;\\n    }\\n\\n    function insert(\\n        Data storage self,\\n        uint64 id,\\n        address addr\\n    ) internal returns (bool) {\\n        require(addr != address(0), \\\"Cannot insert zero address\\\");\\n        require(id != uint64(-1), \\\"Cannot insert max uint64\\\");\\n        // Ensure bijectivity of the mappings\\n        if (\\n            self.addressToId[addr] != 0 ||\\n            self.idToAddress[id + 1] != address(0)\\n        ) {\\n            return false;\\n        }\\n        self.idToAddress[id + 1] = addr;\\n        self.addressToId[addr] = id + 1;\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Logic was copied and modified from here: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/SafeCast.sol\\n */\\nlibrary SafeCast {\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value < 2**96, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n}\\n\"\n    },\n    \"contracts/wrappers/DepositAndPlaceOrder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../AnnexBatchAuction.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\ncontract DepositAndPlaceOrder {\\n    AnnexBatchAuction public immutable annexAuction;\\n    IWETH public immutable nativeTokenWrapper;\\n\\n    constructor(address annexAuctionAddress, address _nativeTokenWrapper)\\n        public\\n    {\\n        nativeTokenWrapper = IWETH(_nativeTokenWrapper);\\n        annexAuction = AnnexBatchAuction(annexAuctionAddress);\\n        IERC20(_nativeTokenWrapper).approve(annexAuctionAddress, uint256(-1));\\n    }\\n\\n    function depositAndPlaceOrder(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        bytes calldata allowListCallData\\n    ) external payable returns (uint64 userId) {\\n        uint96[] memory sellAmounts = new uint96[](1);\\n        require(msg.value < 2**96, \\\"too much value sent\\\");\\n        nativeTokenWrapper.deposit{value: msg.value}();\\n        sellAmounts[0] = uint96(msg.value);\\n        return\\n            annexAuction.placeSellOrdersOnBehalf(\\n                auctionId,\\n                _minBuyAmounts,\\n                sellAmounts,\\n                _prevSellOrders,\\n                allowListCallData,\\n                msg.sender\\n            );\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IWETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\n    },\n    \"contracts/test/StateChangingAllowListVerifier.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity >=0.6.8;\\nimport \\\"../interfaces/AllowListVerifier.sol\\\";\\n\\ncontract StateChangingAllowListVerifier {\\n    bytes32 public test = bytes32(0);\\n\\n    function isAllowed(\\n        address user,\\n        uint256 auctionId,\\n        bytes calldata callData\\n    ) external returns (bytes4) {\\n        test = keccak256(abi.encode(user, auctionId, callData));\\n        return AllowListVerifierHelper.MAGICVALUE;\\n    }\\n}\\n\"\n    },\n    \"contracts/allowListExamples/AllowListOffChainManaged.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\nimport \\\"../interfaces/AllowListVerifier.sol\\\";\\nimport \\\"../AnnexBatchAuction.sol\\\";\\n\\n// Idea was first mentioned in the blog:\\n// https://medium.com/@PhABC/off-chain-whitelist-with-on-chain-verification-for-ethereum-smart-contracts-1563ca4b8f11\\n\\ncontract AllowListOffChainManaged {\\n    /// @dev The EIP-712 domain type hash used for computing the domain\\n    /// separator.\\n    bytes32 private constant DOMAIN_TYPE_HASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /// @dev The EIP-712 domain name used for computing the domain separator.\\n    bytes32 private constant DOMAIN_NAME = keccak256(\\\"AccessManager\\\");\\n\\n    /// @dev The EIP-712 domain version used for computing the domain separator.\\n    bytes32 private constant DOMAIN_VERSION = keccak256(\\\"v1\\\");\\n\\n    /// @dev The domain separator used for signing orders that gets mixed in\\n    /// making signatures for different domains incompatible. This domain\\n    /// separator is computed following the EIP-712 standard and has replay\\n    /// protection mixed in so that signed orders are only valid for specific\\n    /// GPv2 contracts.\\n    bytes32 public immutable domainSeparator;\\n\\n    constructor() public {\\n        // NOTE: Currently, the only way to get the chain ID in solidity is\\n        // using assembly.\\n        uint256 chainId;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPE_HASH,\\n                DOMAIN_NAME,\\n                DOMAIN_VERSION,\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function isAllowed(\\n        address user,\\n        uint256 auctionId,\\n        bytes calldata callData\\n    ) external view returns (bytes4) {\\n        return isAllowedBy(user, auctionId, msg.sender, callData);\\n    }\\n\\n    function isAllowedBy(\\n        address user,\\n        uint256 auctionId,\\n        address allower,\\n        bytes calldata callData\\n    ) public view returns (bytes4) {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        (v, r, s) = abi.decode(callData, (uint8, bytes32, bytes32));\\n        bytes32 hash = keccak256(abi.encode(domainSeparator, user, auctionId));\\n        address signer =\\n            ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n        bytes memory allowListData =\\n            AnnexBatchAuction(allower).auctionAccessData(auctionId);\\n        if (abi.decode(allowListData, (address)) == signer) {\\n            return AllowListVerifierHelper.MAGICVALUE;\\n        } else {\\n            return bytes4(0);\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/test/ERC20Mintable.sol\": {\n      \"content\": \"pragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract ERC20Mintable is ERC20 {\\n    constructor(string memory name, string memory symbol)\\n        public\\n        ERC20(symbol, name)\\n    {}\\n\\n    function mint(address account, uint256 amount) public {\\n        _mint(account, amount);\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": false,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "38005199e6d5eaf60fee3a5cf791be74",
      "transactionHash": "0x5115fdbd65ddb422f3a9f050cd35f040781ba88423af20058fa366d21d8cb1ee",
      "args": []
    },
    "decoded": {
      "from": "0x48F91fbC86679e14f481DD3C3381f0e07F93A711",
      "gasPrice": "10000000000",
      "gasLimit": "30000000",
      "to": null,
      "value": "0",
      "nonce": 48,
      "data": "",
      "r": "0x617c2972cad857bfbebfd4cb1d4f2d3854c5e1033daa5f14a42bd9a4e3b414f7",
      "s": "0x517c5cc26a3c8ac925fa5aa9a7af874b661370231e31c0038657ec2ae72482ad",
      "v": 229,
      "chainId": 97
    }
  }
}