{
  "language": "Solidity",
  "sources": {
    "contracts/Utils/BatchDocuments.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../seriality/Seriality.sol\";\n\n/**\n * @title Standard implementation of ERC1643 Document management\n */\ncontract BatchDocuments is Ownable , Seriality {\n\n    struct Document {\n        uint32 docIndex;    // Store the document name indexes\n        uint64 lastModified; // Timestamp at which document details was last modified\n        string data; // data of the document that exist off-chain\n    }\n\n    // mapping to store the documents details in the document\n    mapping(string => Document) internal _documents;\n    // mapping to store the document name indexes\n    mapping(string => uint32) internal _docIndexes;\n    // Array use to store all the document name present in the contracts\n    string[] internal _docNames;\n\n    constructor() public Ownable(){\n    }\n\n    // Document Events\n    event DocumentRemoved(string indexed _name, string _data);\n    event DocumentUpdated(string indexed _name, string _data);\n\n    /**\n     * @notice Used to attach a new document to the contract, or update the data or hash of an existing attached document\n     * @dev Can only be executed by the owner of the contract.\n     * @param _name Name of the document. It should be unique always\n     * @param _data Off-chain data of the document from where it is accessible to investors/advisors to read.\n     */\n    function _setDocument(string calldata _name, string calldata _data) external onlyOwner {\n        require(bytes(_name).length > 0, \"Zero name is not allowed\");\n        require(bytes(_data).length > 0, \"Should not be a empty data\");\n        // Document storage document = _documents[_name];\n        if (_documents[_name].lastModified == uint64(0)) {\n            _docNames.push(_name);\n            _documents[_name].docIndex = uint32(_docNames.length);\n        }\n        _documents[_name] = Document(_documents[_name].docIndex, uint64(block.timestamp), _data);\n        emit DocumentUpdated(_name, _data);\n    }\n\n    /**\n     * @notice Used to remove an existing document from the contract by giving the name of the document.\n     * @dev Can only be executed by the owner of the contract.\n     * @param _name Name of the document. It should be unique always\n     */\n\n    function _removeDocument(string calldata _name) external onlyOwner {\n        require(_documents[_name].lastModified != uint64(0), \"Document should exist\");\n        uint32 index = _documents[_name].docIndex - 1;\n        if (index != _docNames.length - 1) {\n            _docNames[index] = _docNames[_docNames.length - 1];\n            _documents[_docNames[index]].docIndex = index + 1; \n        }\n        _docNames.pop();\n        emit DocumentRemoved(_name, _documents[_name].data);\n        delete _documents[_name];\n    }\n\n    /**\n     * @notice Used to return the details of a document with a known name (`string`).\n     * @param _name Name of the document\n     * @return string The data associated with the document.\n     * @return uint256 the timestamp at which the document was last modified.\n     */\n    function getDocument(string calldata _name) external view returns (string memory, uint256) {\n        return (\n            _documents[_name].data,\n            uint256(_documents[_name].lastModified)\n        );\n    }\n\n    /**\n     * @notice Used to retrieve a full list of documents attached to the smart contract.\n     * @return string List of all documents names present in the contract.\n     */\n    function getAllDocuments() external view returns (bytes memory) {\n        uint startindex = 0;\n        uint endindex = _docNames.length;\n        require(endindex >= startindex);\n\n        if(endindex > (_docNames.length - 1)){\n            endindex = _docNames.length - 1;\n        }\n\n        uint offset = 64*((endindex - startindex) + 1);\n        \n        bytes memory buffer = new  bytes(offset);\n        string memory out1  = new string(32);\n        \n        \n        for(uint i = startindex; i <= endindex; i++){\n            out1 = _docNames[i];\n            \n            stringToBytes(offset, bytes(out1), buffer);\n            offset -= sizeOfString(out1);\n        }\n        return buffer;\n    }\n\n    /**\n     * @notice Used to retrieve the total documents in the smart contract.\n     * @return uint256 Count of the document names present in the contract.\n     */\n    function getDocumentCount() external view returns (uint256) {\n        return _docNames.length;\n    }\n\n    /**\n     * @notice Used to retrieve the document name from index in the smart contract.\n     * @return string Name of the document name.\n     */\n    function getDocumentName(uint256 _index) external view returns (string memory) {\n        require(_index < _docNames.length, \"Index out of bounds\");\n        return _docNames[_index];\n    }\n\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/seriality/Seriality.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/**\n * @title Seriality\n * @dev The Seriality contract is the main interface for serializing data using the TypeToBytes, BytesToType and SizeOf\n * @author pouladzade@gmail.com\n */\n \nimport \"./BytesToTypes.sol\";\nimport \"./TypesToBytes.sol\";\nimport \"./SizeOf.sol\";\n\ncontract Seriality is BytesToTypes, TypesToBytes, SizeOf {\n\n    constructor() public {\n\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/seriality/BytesToTypes.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/**\n * @title BytesToTypes\n * @dev The BytesToTypes contract converts the memory byte arrays to the standard solidity types\n * @author pouladzade@gmail.com\n */\n\ncontract BytesToTypes {\n    \n\n    function bytesToAddress(uint _offst, bytes memory _input) internal pure returns (address _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n    \n    function bytesToBool(uint _offst, bytes memory _input) internal pure returns (bool _output) {\n        \n        uint8 x;\n        assembly {\n            x := mload(add(_input, _offst))\n        }\n        x==0 ? _output = false : _output = true;\n    }   \n        \n    function getStringSize(uint _offst, bytes memory _input) internal pure returns(uint size){\n        \n        assembly{\n            \n            size := mload(add(_input,_offst))\n            let chunk_count := add(div(size,32),1) // chunk_count = size/32 + 1\n            \n            if gt(mod(size,32),0) {// if size%32 > 0\n                chunk_count := add(chunk_count,1)\n            } \n            \n             size := mul(chunk_count,32)// first 32 bytes reseves for size in strings\n        }\n    }\n\n    function bytesToString(uint _offst, bytes memory _input, bytes memory _output) internal pure {\n\n        uint size = 32;\n        assembly {\n            \n            let chunk_count\n            \n            size := mload(add(_input,_offst))\n            chunk_count := add(div(size,32),1) // chunk_count = size/32 + 1\n            \n            if gt(mod(size,32),0) {\n                chunk_count := add(chunk_count,1)  // chunk_count++\n            }\n               \n            for { let index:= 0 }  lt(index , chunk_count){ index := add(index,1) } {\n                mstore(add(_output,mul(index,32)),mload(add(_input,_offst)))\n                _offst := sub(_offst,32)           // _offst -= 32\n            }\n        }\n    }\n\n    function bytesToBytes32(uint _offst, bytes memory  _input, bytes32 _output) internal pure {\n        \n        assembly {\n            mstore(_output , add(_input, _offst))\n            mstore(add(_output,32) , add(add(_input, _offst),32))\n        }\n    }\n    \n    function bytesToInt8(uint _offst, bytes memory  _input) internal pure returns (int8 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n    \n    function bytesToInt16(uint _offst, bytes memory _input) internal pure returns (int16 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt24(uint _offst, bytes memory _input) internal pure returns (int24 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt32(uint _offst, bytes memory _input) internal pure returns (int32 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt40(uint _offst, bytes memory _input) internal pure returns (int40 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt48(uint _offst, bytes memory _input) internal pure returns (int48 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt56(uint _offst, bytes memory _input) internal pure returns (int56 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt64(uint _offst, bytes memory _input) internal pure returns (int64 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt72(uint _offst, bytes memory _input) internal pure returns (int72 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt80(uint _offst, bytes memory _input) internal pure returns (int80 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt88(uint _offst, bytes memory _input) internal pure returns (int88 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt96(uint _offst, bytes memory _input) internal pure returns (int96 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\t\n\tfunction bytesToInt104(uint _offst, bytes memory _input) internal pure returns (int104 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n    \n    function bytesToInt112(uint _offst, bytes memory _input) internal pure returns (int112 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt120(uint _offst, bytes memory _input) internal pure returns (int120 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt128(uint _offst, bytes memory _input) internal pure returns (int128 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt136(uint _offst, bytes memory _input) internal pure returns (int136 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt144(uint _offst, bytes memory _input) internal pure returns (int144 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt152(uint _offst, bytes memory _input) internal pure returns (int152 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt160(uint _offst, bytes memory _input) internal pure returns (int160 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt168(uint _offst, bytes memory _input) internal pure returns (int168 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt176(uint _offst, bytes memory _input) internal pure returns (int176 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt184(uint _offst, bytes memory _input) internal pure returns (int184 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt192(uint _offst, bytes memory _input) internal pure returns (int192 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt200(uint _offst, bytes memory _input) internal pure returns (int200 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt208(uint _offst, bytes memory _input) internal pure returns (int208 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt216(uint _offst, bytes memory _input) internal pure returns (int216 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt224(uint _offst, bytes memory _input) internal pure returns (int224 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt232(uint _offst, bytes memory _input) internal pure returns (int232 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt240(uint _offst, bytes memory _input) internal pure returns (int240 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt248(uint _offst, bytes memory _input) internal pure returns (int248 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToInt256(uint _offst, bytes memory _input) internal pure returns (int256 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n\tfunction bytesToUint8(uint _offst, bytes memory _input) internal pure returns (uint8 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n\tfunction bytesToUint16(uint _offst, bytes memory _input) internal pure returns (uint16 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n\tfunction bytesToUint24(uint _offst, bytes memory _input) internal pure returns (uint24 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n\tfunction bytesToUint32(uint _offst, bytes memory _input) internal pure returns (uint32 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n\tfunction bytesToUint40(uint _offst, bytes memory _input) internal pure returns (uint40 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n\tfunction bytesToUint48(uint _offst, bytes memory _input) internal pure returns (uint48 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n\tfunction bytesToUint56(uint _offst, bytes memory _input) internal pure returns (uint56 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n\tfunction bytesToUint64(uint _offst, bytes memory _input) internal pure returns (uint64 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n\tfunction bytesToUint72(uint _offst, bytes memory _input) internal pure returns (uint72 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n\tfunction bytesToUint80(uint _offst, bytes memory _input) internal pure returns (uint80 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n\tfunction bytesToUint88(uint _offst, bytes memory _input) internal pure returns (uint88 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n\tfunction bytesToUint96(uint _offst, bytes memory _input) internal pure returns (uint96 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\t\n\tfunction bytesToUint104(uint _offst, bytes memory _input) internal pure returns (uint104 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint112(uint _offst, bytes memory _input) internal pure returns (uint112 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint120(uint _offst, bytes memory _input) internal pure returns (uint120 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint128(uint _offst, bytes memory _input) internal pure returns (uint128 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint136(uint _offst, bytes memory _input) internal pure returns (uint136 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint144(uint _offst, bytes memory _input) internal pure returns (uint144 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint152(uint _offst, bytes memory _input) internal pure returns (uint152 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint160(uint _offst, bytes memory _input) internal pure returns (uint160 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint168(uint _offst, bytes memory _input) internal pure returns (uint168 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint176(uint _offst, bytes memory _input) internal pure returns (uint176 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint184(uint _offst, bytes memory _input) internal pure returns (uint184 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint192(uint _offst, bytes memory _input) internal pure returns (uint192 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint200(uint _offst, bytes memory _input) internal pure returns (uint200 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint208(uint _offst, bytes memory _input) internal pure returns (uint208 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint216(uint _offst, bytes memory _input) internal pure returns (uint216 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint224(uint _offst, bytes memory _input) internal pure returns (uint224 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint232(uint _offst, bytes memory _input) internal pure returns (uint232 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint240(uint _offst, bytes memory _input) internal pure returns (uint240 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint248(uint _offst, bytes memory _input) internal pure returns (uint248 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n\n    function bytesToUint256(uint _offst, bytes memory _input) internal pure returns (uint256 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n    \n}\n"
    },
    "contracts/seriality/TypesToBytes.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/**\n * @title TypesToBytes\n * @dev The TypesToBytes contract converts the standard solidity types to the byte array\n * @author pouladzade@gmail.com\n */\n\ncontract TypesToBytes {\n \n    function addressToBytes(uint _offst, address _input, bytes memory _output) internal pure {\n\n        assembly {\n            mstore(add(_output, _offst), _input)\n        }\n    }\n\n    function bytes32ToBytes(uint _offst, bytes32 _input, bytes memory _output) internal pure {\n\n        assembly {\n            mstore(add(_output, _offst), _input)\n            mstore(add(add(_output, _offst),32), add(_input,32))\n        }\n    }\n    \n    function boolToBytes(uint _offst, bool _input, bytes memory _output) internal pure {\n        uint8 x = _input == false ? 0 : 1;\n        assembly {\n            mstore(add(_output, _offst), x)\n        }\n    }\n    \n    function stringToBytes(uint _offst, bytes memory _input, bytes memory _output) internal pure {\n        uint256 stack_size = _input.length / 32;\n        if(_input.length % 32 > 0) stack_size++;\n        \n        assembly {\n            stack_size := add(stack_size,1)//adding because of 32 first bytes memory as the length\n            for { let index := 0 } lt(index,stack_size){ index := add(index ,1) } {\n                mstore(add(_output, _offst), mload(add(_input,mul(index,32))))\n                _offst := sub(_offst , 32)\n            }\n        }\n    }\n\n    function intToBytes(uint _offst, int _input, bytes memory  _output) internal pure {\n\n        assembly {\n            mstore(add(_output, _offst), _input)\n        }\n    } \n    \n    function uintToBytes(uint _offst, uint _input, bytes memory _output) internal pure {\n\n        assembly {\n            mstore(add(_output, _offst), _input)\n        }\n    }   \n\n}\n"
    },
    "contracts/seriality/SizeOf.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/**\n * @title SizeOf\n * @dev The SizeOf return the size of the solidity types in byte\n * @author pouladzade@gmail.com\n */\n\ncontract  SizeOf {\n    \n    function sizeOfString(string memory _in) internal pure  returns(uint _size){\n        _size = bytes(_in).length / 32;\n         if(bytes(_in).length % 32 != 0) \n            _size++;\n            \n        _size++; // first 32 bytes is reserved for the size of the string     \n        _size *= 32;\n    }\n\n    function sizeOfInt(uint16 _postfix) internal pure  returns(uint size){\n\n        assembly{\n            switch _postfix\n                case 8 { size := 1 }\n                case 16 { size := 2 }\n                case 24 { size := 3 }\n                case 32 { size := 4 }\n                case 40 { size := 5 }\n                case 48 { size := 6 }\n                case 56 { size := 7 }\n                case 64 { size := 8 }\n                case 72 { size := 9 }\n                case 80 { size := 10 }\n                case 88 { size := 11 }\n                case 96 { size := 12 }\n                case 104 { size := 13 }\n                case 112 { size := 14 }\n                case 120 { size := 15 }\n                case 128 { size := 16 }\n                case 136 { size := 17 }\n                case 144 { size := 18 }\n                case 152 { size := 19 }\n                case 160 { size := 20 }\n                case 168 { size := 21 }\n                case 176 { size := 22 }\n                case 184 { size := 23 }\n                case 192 { size := 24 }\n                case 200 { size := 25 }\n                case 208 { size := 26 }\n                case 216 { size := 27 }\n                case 224 { size := 28 }\n                case 232 { size := 29 }\n                case 240 { size := 30 }\n                case 248 { size := 31 }\n                case 256 { size := 32 }\n                default  { size := 32 }\n        }\n\n    }\n    \n    function sizeOfUint(uint16 _postfix) internal pure  returns(uint size){\n        return sizeOfInt(_postfix);\n    }\n\n    function sizeOfAddress() internal pure  returns(uint8){\n        return 20; \n    }\n    \n    function sizeOfBool() internal pure  returns(uint8){\n        return 1; \n    }\n    \n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}