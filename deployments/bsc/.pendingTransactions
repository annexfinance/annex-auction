{
  "0x49da1b20dbe893fac272dd9d01385c8d94538c68d5981c8b59268798f9cc77e7": {
    "name": "BatchDocuments",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "BatchDocuments",
      "sourceName": "contracts/Utils/BatchDocuments.sol",
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "_data",
              "type": "string"
            }
          ],
          "name": "DocumentRemoved",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "_data",
              "type": "string"
            }
          ],
          "name": "DocumentUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            }
          ],
          "name": "_removeDocument",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_data",
              "type": "string"
            }
          ],
          "name": "_setDocument",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getAllDocuments",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            }
          ],
          "name": "getDocument",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getDocumentCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "name": "getDocumentName",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x608060405234801561001057600080fd5b5060006100216100c460201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100cc565b600033905090565b611a67806100db6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80639fa5f50b116100665780639fa5f50b1461010f578063c6b547e61461012d578063de7afa4b1461015d578063f2fde38b14610179578063f3494ae91461019557610093565b80633d1c227314610098578063715018a6146100b65780637ccb6a64146100c05780638da5cb5b146100f1575b600080fd5b6100a06101b1565b6040516100ad91906118db565b60405180910390f35b6100be6101be565b005b6100da60048036038101906100d59190611374565b61032b565b6040516100e8929190611809565b60405180910390f35b6100f961043b565b6040516101069190611786565b60405180910390f35b610117610464565b60405161012491906117a1565b60405180910390f35b6101476004803603810190610142919061142e565b610636565b60405161015491906117e7565b60405180910390f35b61017760048036038101906101729190611374565b610736565b005b610193600480360381019061018e919061134b565b610a83565b005b6101af60048036038101906101aa91906113b9565b610c75565b005b6000600380549050905090565b6101c6611019565b73ffffffffffffffffffffffffffffffffffffffff166101e461043b565b73ffffffffffffffffffffffffffffffffffffffff161461026d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6060600060018484604051610341929190611756565b908152602001604051809103902060010160018585604051610364929190611756565b908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff16818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104295780601f106103fe57610100808354040283529160200191610429565b820191906000526020600020905b81548152906001019060200180831161040c57829003601f168201915b50505050509150915091509250929050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060008060038054905090508181101561047e57600080fd5b60016003805490500381111561049a5760016003805490500390505b6000600183830301604002905060008167ffffffffffffffff811180156104c057600080fd5b506040519080825280601f01601f1916602001820160405280156104f35781602001600182028036833780820191505090505b5090506000602067ffffffffffffffff8111801561051057600080fd5b506040519080825280601f01601f1916602001820160405280156105435781602001600182028036833780820191505090505b50905060008590505b84811161062a576003818154811061056057fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105fe5780601f106105d3576101008083540402835291602001916105fe565b820191906000526020600020905b8154815290600101906020018083116105e157829003601f168201915b50505050509150610610848385611021565b61061982611082565b84039350808060010191505061054c565b50819550505050505090565b6060600380549050821061067f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106769061189b565b60405180910390fd5b6003828154811061068c57fe5b906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561072a5780601f106106ff5761010080835404028352916020019161072a565b820191906000526020600020905b81548152906001019060200180831161070d57829003601f168201915b50505050509050919050565b61073e611019565b73ffffffffffffffffffffffffffffffffffffffff1661075c61043b565b73ffffffffffffffffffffffffffffffffffffffff16146107e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600067ffffffffffffffff1660018383604051610803929190611756565b908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff161415610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b9061185b565b60405180910390fd5b60006001808484604051610889929190611756565b908152602001604051809103902060000160009054906101000a900463ffffffff160390506001600380549050038163ffffffff161461097f576003600160038054905003815481106108d857fe5b9060005260206000200160038263ffffffff16815481106108f557fe5b90600052602060002001908054600181600116156101000203166002900461091e9291906110c1565b5060018101600160038363ffffffff168154811061093857fe5b9060005260206000200160405161094f919061176f565b908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b600380548061098a57fe5b6001900381819060005260206000200160006109a69190611156565b905582826040516109b8929190611756565b60405180910390207f4b5338540b4d1c0f6dd0308a25f633b7ff60472f894d711cff9dd64e35c613b2600185856040516109f3929190611756565b9081526020016040518091039020600101604051610a119190611839565b60405180910390a260018383604051610a2b929190611756565b9081526020016040518091039020600080820160006101000a81549063ffffffff02191690556000820160046101000a81549067ffffffffffffffff0219169055600182016000610a7c9190611156565b5050505050565b610a8b611019565b73ffffffffffffffffffffffffffffffffffffffff16610aa961043b565b73ffffffffffffffffffffffffffffffffffffffff1614610b32576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611a0c6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610c7d611019565b73ffffffffffffffffffffffffffffffffffffffff16610c9b61043b565b73ffffffffffffffffffffffffffffffffffffffff1614610d24576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60008484905011610d6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d619061187b565b60405180910390fd5b60008282905011610db0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da7906118bb565b60405180910390fd5b600067ffffffffffffffff1660018585604051610dce929190611756565b908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff161415610e8a576003848490918060018154018082558091505060019003906000526020600020016000909192909192909192909192509190610e4192919061119e565b5060038054905060018585604051610e5a929190611756565b908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b604051806060016040528060018686604051610ea7929190611756565b908152602001604051809103902060000160009054906101000a900463ffffffff1663ffffffff1681526020014267ffffffffffffffff16815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525060018585604051610f3e929190611756565b908152602001604051809103902060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151816001019080519060200190610fbe92919061122c565b509050508383604051610fd2929190611756565b60405180910390207fbaa206e5ea800eb88bce099f453fee53295b793b9d5d1cfc4ce4b6db06a34f53838360405161100b9291906117c3565b60405180910390a250505050565b600033905090565b6000602083518161102e57fe5b0490506000602084518161103e57fe5b06111561104e5780806001019150505b60018101905060005b8181101561107b576020810284015185840152602085039450600181019050611057565b5050505050565b6000602082518161108f57fe5b0490506000602083518161109f57fe5b06146110ae5780806001019150505b8080600101915050602081029050919050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826110f75760008555611145565b82601f106111085780548555611145565b8280016001018555821561114557600052602060002091601f016020900482015b82811115611144578254825591600101919060010190611129565b5b50905061115291906112ba565b5090565b50805460018160011615610100020316600290046000825580601f1061117c575061119b565b601f01602090049060005260206000209081019061119a91906112ba565b5b50565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826111d4576000855561121b565b82601f106111ed57803560ff191683800117855561121b565b8280016001018555821561121b579182015b8281111561121a5782358255916020019190600101906111ff565b5b50905061122891906112ba565b5090565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261126257600085556112a9565b82601f1061127b57805160ff19168380011785556112a9565b828001600101855582156112a9579182015b828111156112a857825182559160200191906001019061128d565b5b5090506112b691906112ba565b5090565b5b808211156112d35760008160009055506001016112bb565b5090565b6000813590506112e6816119dd565b92915050565b60008083601f8401126112fe57600080fd5b8235905067ffffffffffffffff81111561131757600080fd5b60208301915083600182028301111561132f57600080fd5b9250929050565b600081359050611345816119f4565b92915050565b60006020828403121561135d57600080fd5b600061136b848285016112d7565b91505092915050565b6000806020838503121561138757600080fd5b600083013567ffffffffffffffff8111156113a157600080fd5b6113ad858286016112ec565b92509250509250929050565b600080600080604085870312156113cf57600080fd5b600085013567ffffffffffffffff8111156113e957600080fd5b6113f5878288016112ec565b9450945050602085013567ffffffffffffffff81111561141457600080fd5b611420878288016112ec565b925092505092959194509250565b60006020828403121561144057600080fd5b600061144e84828501611336565b91505092915050565b6114608161194e565b82525050565b60006114718261190b565b61147b8185611921565b935061148b818560208601611999565b611494816119cc565b840191505092915050565b60006114ab8385611932565b93506114b883858461198a565b6114c1836119cc565b840190509392505050565b60006114d88385611943565b93506114e583858461198a565b82840190509392505050565b60006114fc82611916565b6115068185611932565b9350611516818560208601611999565b61151f816119cc565b840191505092915050565b600081546001811660008114611547576001811461156d576115b1565b607f60028304166115588187611932565b955060ff1983168652602086019350506115b1565b6002820461157b8187611932565b9550611586856118f6565b60005b828110156115a857815481890152600182019150602081019050611589565b80880195505050505b505092915050565b6000815460018116600081146115d657600181146115fb5761163f565b607f60028304166115e78187611943565b955060ff198316865280860193505061163f565b600282046116098187611943565b9550611614856118f6565b60005b8281101561163657815481890152600182019150602081019050611617565b82880195505050505b505092915050565b6000611654601583611932565b91507f446f63756d656e742073686f756c6420657869737400000000000000000000006000830152602082019050919050565b6000611694601883611932565b91507f5a65726f206e616d65206973206e6f7420616c6c6f77656400000000000000006000830152602082019050919050565b60006116d4601383611932565b91507f496e646578206f7574206f6620626f756e6473000000000000000000000000006000830152602082019050919050565b6000611714601a83611932565b91507f53686f756c64206e6f74206265206120656d70747920646174610000000000006000830152602082019050919050565b61175081611980565b82525050565b60006117638284866114cc565b91508190509392505050565b600061177b82846115b9565b915081905092915050565b600060208201905061179b6000830184611457565b92915050565b600060208201905081810360008301526117bb8184611466565b905092915050565b600060208201905081810360008301526117de81848661149f565b90509392505050565b6000602082019050818103600083015261180181846114f1565b905092915050565b6000604082019050818103600083015261182381856114f1565b90506118326020830184611747565b9392505050565b60006020820190508181036000830152611853818461152a565b905092915050565b6000602082019050818103600083015261187481611647565b9050919050565b6000602082019050818103600083015261189481611687565b9050919050565b600060208201905081810360008301526118b4816116c7565b9050919050565b600060208201905081810360008301526118d481611707565b9050919050565b60006020820190506118f06000830184611747565b92915050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061195982611960565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156119b757808201518184015260208101905061199c565b838111156119c6576000848401525b50505050565b6000601f19601f8301169050919050565b6119e68161194e565b81146119f157600080fd5b50565b6119fd81611980565b8114611a0857600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220ebca934579bbd85dbff2f507dee202cafd0f2c54b14a757fb708246f752c5f8864736f6c63430007060033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80639fa5f50b116100665780639fa5f50b1461010f578063c6b547e61461012d578063de7afa4b1461015d578063f2fde38b14610179578063f3494ae91461019557610093565b80633d1c227314610098578063715018a6146100b65780637ccb6a64146100c05780638da5cb5b146100f1575b600080fd5b6100a06101b1565b6040516100ad91906118db565b60405180910390f35b6100be6101be565b005b6100da60048036038101906100d59190611374565b61032b565b6040516100e8929190611809565b60405180910390f35b6100f961043b565b6040516101069190611786565b60405180910390f35b610117610464565b60405161012491906117a1565b60405180910390f35b6101476004803603810190610142919061142e565b610636565b60405161015491906117e7565b60405180910390f35b61017760048036038101906101729190611374565b610736565b005b610193600480360381019061018e919061134b565b610a83565b005b6101af60048036038101906101aa91906113b9565b610c75565b005b6000600380549050905090565b6101c6611019565b73ffffffffffffffffffffffffffffffffffffffff166101e461043b565b73ffffffffffffffffffffffffffffffffffffffff161461026d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6060600060018484604051610341929190611756565b908152602001604051809103902060010160018585604051610364929190611756565b908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff16818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104295780601f106103fe57610100808354040283529160200191610429565b820191906000526020600020905b81548152906001019060200180831161040c57829003601f168201915b50505050509150915091509250929050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060008060038054905090508181101561047e57600080fd5b60016003805490500381111561049a5760016003805490500390505b6000600183830301604002905060008167ffffffffffffffff811180156104c057600080fd5b506040519080825280601f01601f1916602001820160405280156104f35781602001600182028036833780820191505090505b5090506000602067ffffffffffffffff8111801561051057600080fd5b506040519080825280601f01601f1916602001820160405280156105435781602001600182028036833780820191505090505b50905060008590505b84811161062a576003818154811061056057fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105fe5780601f106105d3576101008083540402835291602001916105fe565b820191906000526020600020905b8154815290600101906020018083116105e157829003601f168201915b50505050509150610610848385611021565b61061982611082565b84039350808060010191505061054c565b50819550505050505090565b6060600380549050821061067f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106769061189b565b60405180910390fd5b6003828154811061068c57fe5b906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561072a5780601f106106ff5761010080835404028352916020019161072a565b820191906000526020600020905b81548152906001019060200180831161070d57829003601f168201915b50505050509050919050565b61073e611019565b73ffffffffffffffffffffffffffffffffffffffff1661075c61043b565b73ffffffffffffffffffffffffffffffffffffffff16146107e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600067ffffffffffffffff1660018383604051610803929190611756565b908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff161415610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b9061185b565b60405180910390fd5b60006001808484604051610889929190611756565b908152602001604051809103902060000160009054906101000a900463ffffffff160390506001600380549050038163ffffffff161461097f576003600160038054905003815481106108d857fe5b9060005260206000200160038263ffffffff16815481106108f557fe5b90600052602060002001908054600181600116156101000203166002900461091e9291906110c1565b5060018101600160038363ffffffff168154811061093857fe5b9060005260206000200160405161094f919061176f565b908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b600380548061098a57fe5b6001900381819060005260206000200160006109a69190611156565b905582826040516109b8929190611756565b60405180910390207f4b5338540b4d1c0f6dd0308a25f633b7ff60472f894d711cff9dd64e35c613b2600185856040516109f3929190611756565b9081526020016040518091039020600101604051610a119190611839565b60405180910390a260018383604051610a2b929190611756565b9081526020016040518091039020600080820160006101000a81549063ffffffff02191690556000820160046101000a81549067ffffffffffffffff0219169055600182016000610a7c9190611156565b5050505050565b610a8b611019565b73ffffffffffffffffffffffffffffffffffffffff16610aa961043b565b73ffffffffffffffffffffffffffffffffffffffff1614610b32576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611a0c6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610c7d611019565b73ffffffffffffffffffffffffffffffffffffffff16610c9b61043b565b73ffffffffffffffffffffffffffffffffffffffff1614610d24576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60008484905011610d6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d619061187b565b60405180910390fd5b60008282905011610db0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da7906118bb565b60405180910390fd5b600067ffffffffffffffff1660018585604051610dce929190611756565b908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff161415610e8a576003848490918060018154018082558091505060019003906000526020600020016000909192909192909192909192509190610e4192919061119e565b5060038054905060018585604051610e5a929190611756565b908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b604051806060016040528060018686604051610ea7929190611756565b908152602001604051809103902060000160009054906101000a900463ffffffff1663ffffffff1681526020014267ffffffffffffffff16815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525060018585604051610f3e929190611756565b908152602001604051809103902060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151816001019080519060200190610fbe92919061122c565b509050508383604051610fd2929190611756565b60405180910390207fbaa206e5ea800eb88bce099f453fee53295b793b9d5d1cfc4ce4b6db06a34f53838360405161100b9291906117c3565b60405180910390a250505050565b600033905090565b6000602083518161102e57fe5b0490506000602084518161103e57fe5b06111561104e5780806001019150505b60018101905060005b8181101561107b576020810284015185840152602085039450600181019050611057565b5050505050565b6000602082518161108f57fe5b0490506000602083518161109f57fe5b06146110ae5780806001019150505b8080600101915050602081029050919050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826110f75760008555611145565b82601f106111085780548555611145565b8280016001018555821561114557600052602060002091601f016020900482015b82811115611144578254825591600101919060010190611129565b5b50905061115291906112ba565b5090565b50805460018160011615610100020316600290046000825580601f1061117c575061119b565b601f01602090049060005260206000209081019061119a91906112ba565b5b50565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826111d4576000855561121b565b82601f106111ed57803560ff191683800117855561121b565b8280016001018555821561121b579182015b8281111561121a5782358255916020019190600101906111ff565b5b50905061122891906112ba565b5090565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261126257600085556112a9565b82601f1061127b57805160ff19168380011785556112a9565b828001600101855582156112a9579182015b828111156112a857825182559160200191906001019061128d565b5b5090506112b691906112ba565b5090565b5b808211156112d35760008160009055506001016112bb565b5090565b6000813590506112e6816119dd565b92915050565b60008083601f8401126112fe57600080fd5b8235905067ffffffffffffffff81111561131757600080fd5b60208301915083600182028301111561132f57600080fd5b9250929050565b600081359050611345816119f4565b92915050565b60006020828403121561135d57600080fd5b600061136b848285016112d7565b91505092915050565b6000806020838503121561138757600080fd5b600083013567ffffffffffffffff8111156113a157600080fd5b6113ad858286016112ec565b92509250509250929050565b600080600080604085870312156113cf57600080fd5b600085013567ffffffffffffffff8111156113e957600080fd5b6113f5878288016112ec565b9450945050602085013567ffffffffffffffff81111561141457600080fd5b611420878288016112ec565b925092505092959194509250565b60006020828403121561144057600080fd5b600061144e84828501611336565b91505092915050565b6114608161194e565b82525050565b60006114718261190b565b61147b8185611921565b935061148b818560208601611999565b611494816119cc565b840191505092915050565b60006114ab8385611932565b93506114b883858461198a565b6114c1836119cc565b840190509392505050565b60006114d88385611943565b93506114e583858461198a565b82840190509392505050565b60006114fc82611916565b6115068185611932565b9350611516818560208601611999565b61151f816119cc565b840191505092915050565b600081546001811660008114611547576001811461156d576115b1565b607f60028304166115588187611932565b955060ff1983168652602086019350506115b1565b6002820461157b8187611932565b9550611586856118f6565b60005b828110156115a857815481890152600182019150602081019050611589565b80880195505050505b505092915050565b6000815460018116600081146115d657600181146115fb5761163f565b607f60028304166115e78187611943565b955060ff198316865280860193505061163f565b600282046116098187611943565b9550611614856118f6565b60005b8281101561163657815481890152600182019150602081019050611617565b82880195505050505b505092915050565b6000611654601583611932565b91507f446f63756d656e742073686f756c6420657869737400000000000000000000006000830152602082019050919050565b6000611694601883611932565b91507f5a65726f206e616d65206973206e6f7420616c6c6f77656400000000000000006000830152602082019050919050565b60006116d4601383611932565b91507f496e646578206f7574206f6620626f756e6473000000000000000000000000006000830152602082019050919050565b6000611714601a83611932565b91507f53686f756c64206e6f74206265206120656d70747920646174610000000000006000830152602082019050919050565b61175081611980565b82525050565b60006117638284866114cc565b91508190509392505050565b600061177b82846115b9565b915081905092915050565b600060208201905061179b6000830184611457565b92915050565b600060208201905081810360008301526117bb8184611466565b905092915050565b600060208201905081810360008301526117de81848661149f565b90509392505050565b6000602082019050818103600083015261180181846114f1565b905092915050565b6000604082019050818103600083015261182381856114f1565b90506118326020830184611747565b9392505050565b60006020820190508181036000830152611853818461152a565b905092915050565b6000602082019050818103600083015261187481611647565b9050919050565b6000602082019050818103600083015261189481611687565b9050919050565b600060208201905081810360008301526118b4816116c7565b9050919050565b600060208201905081810360008301526118d481611707565b9050919050565b60006020820190506118f06000830184611747565b92915050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061195982611960565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156119b757808201518184015260208101905061199c565b838111156119c6576000848401525b50505050565b6000601f19601f8301169050919050565b6119e68161194e565b81146119f157600080fd5b50565b6119fd81611980565b8114611a0857600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220ebca934579bbd85dbff2f507dee202cafd0f2c54b14a757fb708246f752c5f8864736f6c63430007060033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "_removeDocument(string)": {
            "details": "Can only be executed by the owner of the contract.",
            "params": {
              "_name": "Name of the document. It should be unique always"
            }
          },
          "_setDocument(string,string)": {
            "details": "Can only be executed by the owner of the contract.",
            "params": {
              "_data": "Off-chain data of the document from where it is accessible to investors/advisors to read.",
              "_name": "Name of the document. It should be unique always"
            }
          },
          "getAllDocuments()": {
            "returns": {
              "_0": "string List of all documents names present in the contract."
            }
          },
          "getDocument(string)": {
            "params": {
              "_name": "Name of the document"
            },
            "returns": {
              "_0": "string The data associated with the document.",
              "_1": "uint256 the timestamp at which the document was last modified."
            }
          },
          "getDocumentCount()": {
            "returns": {
              "_0": "uint256 Count of the document names present in the contract."
            }
          },
          "getDocumentName(uint256)": {
            "returns": {
              "_0": "string Name of the document name."
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "title": "Standard implementation of ERC1643 Document management",
        "version": 1
      },
      "evm": {
        "bytecode": {
          "generatedSources": [],
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b5060006100216100c460201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100cc565b600033905090565b611a67806100db6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80639fa5f50b116100665780639fa5f50b1461010f578063c6b547e61461012d578063de7afa4b1461015d578063f2fde38b14610179578063f3494ae91461019557610093565b80633d1c227314610098578063715018a6146100b65780637ccb6a64146100c05780638da5cb5b146100f1575b600080fd5b6100a06101b1565b6040516100ad91906118db565b60405180910390f35b6100be6101be565b005b6100da60048036038101906100d59190611374565b61032b565b6040516100e8929190611809565b60405180910390f35b6100f961043b565b6040516101069190611786565b60405180910390f35b610117610464565b60405161012491906117a1565b60405180910390f35b6101476004803603810190610142919061142e565b610636565b60405161015491906117e7565b60405180910390f35b61017760048036038101906101729190611374565b610736565b005b610193600480360381019061018e919061134b565b610a83565b005b6101af60048036038101906101aa91906113b9565b610c75565b005b6000600380549050905090565b6101c6611019565b73ffffffffffffffffffffffffffffffffffffffff166101e461043b565b73ffffffffffffffffffffffffffffffffffffffff161461026d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6060600060018484604051610341929190611756565b908152602001604051809103902060010160018585604051610364929190611756565b908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff16818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104295780601f106103fe57610100808354040283529160200191610429565b820191906000526020600020905b81548152906001019060200180831161040c57829003601f168201915b50505050509150915091509250929050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060008060038054905090508181101561047e57600080fd5b60016003805490500381111561049a5760016003805490500390505b6000600183830301604002905060008167ffffffffffffffff811180156104c057600080fd5b506040519080825280601f01601f1916602001820160405280156104f35781602001600182028036833780820191505090505b5090506000602067ffffffffffffffff8111801561051057600080fd5b506040519080825280601f01601f1916602001820160405280156105435781602001600182028036833780820191505090505b50905060008590505b84811161062a576003818154811061056057fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105fe5780601f106105d3576101008083540402835291602001916105fe565b820191906000526020600020905b8154815290600101906020018083116105e157829003601f168201915b50505050509150610610848385611021565b61061982611082565b84039350808060010191505061054c565b50819550505050505090565b6060600380549050821061067f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106769061189b565b60405180910390fd5b6003828154811061068c57fe5b906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561072a5780601f106106ff5761010080835404028352916020019161072a565b820191906000526020600020905b81548152906001019060200180831161070d57829003601f168201915b50505050509050919050565b61073e611019565b73ffffffffffffffffffffffffffffffffffffffff1661075c61043b565b73ffffffffffffffffffffffffffffffffffffffff16146107e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600067ffffffffffffffff1660018383604051610803929190611756565b908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff161415610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b9061185b565b60405180910390fd5b60006001808484604051610889929190611756565b908152602001604051809103902060000160009054906101000a900463ffffffff160390506001600380549050038163ffffffff161461097f576003600160038054905003815481106108d857fe5b9060005260206000200160038263ffffffff16815481106108f557fe5b90600052602060002001908054600181600116156101000203166002900461091e9291906110c1565b5060018101600160038363ffffffff168154811061093857fe5b9060005260206000200160405161094f919061176f565b908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b600380548061098a57fe5b6001900381819060005260206000200160006109a69190611156565b905582826040516109b8929190611756565b60405180910390207f4b5338540b4d1c0f6dd0308a25f633b7ff60472f894d711cff9dd64e35c613b2600185856040516109f3929190611756565b9081526020016040518091039020600101604051610a119190611839565b60405180910390a260018383604051610a2b929190611756565b9081526020016040518091039020600080820160006101000a81549063ffffffff02191690556000820160046101000a81549067ffffffffffffffff0219169055600182016000610a7c9190611156565b5050505050565b610a8b611019565b73ffffffffffffffffffffffffffffffffffffffff16610aa961043b565b73ffffffffffffffffffffffffffffffffffffffff1614610b32576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611a0c6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610c7d611019565b73ffffffffffffffffffffffffffffffffffffffff16610c9b61043b565b73ffffffffffffffffffffffffffffffffffffffff1614610d24576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60008484905011610d6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d619061187b565b60405180910390fd5b60008282905011610db0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da7906118bb565b60405180910390fd5b600067ffffffffffffffff1660018585604051610dce929190611756565b908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff161415610e8a576003848490918060018154018082558091505060019003906000526020600020016000909192909192909192909192509190610e4192919061119e565b5060038054905060018585604051610e5a929190611756565b908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b604051806060016040528060018686604051610ea7929190611756565b908152602001604051809103902060000160009054906101000a900463ffffffff1663ffffffff1681526020014267ffffffffffffffff16815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525060018585604051610f3e929190611756565b908152602001604051809103902060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151816001019080519060200190610fbe92919061122c565b509050508383604051610fd2929190611756565b60405180910390207fbaa206e5ea800eb88bce099f453fee53295b793b9d5d1cfc4ce4b6db06a34f53838360405161100b9291906117c3565b60405180910390a250505050565b600033905090565b6000602083518161102e57fe5b0490506000602084518161103e57fe5b06111561104e5780806001019150505b60018101905060005b8181101561107b576020810284015185840152602085039450600181019050611057565b5050505050565b6000602082518161108f57fe5b0490506000602083518161109f57fe5b06146110ae5780806001019150505b8080600101915050602081029050919050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826110f75760008555611145565b82601f106111085780548555611145565b8280016001018555821561114557600052602060002091601f016020900482015b82811115611144578254825591600101919060010190611129565b5b50905061115291906112ba565b5090565b50805460018160011615610100020316600290046000825580601f1061117c575061119b565b601f01602090049060005260206000209081019061119a91906112ba565b5b50565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826111d4576000855561121b565b82601f106111ed57803560ff191683800117855561121b565b8280016001018555821561121b579182015b8281111561121a5782358255916020019190600101906111ff565b5b50905061122891906112ba565b5090565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261126257600085556112a9565b82601f1061127b57805160ff19168380011785556112a9565b828001600101855582156112a9579182015b828111156112a857825182559160200191906001019061128d565b5b5090506112b691906112ba565b5090565b5b808211156112d35760008160009055506001016112bb565b5090565b6000813590506112e6816119dd565b92915050565b60008083601f8401126112fe57600080fd5b8235905067ffffffffffffffff81111561131757600080fd5b60208301915083600182028301111561132f57600080fd5b9250929050565b600081359050611345816119f4565b92915050565b60006020828403121561135d57600080fd5b600061136b848285016112d7565b91505092915050565b6000806020838503121561138757600080fd5b600083013567ffffffffffffffff8111156113a157600080fd5b6113ad858286016112ec565b92509250509250929050565b600080600080604085870312156113cf57600080fd5b600085013567ffffffffffffffff8111156113e957600080fd5b6113f5878288016112ec565b9450945050602085013567ffffffffffffffff81111561141457600080fd5b611420878288016112ec565b925092505092959194509250565b60006020828403121561144057600080fd5b600061144e84828501611336565b91505092915050565b6114608161194e565b82525050565b60006114718261190b565b61147b8185611921565b935061148b818560208601611999565b611494816119cc565b840191505092915050565b60006114ab8385611932565b93506114b883858461198a565b6114c1836119cc565b840190509392505050565b60006114d88385611943565b93506114e583858461198a565b82840190509392505050565b60006114fc82611916565b6115068185611932565b9350611516818560208601611999565b61151f816119cc565b840191505092915050565b600081546001811660008114611547576001811461156d576115b1565b607f60028304166115588187611932565b955060ff1983168652602086019350506115b1565b6002820461157b8187611932565b9550611586856118f6565b60005b828110156115a857815481890152600182019150602081019050611589565b80880195505050505b505092915050565b6000815460018116600081146115d657600181146115fb5761163f565b607f60028304166115e78187611943565b955060ff198316865280860193505061163f565b600282046116098187611943565b9550611614856118f6565b60005b8281101561163657815481890152600182019150602081019050611617565b82880195505050505b505092915050565b6000611654601583611932565b91507f446f63756d656e742073686f756c6420657869737400000000000000000000006000830152602082019050919050565b6000611694601883611932565b91507f5a65726f206e616d65206973206e6f7420616c6c6f77656400000000000000006000830152602082019050919050565b60006116d4601383611932565b91507f496e646578206f7574206f6620626f756e6473000000000000000000000000006000830152602082019050919050565b6000611714601a83611932565b91507f53686f756c64206e6f74206265206120656d70747920646174610000000000006000830152602082019050919050565b61175081611980565b82525050565b60006117638284866114cc565b91508190509392505050565b600061177b82846115b9565b915081905092915050565b600060208201905061179b6000830184611457565b92915050565b600060208201905081810360008301526117bb8184611466565b905092915050565b600060208201905081810360008301526117de81848661149f565b90509392505050565b6000602082019050818103600083015261180181846114f1565b905092915050565b6000604082019050818103600083015261182381856114f1565b90506118326020830184611747565b9392505050565b60006020820190508181036000830152611853818461152a565b905092915050565b6000602082019050818103600083015261187481611647565b9050919050565b6000602082019050818103600083015261189481611687565b9050919050565b600060208201905081810360008301526118b4816116c7565b9050919050565b600060208201905081810360008301526118d481611707565b9050919050565b60006020820190506118f06000830184611747565b92915050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061195982611960565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156119b757808201518184015260208101905061199c565b838111156119c6576000848401525b50505050565b6000601f19601f8301169050919050565b6119e68161194e565b81146119f157600080fd5b50565b6119fd81611980565b8114611a0857600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220ebca934579bbd85dbff2f507dee202cafd0f2c54b14a757fb708246f752c5f8864736f6c63430007060033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0x21 PUSH2 0xC4 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH2 0xCC JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1A67 DUP1 PUSH2 0xDB PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9FA5F50B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x9FA5F50B EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0xC6B547E6 EQ PUSH2 0x12D JUMPI DUP1 PUSH4 0xDE7AFA4B EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0xF3494AE9 EQ PUSH2 0x195 JUMPI PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH4 0x3D1C2273 EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x7CCB6A64 EQ PUSH2 0xC0 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xF1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x1B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0x18DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBE PUSH2 0x1BE JUMP JUMPDEST STOP JUMPDEST PUSH2 0xDA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD5 SWAP2 SWAP1 PUSH2 0x1374 JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE8 SWAP3 SWAP2 SWAP1 PUSH2 0x1809 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF9 PUSH2 0x43B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x106 SWAP2 SWAP1 PUSH2 0x1786 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x117 PUSH2 0x464 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP2 SWAP1 PUSH2 0x17A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x147 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x142 SWAP2 SWAP1 PUSH2 0x142E JUMP JUMPDEST PUSH2 0x636 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x154 SWAP2 SWAP1 PUSH2 0x17E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x177 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x172 SWAP2 SWAP1 PUSH2 0x1374 JUMP JUMPDEST PUSH2 0x736 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x193 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18E SWAP2 SWAP1 PUSH2 0x134B JUMP JUMPDEST PUSH2 0xA83 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AA SWAP2 SWAP1 PUSH2 0x13B9 JUMP JUMPDEST PUSH2 0xC75 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x1019 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1E4 PUSH2 0x43B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x26D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x341 SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x364 SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x4 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x429 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x429 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x40C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x47E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SUB DUP2 GT ISZERO PUSH2 0x49A JUMPI PUSH1 0x1 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SUB SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 DUP4 SUB ADD PUSH1 0x40 MUL SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x4C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4F3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x510 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x543 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP6 SWAP1 POP JUMPDEST DUP5 DUP2 GT PUSH2 0x62A JUMPI PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x560 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x5FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP PUSH2 0x610 DUP5 DUP4 DUP6 PUSH2 0x1021 JUMP JUMPDEST PUSH2 0x619 DUP3 PUSH2 0x1082 JUMP JUMPDEST DUP5 SUB SWAP4 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x54C JUMP JUMPDEST POP DUP2 SWAP6 POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD SWAP1 POP DUP3 LT PUSH2 0x67F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x676 SWAP1 PUSH2 0x189B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x68C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x72A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6FF JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x72A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x70D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x73E PUSH2 0x1019 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x75C PUSH2 0x43B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x7E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x803 SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x4 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x874 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x86B SWAP1 PUSH2 0x185B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x889 SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND SUB SWAP1 POP PUSH1 0x1 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SUB DUP2 PUSH4 0xFFFFFFFF AND EQ PUSH2 0x97F JUMPI PUSH1 0x3 PUSH1 0x1 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SUB DUP2 SLOAD DUP2 LT PUSH2 0x8D8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x3 DUP3 PUSH4 0xFFFFFFFF AND DUP2 SLOAD DUP2 LT PUSH2 0x8F5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV PUSH2 0x91E SWAP3 SWAP2 SWAP1 PUSH2 0x10C1 JUMP JUMPDEST POP PUSH1 0x1 DUP2 ADD PUSH1 0x1 PUSH1 0x3 DUP4 PUSH4 0xFFFFFFFF AND DUP2 SLOAD DUP2 LT PUSH2 0x938 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x40 MLOAD PUSH2 0x94F SWAP2 SWAP1 PUSH2 0x176F JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x3 DUP1 SLOAD DUP1 PUSH2 0x98A JUMPI INVALID JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x9A6 SWAP2 SWAP1 PUSH2 0x1156 JUMP JUMPDEST SWAP1 SSTORE DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x9B8 SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH32 0x4B5338540B4D1C0F6DD0308A25F633B7FF60472F894D711CFF9DD64E35C613B2 PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x9F3 SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH1 0x40 MLOAD PUSH2 0xA11 SWAP2 SWAP1 PUSH2 0x1839 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xA2B SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x4 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 PUSH2 0xA7C SWAP2 SWAP1 PUSH2 0x1156 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA8B PUSH2 0x1019 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xAA9 PUSH2 0x43B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xBB8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1A0C PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0xC7D PUSH2 0x1019 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC9B PUSH2 0x43B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD24 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP5 SWAP1 POP GT PUSH2 0xD6A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD61 SWAP1 PUSH2 0x187B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 SWAP1 POP GT PUSH2 0xDB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDA7 SWAP1 PUSH2 0x18BB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0xDCE SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x4 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xE8A JUMPI PUSH1 0x3 DUP5 DUP5 SWAP1 SWAP2 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP3 POP SWAP2 SWAP1 PUSH2 0xE41 SWAP3 SWAP2 SWAP1 PUSH2 0x119E JUMP JUMPDEST POP PUSH1 0x3 DUP1 SLOAD SWAP1 POP PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0xE5A SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0xEA7 SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP2 MSTORE POP PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0xF3E SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x4 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0xFBE SWAP3 SWAP2 SWAP1 PUSH2 0x122C JUMP JUMPDEST POP SWAP1 POP POP DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFD2 SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH32 0xBAA206E5EA800EB88BCE099F453FEE53295B793B9D5D1CFC4CE4B6DB06A34F53 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x100B SWAP3 SWAP2 SWAP1 PUSH2 0x17C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD DUP2 PUSH2 0x102E JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH1 0x20 DUP5 MLOAD DUP2 PUSH2 0x103E JUMPI INVALID JUMPDEST MOD GT ISZERO PUSH2 0x104E JUMPI DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x107B JUMPI PUSH1 0x20 DUP2 MUL DUP5 ADD MLOAD DUP6 DUP5 ADD MSTORE PUSH1 0x20 DUP6 SUB SWAP5 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1057 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MLOAD DUP2 PUSH2 0x108F JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD DUP2 PUSH2 0x109F JUMPI INVALID JUMPDEST MOD EQ PUSH2 0x10AE JUMPI DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH1 0x20 DUP2 MUL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x10F7 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x1145 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1108 JUMPI DUP1 SLOAD DUP6 SSTORE PUSH2 0x1145 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1145 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1144 JUMPI DUP3 SLOAD DUP3 SSTORE SWAP2 PUSH1 0x1 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1129 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x1152 SWAP2 SWAP1 PUSH2 0x12BA JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x117C JUMPI POP PUSH2 0x119B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x119A SWAP2 SWAP1 PUSH2 0x12BA JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x11D4 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x121B JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x11ED JUMPI DUP1 CALLDATALOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x121B JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x121B JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x121A JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x11FF JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x1228 SWAP2 SWAP1 PUSH2 0x12BA JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1262 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x12A9 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x127B JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x12A9 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x12A9 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x12A8 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x128D JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x12B6 SWAP2 SWAP1 PUSH2 0x12BA JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x12D3 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x12BB JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x12E6 DUP2 PUSH2 0x19DD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x12FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x132F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1345 DUP2 PUSH2 0x19F4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x135D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x136B DUP5 DUP3 DUP6 ADD PUSH2 0x12D7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13AD DUP6 DUP3 DUP7 ADD PUSH2 0x12EC JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x13CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13F5 DUP8 DUP3 DUP9 ADD PUSH2 0x12EC JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1420 DUP8 DUP3 DUP9 ADD PUSH2 0x12EC JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x144E DUP5 DUP3 DUP6 ADD PUSH2 0x1336 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1460 DUP2 PUSH2 0x194E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1471 DUP3 PUSH2 0x190B JUMP JUMPDEST PUSH2 0x147B DUP2 DUP6 PUSH2 0x1921 JUMP JUMPDEST SWAP4 POP PUSH2 0x148B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1999 JUMP JUMPDEST PUSH2 0x1494 DUP2 PUSH2 0x19CC JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14AB DUP4 DUP6 PUSH2 0x1932 JUMP JUMPDEST SWAP4 POP PUSH2 0x14B8 DUP4 DUP6 DUP5 PUSH2 0x198A JUMP JUMPDEST PUSH2 0x14C1 DUP4 PUSH2 0x19CC JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14D8 DUP4 DUP6 PUSH2 0x1943 JUMP JUMPDEST SWAP4 POP PUSH2 0x14E5 DUP4 DUP6 DUP5 PUSH2 0x198A JUMP JUMPDEST DUP3 DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14FC DUP3 PUSH2 0x1916 JUMP JUMPDEST PUSH2 0x1506 DUP2 DUP6 PUSH2 0x1932 JUMP JUMPDEST SWAP4 POP PUSH2 0x1516 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1999 JUMP JUMPDEST PUSH2 0x151F DUP2 PUSH2 0x19CC JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH1 0x1 DUP2 AND PUSH1 0x0 DUP2 EQ PUSH2 0x1547 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x156D JUMPI PUSH2 0x15B1 JUMP JUMPDEST PUSH1 0x7F PUSH1 0x2 DUP4 DIV AND PUSH2 0x1558 DUP2 DUP8 PUSH2 0x1932 JUMP JUMPDEST SWAP6 POP PUSH1 0xFF NOT DUP4 AND DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP4 POP POP PUSH2 0x15B1 JUMP JUMPDEST PUSH1 0x2 DUP3 DIV PUSH2 0x157B DUP2 DUP8 PUSH2 0x1932 JUMP JUMPDEST SWAP6 POP PUSH2 0x1586 DUP6 PUSH2 0x18F6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x15A8 JUMPI DUP2 SLOAD DUP2 DUP10 ADD MSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1589 JUMP JUMPDEST DUP1 DUP9 ADD SWAP6 POP POP POP POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH1 0x1 DUP2 AND PUSH1 0x0 DUP2 EQ PUSH2 0x15D6 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x15FB JUMPI PUSH2 0x163F JUMP JUMPDEST PUSH1 0x7F PUSH1 0x2 DUP4 DIV AND PUSH2 0x15E7 DUP2 DUP8 PUSH2 0x1943 JUMP JUMPDEST SWAP6 POP PUSH1 0xFF NOT DUP4 AND DUP7 MSTORE DUP1 DUP7 ADD SWAP4 POP POP PUSH2 0x163F JUMP JUMPDEST PUSH1 0x2 DUP3 DIV PUSH2 0x1609 DUP2 DUP8 PUSH2 0x1943 JUMP JUMPDEST SWAP6 POP PUSH2 0x1614 DUP6 PUSH2 0x18F6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1636 JUMPI DUP2 SLOAD DUP2 DUP10 ADD MSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1617 JUMP JUMPDEST DUP3 DUP9 ADD SWAP6 POP POP POP POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1654 PUSH1 0x15 DUP4 PUSH2 0x1932 JUMP JUMPDEST SWAP2 POP PUSH32 0x446F63756D656E742073686F756C642065786973740000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1694 PUSH1 0x18 DUP4 PUSH2 0x1932 JUMP JUMPDEST SWAP2 POP PUSH32 0x5A65726F206E616D65206973206E6F7420616C6C6F7765640000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D4 PUSH1 0x13 DUP4 PUSH2 0x1932 JUMP JUMPDEST SWAP2 POP PUSH32 0x496E646578206F7574206F6620626F756E647300000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1714 PUSH1 0x1A DUP4 PUSH2 0x1932 JUMP JUMPDEST SWAP2 POP PUSH32 0x53686F756C64206E6F74206265206120656D7074792064617461000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1750 DUP2 PUSH2 0x1980 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1763 DUP3 DUP5 DUP7 PUSH2 0x14CC JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x177B DUP3 DUP5 PUSH2 0x15B9 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x179B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1457 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x17BB DUP2 DUP5 PUSH2 0x1466 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x17DE DUP2 DUP5 DUP7 PUSH2 0x149F JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1801 DUP2 DUP5 PUSH2 0x14F1 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1823 DUP2 DUP6 PUSH2 0x14F1 JUMP JUMPDEST SWAP1 POP PUSH2 0x1832 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1747 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1853 DUP2 DUP5 PUSH2 0x152A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1874 DUP2 PUSH2 0x1647 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1894 DUP2 PUSH2 0x1687 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x18B4 DUP2 PUSH2 0x16C7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x18D4 DUP2 PUSH2 0x1707 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x18F0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1747 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1959 DUP3 PUSH2 0x1960 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x19B7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x199C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x19C6 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19E6 DUP2 PUSH2 0x194E JUMP JUMPDEST DUP2 EQ PUSH2 0x19F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x19FD DUP2 PUSH2 0x1980 JUMP JUMPDEST DUP2 EQ PUSH2 0x1A08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373A2646970667358221220EBCA934579BB 0xD8 0x5D 0xBF CALLCODE CREATE2 SMOD 0xDE 0xE2 MUL 0xCA REVERT 0xF 0x2C SLOAD 0xB1 0x4A PUSH22 0x7FB708246F752C5F8864736F6C634300070600330000 ",
          "sourceMap": "257:4696:13:-:0;;;874:33;;;;;;;;;;884:17:1;904:12;:10;;;:12;;:::i;:::-;884:32;;935:9;926:6;;:18;;;;;;;;;;;;;;;;;;992:9;959:43;;988:1;959:43;;;;;;;;;;;;850:159;257:4696:13;;598:104:8;651:15;685:10;678:17;;598:104;:::o;257:4696:13:-;;;;;;;"
        },
        "deployedBytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:13708:33",
                "statements": [
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "59:87:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "69:29:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "91:6:33"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "78:12:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "78:20:33"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "69:5:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "134:5:33"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "107:26:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "107:33:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "107:33:33"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "37:6:33",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "45:3:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "53:5:33",
                        "type": ""
                      }
                    ],
                    "src": "7:139:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "241:277:33",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "290:16:33",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "299:1:33",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "302:1:33",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "292:6:33"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "292:12:33"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "292:12:33"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "269:6:33"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "277:4:33",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "265:3:33"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "265:17:33"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "284:3:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "261:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "261:27:33"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "254:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "254:35:33"
                          },
                          "nodeType": "YulIf",
                          "src": "251:2:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "315:30:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "338:6:33"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "325:12:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "325:20:33"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "315:6:33"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "388:16:33",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "397:1:33",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "400:1:33",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "390:6:33"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "390:12:33"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "390:12:33"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "360:6:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "368:18:33",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "357:2:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "357:30:33"
                          },
                          "nodeType": "YulIf",
                          "src": "354:2:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "413:29:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "429:6:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "437:4:33",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "425:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "425:17:33"
                          },
                          "variableNames": [
                            {
                              "name": "arrayPos",
                              "nodeType": "YulIdentifier",
                              "src": "413:8:33"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "496:16:33",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "505:1:33",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "508:1:33",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "498:6:33"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "498:12:33"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "498:12:33"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "arrayPos",
                                    "nodeType": "YulIdentifier",
                                    "src": "461:8:33"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "475:6:33"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "483:4:33",
                                        "type": "",
                                        "value": "0x01"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mul",
                                      "nodeType": "YulIdentifier",
                                      "src": "471:3:33"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "471:17:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "457:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "457:32:33"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "491:3:33"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "454:2:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "454:41:33"
                          },
                          "nodeType": "YulIf",
                          "src": "451:2:33"
                        }
                      ]
                    },
                    "name": "abi_decode_t_string_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "208:6:33",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "216:3:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "arrayPos",
                        "nodeType": "YulTypedName",
                        "src": "224:8:33",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "234:6:33",
                        "type": ""
                      }
                    ],
                    "src": "166:352:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "576:87:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "586:29:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "608:6:33"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "595:12:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "595:20:33"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "586:5:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "651:5:33"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "624:26:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "624:33:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "624:33:33"
                        }
                      ]
                    },
                    "name": "abi_decode_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "554:6:33",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "562:3:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "570:5:33",
                        "type": ""
                      }
                    ],
                    "src": "524:139:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "735:196:33",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "781:16:33",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "790:1:33",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "793:1:33",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "783:6:33"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "783:12:33"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "783:12:33"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "756:7:33"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "765:9:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "752:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "752:23:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "777:2:33",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "748:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "748:32:33"
                          },
                          "nodeType": "YulIf",
                          "src": "745:2:33"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "807:117:33",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "822:15:33",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "836:1:33",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "826:6:33",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "851:63:33",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "886:9:33"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "897:6:33"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "882:3:33"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "882:22:33"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "906:7:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "861:20:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "861:53:33"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "851:6:33"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "705:9:33",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "716:7:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "728:6:33",
                        "type": ""
                      }
                    ],
                    "src": "669:262:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1023:309:33",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1069:16:33",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1078:1:33",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1081:1:33",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1071:6:33"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1071:12:33"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1071:12:33"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1044:7:33"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1053:9:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1040:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1040:23:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1065:2:33",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1036:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1036:32:33"
                          },
                          "nodeType": "YulIf",
                          "src": "1033:2:33"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "1095:230:33",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1110:45:33",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1141:9:33"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1152:1:33",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1137:3:33"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1137:17:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1124:12:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1124:31:33"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "1114:6:33",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1202:16:33",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1211:1:33",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1214:1:33",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1204:6:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1204:12:33"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1204:12:33"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1174:6:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1182:18:33",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1171:2:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1171:30:33"
                              },
                              "nodeType": "YulIf",
                              "src": "1168:2:33"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1232:83:33",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1287:9:33"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1298:6:33"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1283:3:33"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1283:22:33"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1307:7:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_string_calldata_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "1250:32:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1250:65:33"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1232:6:33"
                                },
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1240:6:33"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "985:9:33",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "996:7:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1008:6:33",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1016:6:33",
                        "type": ""
                      }
                    ],
                    "src": "937:395:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1461:550:33",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1507:16:33",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1516:1:33",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1519:1:33",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1509:6:33"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1509:12:33"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1509:12:33"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1482:7:33"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1491:9:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1478:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1478:23:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1503:2:33",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1474:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1474:32:33"
                          },
                          "nodeType": "YulIf",
                          "src": "1471:2:33"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "1533:230:33",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1548:45:33",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1579:9:33"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1590:1:33",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1575:3:33"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1575:17:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1562:12:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1562:31:33"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "1552:6:33",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1640:16:33",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1649:1:33",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1652:1:33",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1642:6:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1642:12:33"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1642:12:33"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1612:6:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1620:18:33",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1609:2:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1609:30:33"
                              },
                              "nodeType": "YulIf",
                              "src": "1606:2:33"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1670:83:33",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1725:9:33"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1736:6:33"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1721:3:33"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1721:22:33"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1745:7:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_string_calldata_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "1688:32:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1688:65:33"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1670:6:33"
                                },
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1678:6:33"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "1773:231:33",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1788:46:33",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1819:9:33"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1830:2:33",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1815:3:33"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1815:18:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1802:12:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1802:32:33"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "1792:6:33",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1881:16:33",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1890:1:33",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1893:1:33",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1883:6:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1883:12:33"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1883:12:33"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1853:6:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1861:18:33",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1850:2:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1850:30:33"
                              },
                              "nodeType": "YulIf",
                              "src": "1847:2:33"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1911:83:33",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1966:9:33"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1977:6:33"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1962:3:33"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1962:22:33"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1986:7:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_string_calldata_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "1929:32:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1929:65:33"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "1911:6:33"
                                },
                                {
                                  "name": "value3",
                                  "nodeType": "YulIdentifier",
                                  "src": "1919:6:33"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_calldata_ptrt_string_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1407:9:33",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1418:7:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1430:6:33",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1438:6:33",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "1446:6:33",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "1454:6:33",
                        "type": ""
                      }
                    ],
                    "src": "1338:673:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2083:196:33",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2129:16:33",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2138:1:33",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2141:1:33",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2131:6:33"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2131:12:33"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2131:12:33"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2104:7:33"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2113:9:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2100:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2100:23:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2125:2:33",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2096:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2096:32:33"
                          },
                          "nodeType": "YulIf",
                          "src": "2093:2:33"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "2155:117:33",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2170:15:33",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2184:1:33",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "2174:6:33",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2199:63:33",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2234:9:33"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2245:6:33"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2230:3:33"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2230:22:33"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2254:7:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "2209:20:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2209:53:33"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "2199:6:33"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2053:9:33",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2064:7:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2076:6:33",
                        "type": ""
                      }
                    ],
                    "src": "2017:262:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2350:53:33",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2367:3:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2390:5:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "2372:17:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2372:24:33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2360:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2360:37:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2360:37:33"
                        }
                      ]
                    },
                    "name": "abi_encode_t_address_to_t_address_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2338:5:33",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2345:3:33",
                        "type": ""
                      }
                    ],
                    "src": "2285:118:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2499:270:33",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2509:52:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2555:5:33"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_bytes_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "2523:31:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2523:38:33"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "2513:6:33",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2570:77:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2635:3:33"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2640:6:33"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "2577:57:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2577:70:33"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "2570:3:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2682:5:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2689:4:33",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2678:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2678:16:33"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2696:3:33"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2701:6:33"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "2656:21:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2656:52:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2656:52:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2717:46:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2728:3:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2755:6:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nodeType": "YulIdentifier",
                                  "src": "2733:21:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2733:29:33"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2724:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2724:39:33"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "2717:3:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2480:5:33",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2487:3:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2495:3:33",
                        "type": ""
                      }
                    ],
                    "src": "2409:360:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2901:202:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2911:78:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2977:3:33"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2982:6:33"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "2918:58:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2918:71:33"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "2911:3:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "start",
                                "nodeType": "YulIdentifier",
                                "src": "3023:5:33"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3030:3:33"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3035:6:33"
                              }
                            ],
                            "functionName": {
                              "name": "copy_calldata_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "2999:23:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2999:43:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2999:43:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3051:46:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3062:3:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "3089:6:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nodeType": "YulIdentifier",
                                  "src": "3067:21:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3067:29:33"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3058:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3058:39:33"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "3051:3:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "start",
                        "nodeType": "YulTypedName",
                        "src": "2874:5:33",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "2881:6:33",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2889:3:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2897:3:33",
                        "type": ""
                      }
                    ],
                    "src": "2799:304:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3253:197:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3263:96:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3347:3:33"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3352:6:33"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "3270:76:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3270:89:33"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "3263:3:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "start",
                                "nodeType": "YulIdentifier",
                                "src": "3393:5:33"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3400:3:33"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3405:6:33"
                              }
                            ],
                            "functionName": {
                              "name": "copy_calldata_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "3369:23:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3369:43:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3369:43:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3421:23:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3432:3:33"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3437:6:33"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3428:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3428:16:33"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "3421:3:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "start",
                        "nodeType": "YulTypedName",
                        "src": "3226:5:33",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "3233:6:33",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "3241:3:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3249:3:33",
                        "type": ""
                      }
                    ],
                    "src": "3133:317:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3548:272:33",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3558:53:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3605:5:33"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_string_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "3572:32:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3572:39:33"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "3562:6:33",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3620:78:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3686:3:33"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3691:6:33"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "3627:58:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3627:71:33"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "3620:3:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3733:5:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3740:4:33",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3729:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3729:16:33"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3747:3:33"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3752:6:33"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "3707:21:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3707:52:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3707:52:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3768:46:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3779:3:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "3806:6:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nodeType": "YulIdentifier",
                                  "src": "3784:21:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3784:29:33"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3775:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3775:39:33"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "3768:3:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3529:5:33",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "3536:3:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3544:3:33",
                        "type": ""
                      }
                    ],
                    "src": "3456:364:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3939:848:33",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3949:29:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3972:5:33"
                              }
                            ],
                            "functionName": {
                              "name": "sload",
                              "nodeType": "YulIdentifier",
                              "src": "3966:5:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3966:12:33"
                          },
                          "variables": [
                            {
                              "name": "slotValue",
                              "nodeType": "YulTypedName",
                              "src": "3953:9:33",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4027:274:33",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "4073:42:33",
                                    "value": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "slotValue",
                                              "nodeType": "YulIdentifier",
                                              "src": "4095:9:33"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "4106:1:33",
                                              "type": "",
                                              "value": "2"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "div",
                                            "nodeType": "YulIdentifier",
                                            "src": "4091:3:33"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4091:17:33"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4110:4:33",
                                          "type": "",
                                          "value": "0x7f"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "4087:3:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4087:28:33"
                                    },
                                    "variables": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulTypedName",
                                        "src": "4077:6:33",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4128:78:33",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "4194:3:33"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "4199:6:33"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                                        "nodeType": "YulIdentifier",
                                        "src": "4135:58:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4135:71:33"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "4128:3:33"
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "4226:3:33"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "slotValue",
                                              "nodeType": "YulIdentifier",
                                              "src": "4235:9:33"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "4250:4:33",
                                                  "type": "",
                                                  "value": "0xff"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nodeType": "YulIdentifier",
                                                "src": "4246:3:33"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "4246:9:33"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "4231:3:33"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4231:25:33"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "4219:6:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4219:38:33"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4219:38:33"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4270:21:33",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "4281:3:33"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4286:4:33",
                                          "type": "",
                                          "value": "0x20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4277:3:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4277:14:33"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "4270:3:33"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "4020:281:33",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4025:1:33",
                                "type": "",
                                "value": "0"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4317:464:33",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "4362:31:33",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "slotValue",
                                          "nodeType": "YulIdentifier",
                                          "src": "4380:9:33"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4391:1:33",
                                          "type": "",
                                          "value": "2"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "div",
                                        "nodeType": "YulIdentifier",
                                        "src": "4376:3:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4376:17:33"
                                    },
                                    "variables": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulTypedName",
                                        "src": "4366:6:33",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4406:78:33",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "4472:3:33"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "4477:6:33"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                                        "nodeType": "YulIdentifier",
                                        "src": "4413:58:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4413:71:33"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "4406:3:33"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "4497:53:33",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "value",
                                          "nodeType": "YulIdentifier",
                                          "src": "4544:5:33"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_t_string_storage",
                                        "nodeType": "YulIdentifier",
                                        "src": "4512:31:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4512:38:33"
                                    },
                                    "variables": [
                                      {
                                        "name": "dataPos",
                                        "nodeType": "YulTypedName",
                                        "src": "4501:7:33",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "4563:10:33",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4572:1:33",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "4567:1:33",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "4630:110:33",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "pos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "4659:3:33"
                                                  },
                                                  {
                                                    "name": "i",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "4664:1:33"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "4655:3:33"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "4655:11:33"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "dataPos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "4674:7:33"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "sload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "4668:5:33"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "4668:14:33"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "4648:6:33"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "4648:35:33"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "4648:35:33"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "4700:26:33",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dataPos",
                                                "nodeType": "YulIdentifier",
                                                "src": "4715:7:33"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "4724:1:33",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "4711:3:33"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "4711:15:33"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dataPos",
                                              "nodeType": "YulIdentifier",
                                              "src": "4700:7:33"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "4597:1:33"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "4600:6:33"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "4594:2:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4594:13:33"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "4608:21:33",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "4610:17:33",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "4619:1:33"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "4622:4:33",
                                                "type": "",
                                                "value": "0x20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "4615:3:33"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "4615:12:33"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "4610:1:33"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "4590:3:33",
                                      "statements": []
                                    },
                                    "src": "4586:154:33"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4753:18:33",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "4764:3:33"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "4769:1:33"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4760:3:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4760:11:33"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "4753:3:33"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "4310:471:33",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4315:1:33",
                                "type": "",
                                "value": "1"
                              }
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "3998:9:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4009:1:33",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3994:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3994:17:33"
                          },
                          "nodeType": "YulSwitch",
                          "src": "3987:794:33"
                        }
                      ]
                    },
                    "name": "abi_encode_t_string_storage_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3920:5:33",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "3927:3:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "3935:3:33",
                        "type": ""
                      }
                    ],
                    "src": "3850:937:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4924:891:33",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4934:29:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4957:5:33"
                              }
                            ],
                            "functionName": {
                              "name": "sload",
                              "nodeType": "YulIdentifier",
                              "src": "4951:5:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4951:12:33"
                          },
                          "variables": [
                            {
                              "name": "slotValue",
                              "nodeType": "YulTypedName",
                              "src": "4938:9:33",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5012:294:33",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "5058:42:33",
                                    "value": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "slotValue",
                                              "nodeType": "YulIdentifier",
                                              "src": "5080:9:33"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "5091:1:33",
                                              "type": "",
                                              "value": "2"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "div",
                                            "nodeType": "YulIdentifier",
                                            "src": "5076:3:33"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5076:17:33"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5095:4:33",
                                          "type": "",
                                          "value": "0x7f"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "5072:3:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5072:28:33"
                                    },
                                    "variables": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulTypedName",
                                        "src": "5062:6:33",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "5113:96:33",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "5197:3:33"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "5202:6:33"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
                                        "nodeType": "YulIdentifier",
                                        "src": "5120:76:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5120:89:33"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "5113:3:33"
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "5229:3:33"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "slotValue",
                                              "nodeType": "YulIdentifier",
                                              "src": "5238:9:33"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "5253:4:33",
                                                  "type": "",
                                                  "value": "0xff"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nodeType": "YulIdentifier",
                                                "src": "5249:3:33"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "5249:9:33"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "5234:3:33"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5234:25:33"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "5222:6:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5222:38:33"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5222:38:33"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "5273:23:33",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "5284:3:33"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "5289:6:33"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5280:3:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5280:16:33"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "5273:3:33"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "5005:301:33",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5010:1:33",
                                "type": "",
                                "value": "0"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5322:487:33",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "5367:31:33",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "slotValue",
                                          "nodeType": "YulIdentifier",
                                          "src": "5385:9:33"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5396:1:33",
                                          "type": "",
                                          "value": "2"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "div",
                                        "nodeType": "YulIdentifier",
                                        "src": "5381:3:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5381:17:33"
                                    },
                                    "variables": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulTypedName",
                                        "src": "5371:6:33",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "5411:96:33",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "5495:3:33"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "5500:6:33"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
                                        "nodeType": "YulIdentifier",
                                        "src": "5418:76:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5418:89:33"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "5411:3:33"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "5520:53:33",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "value",
                                          "nodeType": "YulIdentifier",
                                          "src": "5567:5:33"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_t_string_storage",
                                        "nodeType": "YulIdentifier",
                                        "src": "5535:31:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5535:38:33"
                                    },
                                    "variables": [
                                      {
                                        "name": "dataPos",
                                        "nodeType": "YulTypedName",
                                        "src": "5524:7:33",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "5586:10:33",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5595:1:33",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "5590:1:33",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "5653:110:33",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "pos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "5682:3:33"
                                                  },
                                                  {
                                                    "name": "i",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "5687:1:33"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "5678:3:33"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "5678:11:33"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "dataPos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "5697:7:33"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "sload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "5691:5:33"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "5691:14:33"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "5671:6:33"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "5671:35:33"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "5671:35:33"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "5723:26:33",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dataPos",
                                                "nodeType": "YulIdentifier",
                                                "src": "5738:7:33"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "5747:1:33",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "5734:3:33"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "5734:15:33"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dataPos",
                                              "nodeType": "YulIdentifier",
                                              "src": "5723:7:33"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "5620:1:33"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "5623:6:33"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "5617:2:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5617:13:33"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "5631:21:33",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "5633:17:33",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "5642:1:33"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "5645:4:33",
                                                "type": "",
                                                "value": "0x20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "5638:3:33"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "5638:12:33"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "5633:1:33"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "5613:3:33",
                                      "statements": []
                                    },
                                    "src": "5609:154:33"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "5776:23:33",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "5787:3:33"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "5792:6:33"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "5783:3:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5783:16:33"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "5776:3:33"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "5315:494:33",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5320:1:33",
                                "type": "",
                                "value": "1"
                              }
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "4983:9:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4994:1:33",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "4979:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4979:17:33"
                          },
                          "nodeType": "YulSwitch",
                          "src": "4972:837:33"
                        }
                      ]
                    },
                    "name": "abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "4905:5:33",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "4912:3:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "4920:3:33",
                        "type": ""
                      }
                    ],
                    "src": "4817:998:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5967:173:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5977:74:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6043:3:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6048:2:33",
                                "type": "",
                                "value": "21"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "5984:58:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5984:67:33"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "5977:3:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "6072:3:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6077:1:33",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6068:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6068:11:33"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6081:23:33",
                                "type": "",
                                "value": "Document should exist"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6061:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6061:44:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6061:44:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6115:19:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6126:3:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6131:2:33",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6122:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6122:12:33"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "6115:3:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_496331db80b155180d05b6a531d7f1b02fadcefbbb3b193f6eb1a638212ac42d_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "5955:3:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "5963:3:33",
                        "type": ""
                      }
                    ],
                    "src": "5821:319:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6292:176:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6302:74:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6368:3:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6373:2:33",
                                "type": "",
                                "value": "24"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "6309:58:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6309:67:33"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "6302:3:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "6397:3:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6402:1:33",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6393:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6393:11:33"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6406:26:33",
                                "type": "",
                                "value": "Zero name is not allowed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6386:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6386:47:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6386:47:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6443:19:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6454:3:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6459:2:33",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6450:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6450:12:33"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "6443:3:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_825bb37adeb4acd67fd39594e8bb7b664749b0fd3dbab4af37829bd3a3317daf_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "6280:3:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "6288:3:33",
                        "type": ""
                      }
                    ],
                    "src": "6146:322:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6620:171:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6630:74:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6696:3:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6701:2:33",
                                "type": "",
                                "value": "19"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "6637:58:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6637:67:33"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "6630:3:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "6725:3:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6730:1:33",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6721:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6721:11:33"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6734:21:33",
                                "type": "",
                                "value": "Index out of bounds"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6714:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6714:42:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6714:42:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6766:19:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6777:3:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6782:2:33",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6773:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6773:12:33"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "6766:3:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "6608:3:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "6616:3:33",
                        "type": ""
                      }
                    ],
                    "src": "6474:317:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6943:178:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6953:74:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7019:3:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7024:2:33",
                                "type": "",
                                "value": "26"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "6960:58:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6960:67:33"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "6953:3:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7048:3:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7053:1:33",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7044:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7044:11:33"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7057:28:33",
                                "type": "",
                                "value": "Should not be a empty data"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7037:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7037:49:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7037:49:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7096:19:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7107:3:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7112:2:33",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7103:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7103:12:33"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "7096:3:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_e31a92451aef3650bf3c4422558f959d1c33519658c6d3694cc770d028876c3f_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "6931:3:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "6939:3:33",
                        "type": ""
                      }
                    ],
                    "src": "6797:324:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7192:53:33",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7209:3:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "7232:5:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "7214:17:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7214:24:33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7202:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7202:37:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7202:37:33"
                        }
                      ]
                    },
                    "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "7180:5:33",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "7187:3:33",
                        "type": ""
                      }
                    ],
                    "src": "7127:118:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7397:149:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7408:112:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7499:6:33"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "7507:6:33"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7516:3:33"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "7415:83:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7415:105:33"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "7408:3:33"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7530:10:33",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "7537:3:33"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "7530:3:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_string_calldata_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "7368:3:33",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7374:6:33",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7382:6:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "7393:3:33",
                        "type": ""
                      }
                    ],
                    "src": "7251:295:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7685:136:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7696:99:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7782:6:33"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7791:3:33"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "7703:78:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7703:92:33"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "7696:3:33"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7805:10:33",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "7812:3:33"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "7805:3:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_string_storage__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "7664:3:33",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7670:6:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "7681:3:33",
                        "type": ""
                      }
                    ],
                    "src": "7552:269:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7925:124:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7935:26:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7947:9:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7958:2:33",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7943:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7943:18:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7935:4:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8015:6:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8028:9:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8039:1:33",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8024:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8024:17:33"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "7971:43:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7971:71:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7971:71:33"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7897:9:33",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7909:6:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7920:4:33",
                        "type": ""
                      }
                    ],
                    "src": "7827:222:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8171:193:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8181:26:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8193:9:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8204:2:33",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8189:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8189:18:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8181:4:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8228:9:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8239:1:33",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8224:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8224:17:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "8247:4:33"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8253:9:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8243:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8243:20:33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8217:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8217:47:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8217:47:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8273:84:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8343:6:33"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "8352:4:33"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "8281:61:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8281:76:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8273:4:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8143:9:33",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8155:6:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8166:4:33",
                        "type": ""
                      }
                    ],
                    "src": "8055:309:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8498:205:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8508:26:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8520:9:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8531:2:33",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8516:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8516:18:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8508:4:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8555:9:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8566:1:33",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8551:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8551:17:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "8574:4:33"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8580:9:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8570:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8570:20:33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8544:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8544:47:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8544:47:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8600:96:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8674:6:33"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "8682:6:33"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "8691:4:33"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "8608:65:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8608:88:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8600:4:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8462:9:33",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8474:6:33",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8482:6:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8493:4:33",
                        "type": ""
                      }
                    ],
                    "src": "8370:333:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8827:195:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8837:26:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8849:9:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8860:2:33",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8845:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8845:18:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8837:4:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8884:9:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8895:1:33",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8880:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8880:17:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "8903:4:33"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8909:9:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8899:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8899:20:33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8873:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8873:47:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8873:47:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8929:86:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9001:6:33"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "9010:4:33"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "8937:63:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8937:78:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8929:4:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8799:9:33",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8811:6:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8822:4:33",
                        "type": ""
                      }
                    ],
                    "src": "8709:313:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9174:277:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9184:26:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9196:9:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9207:2:33",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9192:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9192:18:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9184:4:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9231:9:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9242:1:33",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9227:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9227:17:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "9250:4:33"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9256:9:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9246:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9246:20:33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9220:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9220:47:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9220:47:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9276:86:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9348:6:33"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "9357:4:33"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "9284:63:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9284:78:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9276:4:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "9416:6:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9429:9:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9440:2:33",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9425:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9425:18:33"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "9372:43:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9372:72:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9372:72:33"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9138:9:33",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9150:6:33",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9158:6:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9169:4:33",
                        "type": ""
                      }
                    ],
                    "src": "9028:423:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9572:192:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9582:26:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9594:9:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9605:2:33",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9590:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9590:18:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9582:4:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9629:9:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9640:1:33",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9625:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9625:17:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "9648:4:33"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9654:9:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9644:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9644:20:33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9618:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9618:47:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9618:47:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9674:83:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9743:6:33"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "9752:4:33"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_storage_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "9682:60:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9682:75:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9674:4:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_storage__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9544:9:33",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9556:6:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9567:4:33",
                        "type": ""
                      }
                    ],
                    "src": "9457:307:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9941:248:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9951:26:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9963:9:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9974:2:33",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9959:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9959:18:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9951:4:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9998:9:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10009:1:33",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9994:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9994:17:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "10017:4:33"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10023:9:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10013:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10013:20:33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9987:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9987:47:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9987:47:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10043:139:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "10177:4:33"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_496331db80b155180d05b6a531d7f1b02fadcefbbb3b193f6eb1a638212ac42d_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "10051:124:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10051:131:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10043:4:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_496331db80b155180d05b6a531d7f1b02fadcefbbb3b193f6eb1a638212ac42d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9921:9:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9936:4:33",
                        "type": ""
                      }
                    ],
                    "src": "9770:419:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10366:248:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10376:26:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10388:9:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10399:2:33",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10384:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10384:18:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10376:4:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10423:9:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10434:1:33",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10419:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10419:17:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "10442:4:33"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10448:9:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10438:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10438:20:33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10412:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10412:47:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10412:47:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10468:139:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "10602:4:33"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_825bb37adeb4acd67fd39594e8bb7b664749b0fd3dbab4af37829bd3a3317daf_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "10476:124:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10476:131:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10468:4:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_825bb37adeb4acd67fd39594e8bb7b664749b0fd3dbab4af37829bd3a3317daf__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10346:9:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10361:4:33",
                        "type": ""
                      }
                    ],
                    "src": "10195:419:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10791:248:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10801:26:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10813:9:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10824:2:33",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10809:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10809:18:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10801:4:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10848:9:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10859:1:33",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10844:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10844:17:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "10867:4:33"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10873:9:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10863:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10863:20:33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10837:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10837:47:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10837:47:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10893:139:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "11027:4:33"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "10901:124:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10901:131:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10893:4:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10771:9:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10786:4:33",
                        "type": ""
                      }
                    ],
                    "src": "10620:419:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11216:248:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11226:26:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11238:9:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11249:2:33",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11234:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11234:18:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11226:4:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11273:9:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11284:1:33",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11269:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11269:17:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "11292:4:33"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11298:9:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "11288:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11288:20:33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11262:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11262:47:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11262:47:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11318:139:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "11452:4:33"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_e31a92451aef3650bf3c4422558f959d1c33519658c6d3694cc770d028876c3f_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "11326:124:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11326:131:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11318:4:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e31a92451aef3650bf3c4422558f959d1c33519658c6d3694cc770d028876c3f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11196:9:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11211:4:33",
                        "type": ""
                      }
                    ],
                    "src": "11045:419:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11568:124:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11578:26:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11590:9:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11601:2:33",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11586:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11586:18:33"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11578:4:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "11658:6:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11671:9:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11682:1:33",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11667:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11667:17:33"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "11614:43:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11614:71:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11614:71:33"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11540:9:33",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11552:6:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11563:4:33",
                        "type": ""
                      }
                    ],
                    "src": "11470:222:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11752:87:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11762:11:33",
                          "value": {
                            "name": "ptr",
                            "nodeType": "YulIdentifier",
                            "src": "11770:3:33"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "11762:4:33"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11790:1:33",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "11793:3:33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11783:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11783:14:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11783:14:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11806:26:33",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11824:1:33",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11827:4:33",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nodeType": "YulIdentifier",
                              "src": "11814:9:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11814:18:33"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "11806:4:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_t_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "11739:3:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "11747:4:33",
                        "type": ""
                      }
                    ],
                    "src": "11698:141:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11903:40:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11914:22:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "11930:5:33"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "11924:5:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11924:12:33"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "11914:6:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "11886:5:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "11896:6:33",
                        "type": ""
                      }
                    ],
                    "src": "11845:98:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12008:40:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12019:22:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "12035:5:33"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "12029:5:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12029:12:33"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "12019:6:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "11991:5:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "12001:6:33",
                        "type": ""
                      }
                    ],
                    "src": "11949:99:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12149:73:33",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12166:3:33"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "12171:6:33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12159:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12159:19:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12159:19:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12187:29:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12206:3:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12211:4:33",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12202:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12202:14:33"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nodeType": "YulIdentifier",
                              "src": "12187:11:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "12121:3:33",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "12126:6:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nodeType": "YulTypedName",
                        "src": "12137:11:33",
                        "type": ""
                      }
                    ],
                    "src": "12054:168:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12324:73:33",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12341:3:33"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "12346:6:33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12334:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12334:19:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12334:19:33"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12362:29:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12381:3:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12386:4:33",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12377:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12377:14:33"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nodeType": "YulIdentifier",
                              "src": "12362:11:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "12296:3:33",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "12301:6:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nodeType": "YulTypedName",
                        "src": "12312:11:33",
                        "type": ""
                      }
                    ],
                    "src": "12228:169:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12517:34:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12527:18:33",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "12542:3:33"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nodeType": "YulIdentifier",
                              "src": "12527:11:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "12489:3:33",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "12494:6:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nodeType": "YulTypedName",
                        "src": "12505:11:33",
                        "type": ""
                      }
                    ],
                    "src": "12403:148:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12602:51:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12612:35:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "12641:5:33"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nodeType": "YulIdentifier",
                              "src": "12623:17:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12623:24:33"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "12612:7:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "12584:5:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "12594:7:33",
                        "type": ""
                      }
                    ],
                    "src": "12557:96:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12704:81:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12714:65:33",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "12729:5:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12736:42:33",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "12725:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12725:54:33"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "12714:7:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint160",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "12686:5:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "12696:7:33",
                        "type": ""
                      }
                    ],
                    "src": "12659:126:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12836:32:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12846:16:33",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "12857:5:33"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "12846:7:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "12818:5:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "12828:7:33",
                        "type": ""
                      }
                    ],
                    "src": "12791:77:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12925:103:33",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "12948:3:33"
                              },
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "12953:3:33"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "12958:6:33"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "12935:12:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12935:30:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12935:30:33"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "13006:3:33"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "13011:6:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13002:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13002:16:33"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13020:1:33",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12995:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12995:27:33"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12995:27:33"
                        }
                      ]
                    },
                    "name": "copy_calldata_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "12907:3:33",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "12912:3:33",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "12917:6:33",
                        "type": ""
                      }
                    ],
                    "src": "12874:154:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13083:258:33",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13093:10:33",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13102:1:33",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "13097:1:33",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13162:63:33",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "13187:3:33"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "13192:1:33"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "13183:3:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13183:11:33"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "13206:3:33"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "13211:1:33"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "13202:3:33"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "13202:11:33"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "13196:5:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13196:18:33"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13176:6:33"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13176:39:33"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13176:39:33"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "13123:1:33"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "13126:6:33"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "13120:2:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13120:13:33"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "13134:19:33",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "13136:15:33",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "13145:1:33"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13148:2:33",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "13141:3:33"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13141:10:33"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "13136:1:33"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "13116:3:33",
                            "statements": []
                          },
                          "src": "13112:113:33"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13259:76:33",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "13309:3:33"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "13314:6:33"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "13305:3:33"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13305:16:33"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13323:1:33",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13298:6:33"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13298:27:33"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13298:27:33"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "13240:1:33"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "13243:6:33"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "13237:2:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13237:13:33"
                          },
                          "nodeType": "YulIf",
                          "src": "13234:2:33"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "13065:3:33",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "13070:3:33",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "13075:6:33",
                        "type": ""
                      }
                    ],
                    "src": "13034:307:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13395:54:33",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13405:38:33",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "13423:5:33"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13430:2:33",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13419:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13419:14:33"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13439:2:33",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "13435:3:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13435:7:33"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "13415:3:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13415:28:33"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nodeType": "YulIdentifier",
                              "src": "13405:6:33"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "round_up_to_mul_of_32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "13378:5:33",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nodeType": "YulTypedName",
                        "src": "13388:6:33",
                        "type": ""
                      }
                    ],
                    "src": "13347:102:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13498:79:33",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13555:16:33",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13564:1:33",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13567:1:33",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13557:6:33"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13557:12:33"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13557:12:33"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "13521:5:33"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "13546:5:33"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "13528:17:33"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13528:24:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "13518:2:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13518:35:33"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "13511:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13511:43:33"
                          },
                          "nodeType": "YulIf",
                          "src": "13508:2:33"
                        }
                      ]
                    },
                    "name": "validator_revert_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "13491:5:33",
                        "type": ""
                      }
                    ],
                    "src": "13455:122:33"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13626:79:33",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13683:16:33",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13692:1:33",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13695:1:33",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13685:6:33"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13685:12:33"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13685:12:33"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "13649:5:33"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "13674:5:33"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint256",
                                      "nodeType": "YulIdentifier",
                                      "src": "13656:17:33"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13656:24:33"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "13646:2:33"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13646:35:33"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "13639:6:33"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13639:43:33"
                          },
                          "nodeType": "YulIf",
                          "src": "13636:2:33"
                        }
                      ]
                    },
                    "name": "validator_revert_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "13619:5:33",
                        "type": ""
                      }
                    ],
                    "src": "13583:122:33"
                  }
                ]
              },
              "contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    // string\n    function abi_decode_t_string_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_string_calldata_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0, value1 := abi_decode_t_string_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_string_calldata_ptrt_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0, value1 := abi_decode_t_string_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value2, value3 := abi_decode_t_string_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    // string -> string\n    function abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    // string -> string\n    function abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n\n        copy_calldata_to_memory(start, pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    // string -> string\n    function abi_encode_t_string_storage_to_t_string_memory_ptr_fromStack(value, pos) -> ret {\n        let slotValue := sload(value)\n        switch and(slotValue, 1)\n        case 0 {\n            // short byte array\n            let length := and(div(slotValue, 2), 0x7f)\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n            mstore(pos, and(slotValue, not(0xff)))\n            ret := add(pos, 0x20)\n        }\n        case 1 {\n            // long byte array\n            let length := div(slotValue, 2)\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n            let dataPos := array_dataslot_t_string_storage(value)\n            let i := 0\n            for { } lt(i, length) { i := add(i, 0x20) } {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, 1)\n            }\n            ret := add(pos, i)\n        }\n    }\n\n    // string -> string\n    function abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> ret {\n        let slotValue := sload(value)\n        switch and(slotValue, 1)\n        case 0 {\n            // short byte array\n            let length := and(div(slotValue, 2), 0x7f)\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n            mstore(pos, and(slotValue, not(0xff)))\n            ret := add(pos, length)\n        }\n        case 1 {\n            // long byte array\n            let length := div(slotValue, 2)\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n            let dataPos := array_dataslot_t_string_storage(value)\n            let i := 0\n            for { } lt(i, length) { i := add(i, 0x20) } {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, 1)\n            }\n            ret := add(pos, length)\n        }\n    }\n\n    function abi_encode_t_stringliteral_496331db80b155180d05b6a531d7f1b02fadcefbbb3b193f6eb1a638212ac42d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)\n\n        mstore(add(pos, 0), \"Document should exist\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_825bb37adeb4acd67fd39594e8bb7b664749b0fd3dbab4af37829bd3a3317daf_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n\n        mstore(add(pos, 0), \"Zero name is not allowed\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 19)\n\n        mstore(add(pos, 0), \"Index out of bounds\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_e31a92451aef3650bf3c4422558f959d1c33519658c6d3694cc770d028876c3f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 26)\n\n        mstore(add(pos, 0), \"Should not be a empty data\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_packed_t_string_calldata_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0, value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_packed_t_string_storage__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(value0, value1,  tail)\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr_t_uint256__to_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_string_storage__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_storage_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_496331db80b155180d05b6a531d7f1b02fadcefbbb3b193f6eb1a638212ac42d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_496331db80b155180d05b6a531d7f1b02fadcefbbb3b193f6eb1a638212ac42d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_825bb37adeb4acd67fd39594e8bb7b664749b0fd3dbab4af37829bd3a3317daf__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_825bb37adeb4acd67fd39594e8bb7b664749b0fd3dbab4af37829bd3a3317daf_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_e31a92451aef3650bf3c4422558f959d1c33519658c6d3694cc770d028876c3f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e31a92451aef3650bf3c4422558f959d1c33519658c6d3694cc770d028876c3f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
              "id": 33,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106100935760003560e01c80639fa5f50b116100665780639fa5f50b1461010f578063c6b547e61461012d578063de7afa4b1461015d578063f2fde38b14610179578063f3494ae91461019557610093565b80633d1c227314610098578063715018a6146100b65780637ccb6a64146100c05780638da5cb5b146100f1575b600080fd5b6100a06101b1565b6040516100ad91906118db565b60405180910390f35b6100be6101be565b005b6100da60048036038101906100d59190611374565b61032b565b6040516100e8929190611809565b60405180910390f35b6100f961043b565b6040516101069190611786565b60405180910390f35b610117610464565b60405161012491906117a1565b60405180910390f35b6101476004803603810190610142919061142e565b610636565b60405161015491906117e7565b60405180910390f35b61017760048036038101906101729190611374565b610736565b005b610193600480360381019061018e919061134b565b610a83565b005b6101af60048036038101906101aa91906113b9565b610c75565b005b6000600380549050905090565b6101c6611019565b73ffffffffffffffffffffffffffffffffffffffff166101e461043b565b73ffffffffffffffffffffffffffffffffffffffff161461026d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6060600060018484604051610341929190611756565b908152602001604051809103902060010160018585604051610364929190611756565b908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff16818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104295780601f106103fe57610100808354040283529160200191610429565b820191906000526020600020905b81548152906001019060200180831161040c57829003601f168201915b50505050509150915091509250929050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060008060038054905090508181101561047e57600080fd5b60016003805490500381111561049a5760016003805490500390505b6000600183830301604002905060008167ffffffffffffffff811180156104c057600080fd5b506040519080825280601f01601f1916602001820160405280156104f35781602001600182028036833780820191505090505b5090506000602067ffffffffffffffff8111801561051057600080fd5b506040519080825280601f01601f1916602001820160405280156105435781602001600182028036833780820191505090505b50905060008590505b84811161062a576003818154811061056057fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105fe5780601f106105d3576101008083540402835291602001916105fe565b820191906000526020600020905b8154815290600101906020018083116105e157829003601f168201915b50505050509150610610848385611021565b61061982611082565b84039350808060010191505061054c565b50819550505050505090565b6060600380549050821061067f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106769061189b565b60405180910390fd5b6003828154811061068c57fe5b906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561072a5780601f106106ff5761010080835404028352916020019161072a565b820191906000526020600020905b81548152906001019060200180831161070d57829003601f168201915b50505050509050919050565b61073e611019565b73ffffffffffffffffffffffffffffffffffffffff1661075c61043b565b73ffffffffffffffffffffffffffffffffffffffff16146107e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600067ffffffffffffffff1660018383604051610803929190611756565b908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff161415610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b9061185b565b60405180910390fd5b60006001808484604051610889929190611756565b908152602001604051809103902060000160009054906101000a900463ffffffff160390506001600380549050038163ffffffff161461097f576003600160038054905003815481106108d857fe5b9060005260206000200160038263ffffffff16815481106108f557fe5b90600052602060002001908054600181600116156101000203166002900461091e9291906110c1565b5060018101600160038363ffffffff168154811061093857fe5b9060005260206000200160405161094f919061176f565b908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b600380548061098a57fe5b6001900381819060005260206000200160006109a69190611156565b905582826040516109b8929190611756565b60405180910390207f4b5338540b4d1c0f6dd0308a25f633b7ff60472f894d711cff9dd64e35c613b2600185856040516109f3929190611756565b9081526020016040518091039020600101604051610a119190611839565b60405180910390a260018383604051610a2b929190611756565b9081526020016040518091039020600080820160006101000a81549063ffffffff02191690556000820160046101000a81549067ffffffffffffffff0219169055600182016000610a7c9190611156565b5050505050565b610a8b611019565b73ffffffffffffffffffffffffffffffffffffffff16610aa961043b565b73ffffffffffffffffffffffffffffffffffffffff1614610b32576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611a0c6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610c7d611019565b73ffffffffffffffffffffffffffffffffffffffff16610c9b61043b565b73ffffffffffffffffffffffffffffffffffffffff1614610d24576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60008484905011610d6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d619061187b565b60405180910390fd5b60008282905011610db0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da7906118bb565b60405180910390fd5b600067ffffffffffffffff1660018585604051610dce929190611756565b908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff161415610e8a576003848490918060018154018082558091505060019003906000526020600020016000909192909192909192909192509190610e4192919061119e565b5060038054905060018585604051610e5a929190611756565b908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b604051806060016040528060018686604051610ea7929190611756565b908152602001604051809103902060000160009054906101000a900463ffffffff1663ffffffff1681526020014267ffffffffffffffff16815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525060018585604051610f3e929190611756565b908152602001604051809103902060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151816001019080519060200190610fbe92919061122c565b509050508383604051610fd2929190611756565b60405180910390207fbaa206e5ea800eb88bce099f453fee53295b793b9d5d1cfc4ce4b6db06a34f53838360405161100b9291906117c3565b60405180910390a250505050565b600033905090565b6000602083518161102e57fe5b0490506000602084518161103e57fe5b06111561104e5780806001019150505b60018101905060005b8181101561107b576020810284015185840152602085039450600181019050611057565b5050505050565b6000602082518161108f57fe5b0490506000602083518161109f57fe5b06146110ae5780806001019150505b8080600101915050602081029050919050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826110f75760008555611145565b82601f106111085780548555611145565b8280016001018555821561114557600052602060002091601f016020900482015b82811115611144578254825591600101919060010190611129565b5b50905061115291906112ba565b5090565b50805460018160011615610100020316600290046000825580601f1061117c575061119b565b601f01602090049060005260206000209081019061119a91906112ba565b5b50565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826111d4576000855561121b565b82601f106111ed57803560ff191683800117855561121b565b8280016001018555821561121b579182015b8281111561121a5782358255916020019190600101906111ff565b5b50905061122891906112ba565b5090565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261126257600085556112a9565b82601f1061127b57805160ff19168380011785556112a9565b828001600101855582156112a9579182015b828111156112a857825182559160200191906001019061128d565b5b5090506112b691906112ba565b5090565b5b808211156112d35760008160009055506001016112bb565b5090565b6000813590506112e6816119dd565b92915050565b60008083601f8401126112fe57600080fd5b8235905067ffffffffffffffff81111561131757600080fd5b60208301915083600182028301111561132f57600080fd5b9250929050565b600081359050611345816119f4565b92915050565b60006020828403121561135d57600080fd5b600061136b848285016112d7565b91505092915050565b6000806020838503121561138757600080fd5b600083013567ffffffffffffffff8111156113a157600080fd5b6113ad858286016112ec565b92509250509250929050565b600080600080604085870312156113cf57600080fd5b600085013567ffffffffffffffff8111156113e957600080fd5b6113f5878288016112ec565b9450945050602085013567ffffffffffffffff81111561141457600080fd5b611420878288016112ec565b925092505092959194509250565b60006020828403121561144057600080fd5b600061144e84828501611336565b91505092915050565b6114608161194e565b82525050565b60006114718261190b565b61147b8185611921565b935061148b818560208601611999565b611494816119cc565b840191505092915050565b60006114ab8385611932565b93506114b883858461198a565b6114c1836119cc565b840190509392505050565b60006114d88385611943565b93506114e583858461198a565b82840190509392505050565b60006114fc82611916565b6115068185611932565b9350611516818560208601611999565b61151f816119cc565b840191505092915050565b600081546001811660008114611547576001811461156d576115b1565b607f60028304166115588187611932565b955060ff1983168652602086019350506115b1565b6002820461157b8187611932565b9550611586856118f6565b60005b828110156115a857815481890152600182019150602081019050611589565b80880195505050505b505092915050565b6000815460018116600081146115d657600181146115fb5761163f565b607f60028304166115e78187611943565b955060ff198316865280860193505061163f565b600282046116098187611943565b9550611614856118f6565b60005b8281101561163657815481890152600182019150602081019050611617565b82880195505050505b505092915050565b6000611654601583611932565b91507f446f63756d656e742073686f756c6420657869737400000000000000000000006000830152602082019050919050565b6000611694601883611932565b91507f5a65726f206e616d65206973206e6f7420616c6c6f77656400000000000000006000830152602082019050919050565b60006116d4601383611932565b91507f496e646578206f7574206f6620626f756e6473000000000000000000000000006000830152602082019050919050565b6000611714601a83611932565b91507f53686f756c64206e6f74206265206120656d70747920646174610000000000006000830152602082019050919050565b61175081611980565b82525050565b60006117638284866114cc565b91508190509392505050565b600061177b82846115b9565b915081905092915050565b600060208201905061179b6000830184611457565b92915050565b600060208201905081810360008301526117bb8184611466565b905092915050565b600060208201905081810360008301526117de81848661149f565b90509392505050565b6000602082019050818103600083015261180181846114f1565b905092915050565b6000604082019050818103600083015261182381856114f1565b90506118326020830184611747565b9392505050565b60006020820190508181036000830152611853818461152a565b905092915050565b6000602082019050818103600083015261187481611647565b9050919050565b6000602082019050818103600083015261189481611687565b9050919050565b600060208201905081810360008301526118b4816116c7565b9050919050565b600060208201905081810360008301526118d481611707565b9050919050565b60006020820190506118f06000830184611747565b92915050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061195982611960565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156119b757808201518184015260208101905061199c565b838111156119c6576000848401525b50505050565b6000601f19601f8301169050919050565b6119e68161194e565b81146119f157600080fd5b50565b6119fd81611980565b8114611a0857600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220ebca934579bbd85dbff2f507dee202cafd0f2c54b14a757fb708246f752c5f8864736f6c63430007060033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9FA5F50B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x9FA5F50B EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0xC6B547E6 EQ PUSH2 0x12D JUMPI DUP1 PUSH4 0xDE7AFA4B EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0xF3494AE9 EQ PUSH2 0x195 JUMPI PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH4 0x3D1C2273 EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x7CCB6A64 EQ PUSH2 0xC0 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xF1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x1B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0x18DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBE PUSH2 0x1BE JUMP JUMPDEST STOP JUMPDEST PUSH2 0xDA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD5 SWAP2 SWAP1 PUSH2 0x1374 JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE8 SWAP3 SWAP2 SWAP1 PUSH2 0x1809 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF9 PUSH2 0x43B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x106 SWAP2 SWAP1 PUSH2 0x1786 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x117 PUSH2 0x464 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP2 SWAP1 PUSH2 0x17A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x147 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x142 SWAP2 SWAP1 PUSH2 0x142E JUMP JUMPDEST PUSH2 0x636 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x154 SWAP2 SWAP1 PUSH2 0x17E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x177 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x172 SWAP2 SWAP1 PUSH2 0x1374 JUMP JUMPDEST PUSH2 0x736 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x193 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18E SWAP2 SWAP1 PUSH2 0x134B JUMP JUMPDEST PUSH2 0xA83 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AA SWAP2 SWAP1 PUSH2 0x13B9 JUMP JUMPDEST PUSH2 0xC75 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x1019 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1E4 PUSH2 0x43B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x26D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x341 SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x364 SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x4 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x429 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x429 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x40C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x47E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SUB DUP2 GT ISZERO PUSH2 0x49A JUMPI PUSH1 0x1 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SUB SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 DUP4 SUB ADD PUSH1 0x40 MUL SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x4C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4F3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x510 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x543 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP6 SWAP1 POP JUMPDEST DUP5 DUP2 GT PUSH2 0x62A JUMPI PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x560 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x5FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP PUSH2 0x610 DUP5 DUP4 DUP6 PUSH2 0x1021 JUMP JUMPDEST PUSH2 0x619 DUP3 PUSH2 0x1082 JUMP JUMPDEST DUP5 SUB SWAP4 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x54C JUMP JUMPDEST POP DUP2 SWAP6 POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD SWAP1 POP DUP3 LT PUSH2 0x67F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x676 SWAP1 PUSH2 0x189B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x68C JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x72A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6FF JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x72A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x70D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x73E PUSH2 0x1019 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x75C PUSH2 0x43B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x7E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x803 SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x4 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x874 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x86B SWAP1 PUSH2 0x185B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x889 SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND SUB SWAP1 POP PUSH1 0x1 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SUB DUP2 PUSH4 0xFFFFFFFF AND EQ PUSH2 0x97F JUMPI PUSH1 0x3 PUSH1 0x1 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SUB DUP2 SLOAD DUP2 LT PUSH2 0x8D8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x3 DUP3 PUSH4 0xFFFFFFFF AND DUP2 SLOAD DUP2 LT PUSH2 0x8F5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV PUSH2 0x91E SWAP3 SWAP2 SWAP1 PUSH2 0x10C1 JUMP JUMPDEST POP PUSH1 0x1 DUP2 ADD PUSH1 0x1 PUSH1 0x3 DUP4 PUSH4 0xFFFFFFFF AND DUP2 SLOAD DUP2 LT PUSH2 0x938 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x40 MLOAD PUSH2 0x94F SWAP2 SWAP1 PUSH2 0x176F JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x3 DUP1 SLOAD DUP1 PUSH2 0x98A JUMPI INVALID JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x9A6 SWAP2 SWAP1 PUSH2 0x1156 JUMP JUMPDEST SWAP1 SSTORE DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x9B8 SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH32 0x4B5338540B4D1C0F6DD0308A25F633B7FF60472F894D711CFF9DD64E35C613B2 PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x9F3 SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH1 0x40 MLOAD PUSH2 0xA11 SWAP2 SWAP1 PUSH2 0x1839 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xA2B SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x4 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 PUSH2 0xA7C SWAP2 SWAP1 PUSH2 0x1156 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA8B PUSH2 0x1019 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xAA9 PUSH2 0x43B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xBB8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1A0C PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0xC7D PUSH2 0x1019 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC9B PUSH2 0x43B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD24 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP5 SWAP1 POP GT PUSH2 0xD6A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD61 SWAP1 PUSH2 0x187B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 SWAP1 POP GT PUSH2 0xDB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDA7 SWAP1 PUSH2 0x18BB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0xDCE SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x4 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xE8A JUMPI PUSH1 0x3 DUP5 DUP5 SWAP1 SWAP2 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP3 POP SWAP2 SWAP1 PUSH2 0xE41 SWAP3 SWAP2 SWAP1 PUSH2 0x119E JUMP JUMPDEST POP PUSH1 0x3 DUP1 SLOAD SWAP1 POP PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0xE5A SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0xEA7 SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP2 MSTORE POP PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0xF3E SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x4 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0xFBE SWAP3 SWAP2 SWAP1 PUSH2 0x122C JUMP JUMPDEST POP SWAP1 POP POP DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFD2 SWAP3 SWAP2 SWAP1 PUSH2 0x1756 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH32 0xBAA206E5EA800EB88BCE099F453FEE53295B793B9D5D1CFC4CE4B6DB06A34F53 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x100B SWAP3 SWAP2 SWAP1 PUSH2 0x17C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD DUP2 PUSH2 0x102E JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH1 0x20 DUP5 MLOAD DUP2 PUSH2 0x103E JUMPI INVALID JUMPDEST MOD GT ISZERO PUSH2 0x104E JUMPI DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x107B JUMPI PUSH1 0x20 DUP2 MUL DUP5 ADD MLOAD DUP6 DUP5 ADD MSTORE PUSH1 0x20 DUP6 SUB SWAP5 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1057 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MLOAD DUP2 PUSH2 0x108F JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD DUP2 PUSH2 0x109F JUMPI INVALID JUMPDEST MOD EQ PUSH2 0x10AE JUMPI DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH1 0x20 DUP2 MUL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x10F7 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x1145 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1108 JUMPI DUP1 SLOAD DUP6 SSTORE PUSH2 0x1145 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1145 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1144 JUMPI DUP3 SLOAD DUP3 SSTORE SWAP2 PUSH1 0x1 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1129 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x1152 SWAP2 SWAP1 PUSH2 0x12BA JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x117C JUMPI POP PUSH2 0x119B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x119A SWAP2 SWAP1 PUSH2 0x12BA JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x11D4 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x121B JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x11ED JUMPI DUP1 CALLDATALOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x121B JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x121B JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x121A JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x11FF JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x1228 SWAP2 SWAP1 PUSH2 0x12BA JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1262 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x12A9 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x127B JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x12A9 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x12A9 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x12A8 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x128D JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x12B6 SWAP2 SWAP1 PUSH2 0x12BA JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x12D3 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x12BB JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x12E6 DUP2 PUSH2 0x19DD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x12FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x132F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1345 DUP2 PUSH2 0x19F4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x135D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x136B DUP5 DUP3 DUP6 ADD PUSH2 0x12D7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13AD DUP6 DUP3 DUP7 ADD PUSH2 0x12EC JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x13CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13F5 DUP8 DUP3 DUP9 ADD PUSH2 0x12EC JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1420 DUP8 DUP3 DUP9 ADD PUSH2 0x12EC JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x144E DUP5 DUP3 DUP6 ADD PUSH2 0x1336 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1460 DUP2 PUSH2 0x194E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1471 DUP3 PUSH2 0x190B JUMP JUMPDEST PUSH2 0x147B DUP2 DUP6 PUSH2 0x1921 JUMP JUMPDEST SWAP4 POP PUSH2 0x148B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1999 JUMP JUMPDEST PUSH2 0x1494 DUP2 PUSH2 0x19CC JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14AB DUP4 DUP6 PUSH2 0x1932 JUMP JUMPDEST SWAP4 POP PUSH2 0x14B8 DUP4 DUP6 DUP5 PUSH2 0x198A JUMP JUMPDEST PUSH2 0x14C1 DUP4 PUSH2 0x19CC JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14D8 DUP4 DUP6 PUSH2 0x1943 JUMP JUMPDEST SWAP4 POP PUSH2 0x14E5 DUP4 DUP6 DUP5 PUSH2 0x198A JUMP JUMPDEST DUP3 DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14FC DUP3 PUSH2 0x1916 JUMP JUMPDEST PUSH2 0x1506 DUP2 DUP6 PUSH2 0x1932 JUMP JUMPDEST SWAP4 POP PUSH2 0x1516 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1999 JUMP JUMPDEST PUSH2 0x151F DUP2 PUSH2 0x19CC JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH1 0x1 DUP2 AND PUSH1 0x0 DUP2 EQ PUSH2 0x1547 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x156D JUMPI PUSH2 0x15B1 JUMP JUMPDEST PUSH1 0x7F PUSH1 0x2 DUP4 DIV AND PUSH2 0x1558 DUP2 DUP8 PUSH2 0x1932 JUMP JUMPDEST SWAP6 POP PUSH1 0xFF NOT DUP4 AND DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP4 POP POP PUSH2 0x15B1 JUMP JUMPDEST PUSH1 0x2 DUP3 DIV PUSH2 0x157B DUP2 DUP8 PUSH2 0x1932 JUMP JUMPDEST SWAP6 POP PUSH2 0x1586 DUP6 PUSH2 0x18F6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x15A8 JUMPI DUP2 SLOAD DUP2 DUP10 ADD MSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1589 JUMP JUMPDEST DUP1 DUP9 ADD SWAP6 POP POP POP POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH1 0x1 DUP2 AND PUSH1 0x0 DUP2 EQ PUSH2 0x15D6 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x15FB JUMPI PUSH2 0x163F JUMP JUMPDEST PUSH1 0x7F PUSH1 0x2 DUP4 DIV AND PUSH2 0x15E7 DUP2 DUP8 PUSH2 0x1943 JUMP JUMPDEST SWAP6 POP PUSH1 0xFF NOT DUP4 AND DUP7 MSTORE DUP1 DUP7 ADD SWAP4 POP POP PUSH2 0x163F JUMP JUMPDEST PUSH1 0x2 DUP3 DIV PUSH2 0x1609 DUP2 DUP8 PUSH2 0x1943 JUMP JUMPDEST SWAP6 POP PUSH2 0x1614 DUP6 PUSH2 0x18F6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1636 JUMPI DUP2 SLOAD DUP2 DUP10 ADD MSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1617 JUMP JUMPDEST DUP3 DUP9 ADD SWAP6 POP POP POP POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1654 PUSH1 0x15 DUP4 PUSH2 0x1932 JUMP JUMPDEST SWAP2 POP PUSH32 0x446F63756D656E742073686F756C642065786973740000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1694 PUSH1 0x18 DUP4 PUSH2 0x1932 JUMP JUMPDEST SWAP2 POP PUSH32 0x5A65726F206E616D65206973206E6F7420616C6C6F7765640000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16D4 PUSH1 0x13 DUP4 PUSH2 0x1932 JUMP JUMPDEST SWAP2 POP PUSH32 0x496E646578206F7574206F6620626F756E647300000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1714 PUSH1 0x1A DUP4 PUSH2 0x1932 JUMP JUMPDEST SWAP2 POP PUSH32 0x53686F756C64206E6F74206265206120656D7074792064617461000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1750 DUP2 PUSH2 0x1980 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1763 DUP3 DUP5 DUP7 PUSH2 0x14CC JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x177B DUP3 DUP5 PUSH2 0x15B9 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x179B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1457 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x17BB DUP2 DUP5 PUSH2 0x1466 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x17DE DUP2 DUP5 DUP7 PUSH2 0x149F JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1801 DUP2 DUP5 PUSH2 0x14F1 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1823 DUP2 DUP6 PUSH2 0x14F1 JUMP JUMPDEST SWAP1 POP PUSH2 0x1832 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1747 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1853 DUP2 DUP5 PUSH2 0x152A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1874 DUP2 PUSH2 0x1647 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1894 DUP2 PUSH2 0x1687 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x18B4 DUP2 PUSH2 0x16C7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x18D4 DUP2 PUSH2 0x1707 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x18F0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1747 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1959 DUP3 PUSH2 0x1960 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x19B7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x199C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x19C6 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19E6 DUP2 PUSH2 0x194E JUMP JUMPDEST DUP2 EQ PUSH2 0x19F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x19FD DUP2 PUSH2 0x1980 JUMP JUMPDEST DUP2 EQ PUSH2 0x1A08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373A2646970667358221220EBCA934579BB 0xD8 0x5D 0xBF CALLCODE CREATE2 SMOD 0xDE 0xE2 MUL 0xCA REVERT 0xF 0x2C SLOAD 0xB1 0x4A PUSH22 0x7FB708246F752C5F8864736F6C634300070600330000 ",
          "sourceMap": "257:4696:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4481:100;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1717:145:1;;;:::i;:::-;;3216:242:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;1085:85:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3644:664:13;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4736:215;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2376:552;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2011:240:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1443:673:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4481:100;4532:7;4558:9;:16;;;;4551:23;;4481:100;:::o;1717:145:1:-;1308:12;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1823:1:::1;1786:40;;1807:6;::::0;::::1;;;;;;;;1786:40;;;;;;;;;;;;1853:1;1836:6:::0;::::1;:19;;;;;;;;;;;;;;;;;;1717:145::o:0;3216:242:13:-;3307:13;3322:7;3366:10;3377:5;;3366:17;;;;;;;:::i;:::-;;;;;;;;;;;;;:22;;3410:10;3421:5;;3410:17;;;;;;;:::i;:::-;;;;;;;;;;;;;:30;;;;;;;;;;;;3402:39;;3345:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3216:242;;;;;:::o;1085:85:1:-;1131:7;1157:6;;;;;;;;;;;1150:13;;1085:85;:::o;3644:664:13:-;3694:12;3718:15;3747:13;3763:9;:16;;;;3747:32;;3809:10;3797:8;:22;;3789:31;;;;;;3866:1;3847:9;:16;;;;:20;3835:8;:33;3831:95;;;3914:1;3895:9;:16;;;;:20;3884:31;;3831:95;3936:11;3982:1;3968:10;3957:8;:21;3956:27;3950:2;:34;3936:48;;3995:19;4027:6;4017:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3995:39;;4044:18;4076:2;4065:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4044:35;;4095:6;4104:10;4095:19;;4090:189;4121:8;4116:1;:13;4090:189;;4157:9;4167:1;4157:12;;;;;;;;;;;;;;;4150:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4184:42;4198:6;4212:4;4219:6;4184:13;:42::i;:::-;4250:18;4263:4;4250:12;:18::i;:::-;4240:28;;;;4131:3;;;;;;;4090:189;;;;4295:6;4288:13;;;;;;;3644:664;:::o;4736:215::-;4824:13;4870:9;:16;;;;4861:6;:25;4853:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;4927:9;4937:6;4927:17;;;;;;;;;;;;;;;4920:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4736:215;;;:::o;2376:552::-;1308:12:1;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2515:1:13::1;2474:43;;:10;2485:5;;2474:17;;;;;;;:::i;:::-;;;;;;;;;;;;;:30;;;;;;;;;;;;:43;;;;2453:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;2574:12;2618:1;2589:10:::0;2600:5:::1;;2589:17;;;;;;;:::i;:::-;;;;;;;;;;;;;:26;;;;;;;;;;;;:30;2574:45;;2661:1;2642:9;:16;;;;:20;2633:5;:29;;;2629:173;;2697:9;2726:1;2707:9;:16;;;;:20;2697:31;;;;;;;;;;;;;;;2678:9;2688:5;2678:16;;;;;;;;;;;;;;;;;:50;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2790:1;2782:5;:9;2742:10;2753:9;2763:5;2753:16;;;;;;;;;;;;;;;;;2742:28;;;;;;:::i;:::-;;;;;;;;;;;;;:37;;;:49;;;;;;;;;;;;;;;;;;2629:173;2811:9;:15;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;2857:5;;2841:46;;;;;;;:::i;:::-;;;;;;;;;2864:10;2875:5;;2864:17;;;;;;;:::i;:::-;;;;;;;;;;;;;:22;;2841:46;;;;;;:::i;:::-;;;;;;;;2904:10;2915:5;;2904:17;;;;;;;:::i;:::-;;;;;;;;;;;;;;2897:24:::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;1367:1:1;2376:552:13::0;;:::o;2011:240:1:-;1308:12;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2119:1:::1;2099:22;;:8;:22;;;;2091:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2208:8;2179:38;;2200:6;::::0;::::1;;;;;;;;2179:38;;;;;;;;;;;;2236:8;2227:6;::::0;:17:::1;;;;;;;;;;;;;;;;;;2011:240:::0;:::o;1443:673:13:-;1308:12:1;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1590:1:13::1;1574:5;;1568:19;;:23;1560:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;1660:1;1644:5;;1638:19;;:23;1630:62;;;;;;;;;;;;:::i;:::-;;;;;;;;;1805:1;1764:43;;:10;1775:5;;1764:17;;;;;;;:::i;:::-;;;;;;;;;;;;;:30;;;;;;;;;;;;:43;;;1760:162;;;1823:9;1838:5;;1823:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1894:9;:16;;;;1858:10;1869:5;;1858:17;;;;;;;:::i;:::-;;;;;;;;;;;;;:26;;;:53;;;;;;;;;;;;;;;;;;1760:162;1951:114;;;;;;;;1973:10;1984:5;;1973:17;;;;;;;:::i;:::-;;;;;;;;;;;;;:26;;;;;;;;;;;;1951:114;;;;;;2020:15;1951:114;;;;;;2050:5;;1951:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;1931:10:::1;1942:5;;1931:17;;;;;;;:::i;:::-;;;;;;;;;;;;;:134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2096:5;;2080:29;;;;;;;:::i;:::-;;;;;;;;;2103:5;;2080:29;;;;;;;:::i;:::-;;;;;;;;1443:673:::0;;;;:::o;598:104:8:-;651:15;685:10;678:17;;598:104;:::o;936:639:30:-;1069:18;1106:2;1090:6;:13;:18;;;;;;1069:39;;1143:1;1138:2;1122:6;:13;:18;;;;;;:22;1118:40;;;1146:12;;;;;;;1118:40;1222:1;1210:10;1206:18;1192:32;;1328:1;1293:266;1354:10;1347:5;1344:21;1293:266;;;1497:2;1490:5;1486:14;1478:6;1474:27;1468:34;1459:6;1450:7;1446:20;1439:64;1542:2;1534:6;1530:15;1520:25;;1404:1;1397:5;1393:13;1384:22;;1293:266;;;1297:46;1178:391;;;;:::o;171:297:29:-;259:10;313:2;299:3;293:17;:22;;;;;;285:30;;355:1;349:2;335:3;329:17;:22;;;;;;:27;325:40;;358:7;;;;;;;325:40;376:7;;;;;;;459:2;450:11;;;;171:297;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:139:33:-;;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;59:87;;;;:::o;166:352::-;;;284:3;277:4;269:6;265:17;261:27;251:2;;302:1;299;292:12;251:2;338:6;325:20;315:30;;368:18;360:6;357:30;354:2;;;400:1;397;390:12;354:2;437:4;429:6;425:17;413:29;;491:3;483:4;475:6;471:17;461:8;457:32;454:41;451:2;;;508:1;505;498:12;451:2;241:277;;;;;:::o;524:139::-;;608:6;595:20;586:29;;624:33;651:5;624:33;:::i;:::-;576:87;;;;:::o;669:262::-;;777:2;765:9;756:7;752:23;748:32;745:2;;;793:1;790;783:12;745:2;836:1;861:53;906:7;897:6;886:9;882:22;861:53;:::i;:::-;851:63;;807:117;735:196;;;;:::o;937:395::-;;;1065:2;1053:9;1044:7;1040:23;1036:32;1033:2;;;1081:1;1078;1071:12;1033:2;1152:1;1141:9;1137:17;1124:31;1182:18;1174:6;1171:30;1168:2;;;1214:1;1211;1204:12;1168:2;1250:65;1307:7;1298:6;1287:9;1283:22;1250:65;:::i;:::-;1232:83;;;;1095:230;1023:309;;;;;:::o;1338:673::-;;;;;1503:2;1491:9;1482:7;1478:23;1474:32;1471:2;;;1519:1;1516;1509:12;1471:2;1590:1;1579:9;1575:17;1562:31;1620:18;1612:6;1609:30;1606:2;;;1652:1;1649;1642:12;1606:2;1688:65;1745:7;1736:6;1725:9;1721:22;1688:65;:::i;:::-;1670:83;;;;1533:230;1830:2;1819:9;1815:18;1802:32;1861:18;1853:6;1850:30;1847:2;;;1893:1;1890;1883:12;1847:2;1929:65;1986:7;1977:6;1966:9;1962:22;1929:65;:::i;:::-;1911:83;;;;1773:231;1461:550;;;;;;;:::o;2017:262::-;;2125:2;2113:9;2104:7;2100:23;2096:32;2093:2;;;2141:1;2138;2131:12;2093:2;2184:1;2209:53;2254:7;2245:6;2234:9;2230:22;2209:53;:::i;:::-;2199:63;;2155:117;2083:196;;;;:::o;2285:118::-;2372:24;2390:5;2372:24;:::i;:::-;2367:3;2360:37;2350:53;;:::o;2409:360::-;;2523:38;2555:5;2523:38;:::i;:::-;2577:70;2640:6;2635:3;2577:70;:::i;:::-;2570:77;;2656:52;2701:6;2696:3;2689:4;2682:5;2678:16;2656:52;:::i;:::-;2733:29;2755:6;2733:29;:::i;:::-;2728:3;2724:39;2717:46;;2499:270;;;;;:::o;2799:304::-;;2918:71;2982:6;2977:3;2918:71;:::i;:::-;2911:78;;2999:43;3035:6;3030:3;3023:5;2999:43;:::i;:::-;3067:29;3089:6;3067:29;:::i;:::-;3062:3;3058:39;3051:46;;2901:202;;;;;:::o;3133:317::-;;3270:89;3352:6;3347:3;3270:89;:::i;:::-;3263:96;;3369:43;3405:6;3400:3;3393:5;3369:43;:::i;:::-;3437:6;3432:3;3428:16;3421:23;;3253:197;;;;;:::o;3456:364::-;;3572:39;3605:5;3572:39;:::i;:::-;3627:71;3691:6;3686:3;3627:71;:::i;:::-;3620:78;;3707:52;3752:6;3747:3;3740:4;3733:5;3729:16;3707:52;:::i;:::-;3784:29;3806:6;3784:29;:::i;:::-;3779:3;3775:39;3768:46;;3548:272;;;;;:::o;3850:937::-;;3972:5;3966:12;4009:1;3998:9;3994:17;4025:1;4020:281;;;;4315:1;4310:471;;;;3987:794;;4020:281;4110:4;4106:1;4095:9;4091:17;4087:28;4135:71;4199:6;4194:3;4135:71;:::i;:::-;4128:78;;4250:4;4246:9;4235;4231:25;4226:3;4219:38;4286:4;4281:3;4277:14;4270:21;;4027:274;4020:281;;4310:471;4391:1;4380:9;4376:17;4413:71;4477:6;4472:3;4413:71;:::i;:::-;4406:78;;4512:38;4544:5;4512:38;:::i;:::-;4572:1;4586:154;4600:6;4597:1;4594:13;4586:154;;;4674:7;4668:14;4664:1;4659:3;4655:11;4648:35;4724:1;4715:7;4711:15;4700:26;;4622:4;4619:1;4615:12;4610:17;;4586:154;;;4769:1;4764:3;4760:11;4753:18;;4317:464;;;3987:794;;3939:848;;;;;:::o;4817:998::-;;4957:5;4951:12;4994:1;4983:9;4979:17;5010:1;5005:301;;;;5320:1;5315:494;;;;4972:837;;5005:301;5095:4;5091:1;5080:9;5076:17;5072:28;5120:89;5202:6;5197:3;5120:89;:::i;:::-;5113:96;;5253:4;5249:9;5238;5234:25;5229:3;5222:38;5289:6;5284:3;5280:16;5273:23;;5012:294;5005:301;;5315:494;5396:1;5385:9;5381:17;5418:89;5500:6;5495:3;5418:89;:::i;:::-;5411:96;;5535:38;5567:5;5535:38;:::i;:::-;5595:1;5609:154;5623:6;5620:1;5617:13;5609:154;;;5697:7;5691:14;5687:1;5682:3;5678:11;5671:35;5747:1;5738:7;5734:15;5723:26;;5645:4;5642:1;5638:12;5633:17;;5609:154;;;5792:6;5787:3;5783:16;5776:23;;5322:487;;;4972:837;;4924:891;;;;;:::o;5821:319::-;;5984:67;6048:2;6043:3;5984:67;:::i;:::-;5977:74;;6081:23;6077:1;6072:3;6068:11;6061:44;6131:2;6126:3;6122:12;6115:19;;5967:173;;;:::o;6146:322::-;;6309:67;6373:2;6368:3;6309:67;:::i;:::-;6302:74;;6406:26;6402:1;6397:3;6393:11;6386:47;6459:2;6454:3;6450:12;6443:19;;6292:176;;;:::o;6474:317::-;;6637:67;6701:2;6696:3;6637:67;:::i;:::-;6630:74;;6734:21;6730:1;6725:3;6721:11;6714:42;6782:2;6777:3;6773:12;6766:19;;6620:171;;;:::o;6797:324::-;;6960:67;7024:2;7019:3;6960:67;:::i;:::-;6953:74;;7057:28;7053:1;7048:3;7044:11;7037:49;7112:2;7107:3;7103:12;7096:19;;6943:178;;;:::o;7127:118::-;7214:24;7232:5;7214:24;:::i;:::-;7209:3;7202:37;7192:53;;:::o;7251:295::-;;7415:105;7516:3;7507:6;7499;7415:105;:::i;:::-;7408:112;;7537:3;7530:10;;7397:149;;;;;:::o;7552:269::-;;7703:92;7791:3;7782:6;7703:92;:::i;:::-;7696:99;;7812:3;7805:10;;7685:136;;;;:::o;7827:222::-;;7958:2;7947:9;7943:18;7935:26;;7971:71;8039:1;8028:9;8024:17;8015:6;7971:71;:::i;:::-;7925:124;;;;:::o;8055:309::-;;8204:2;8193:9;8189:18;8181:26;;8253:9;8247:4;8243:20;8239:1;8228:9;8224:17;8217:47;8281:76;8352:4;8343:6;8281:76;:::i;:::-;8273:84;;8171:193;;;;:::o;8370:333::-;;8531:2;8520:9;8516:18;8508:26;;8580:9;8574:4;8570:20;8566:1;8555:9;8551:17;8544:47;8608:88;8691:4;8682:6;8674;8608:88;:::i;:::-;8600:96;;8498:205;;;;;:::o;8709:313::-;;8860:2;8849:9;8845:18;8837:26;;8909:9;8903:4;8899:20;8895:1;8884:9;8880:17;8873:47;8937:78;9010:4;9001:6;8937:78;:::i;:::-;8929:86;;8827:195;;;;:::o;9028:423::-;;9207:2;9196:9;9192:18;9184:26;;9256:9;9250:4;9246:20;9242:1;9231:9;9227:17;9220:47;9284:78;9357:4;9348:6;9284:78;:::i;:::-;9276:86;;9372:72;9440:2;9429:9;9425:18;9416:6;9372:72;:::i;:::-;9174:277;;;;;:::o;9457:307::-;;9605:2;9594:9;9590:18;9582:26;;9654:9;9648:4;9644:20;9640:1;9629:9;9625:17;9618:47;9682:75;9752:4;9743:6;9682:75;:::i;:::-;9674:83;;9572:192;;;;:::o;9770:419::-;;9974:2;9963:9;9959:18;9951:26;;10023:9;10017:4;10013:20;10009:1;9998:9;9994:17;9987:47;10051:131;10177:4;10051:131;:::i;:::-;10043:139;;9941:248;;;:::o;10195:419::-;;10399:2;10388:9;10384:18;10376:26;;10448:9;10442:4;10438:20;10434:1;10423:9;10419:17;10412:47;10476:131;10602:4;10476:131;:::i;:::-;10468:139;;10366:248;;;:::o;10620:419::-;;10824:2;10813:9;10809:18;10801:26;;10873:9;10867:4;10863:20;10859:1;10848:9;10844:17;10837:47;10901:131;11027:4;10901:131;:::i;:::-;10893:139;;10791:248;;;:::o;11045:419::-;;11249:2;11238:9;11234:18;11226:26;;11298:9;11292:4;11288:20;11284:1;11273:9;11269:17;11262:47;11326:131;11452:4;11326:131;:::i;:::-;11318:139;;11216:248;;;:::o;11470:222::-;;11601:2;11590:9;11586:18;11578:26;;11614:71;11682:1;11671:9;11667:17;11658:6;11614:71;:::i;:::-;11568:124;;;;:::o;11698:141::-;;11770:3;11762:11;;11793:3;11790:1;11783:14;11827:4;11824:1;11814:18;11806:26;;11752:87;;;:::o;11845:98::-;;11930:5;11924:12;11914:22;;11903:40;;;:::o;11949:99::-;;12035:5;12029:12;12019:22;;12008:40;;;:::o;12054:168::-;;12171:6;12166:3;12159:19;12211:4;12206:3;12202:14;12187:29;;12149:73;;;;:::o;12228:169::-;;12346:6;12341:3;12334:19;12386:4;12381:3;12377:14;12362:29;;12324:73;;;;:::o;12403:148::-;;12542:3;12527:18;;12517:34;;;;:::o;12557:96::-;;12623:24;12641:5;12623:24;:::i;:::-;12612:35;;12602:51;;;:::o;12659:126::-;;12736:42;12729:5;12725:54;12714:65;;12704:81;;;:::o;12791:77::-;;12857:5;12846:16;;12836:32;;;:::o;12874:154::-;12958:6;12953:3;12948;12935:30;13020:1;13011:6;13006:3;13002:16;12995:27;12925:103;;;:::o;13034:307::-;13102:1;13112:113;13126:6;13123:1;13120:13;13112:113;;;13211:1;13206:3;13202:11;13196:18;13192:1;13187:3;13183:11;13176:39;13148:2;13145:1;13141:10;13136:15;;13112:113;;;13243:6;13240:1;13237:13;13234:2;;;13323:1;13314:6;13309:3;13305:16;13298:27;13234:2;13083:258;;;;:::o;13347:102::-;;13439:2;13435:7;13430:2;13423:5;13419:14;13415:28;13405:38;;13395:54;;;:::o;13455:122::-;13528:24;13546:5;13528:24;:::i;:::-;13521:5;13518:35;13508:2;;13567:1;13564;13557:12;13508:2;13498:79;:::o;13583:122::-;13656:24;13674:5;13656:24;:::i;:::-;13649:5;13646:35;13636:2;;13695:1;13692;13685:12;13636:2;13626:79;:::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "1351800",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "_removeDocument(string)": "infinite",
            "_setDocument(string,string)": "infinite",
            "getAllDocuments()": "infinite",
            "getDocument(string)": "infinite",
            "getDocumentCount()": "1146",
            "getDocumentName(uint256)": "infinite",
            "owner()": "1289",
            "renounceOwnership()": "24352",
            "transferOwnership(address)": "infinite"
          }
        },
        "methodIdentifiers": {
          "_removeDocument(string)": "de7afa4b",
          "_setDocument(string,string)": "f3494ae9",
          "getAllDocuments()": "9fa5f50b",
          "getDocument(string)": "7ccb6a64",
          "getDocumentCount()": "3d1c2273",
          "getDocumentName(uint256)": "c6b547e6",
          "owner()": "8da5cb5b",
          "renounceOwnership()": "715018a6",
          "transferOwnership(address)": "f2fde38b"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"DocumentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"DocumentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"_removeDocument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"_setDocument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDocuments\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getDocument\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDocumentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDocumentName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_removeDocument(string)\":{\"details\":\"Can only be executed by the owner of the contract.\",\"params\":{\"_name\":\"Name of the document. It should be unique always\"}},\"_setDocument(string,string)\":{\"details\":\"Can only be executed by the owner of the contract.\",\"params\":{\"_data\":\"Off-chain data of the document from where it is accessible to investors/advisors to read.\",\"_name\":\"Name of the document. It should be unique always\"}},\"getAllDocuments()\":{\"returns\":{\"_0\":\"string List of all documents names present in the contract.\"}},\"getDocument(string)\":{\"params\":{\"_name\":\"Name of the document\"},\"returns\":{\"_0\":\"string The data associated with the document.\",\"_1\":\"uint256 the timestamp at which the document was last modified.\"}},\"getDocumentCount()\":{\"returns\":{\"_0\":\"uint256 Count of the document names present in the contract.\"}},\"getDocumentName(uint256)\":{\"returns\":{\"_0\":\"string Name of the document name.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Standard implementation of ERC1643 Document management\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_removeDocument(string)\":{\"notice\":\"Used to remove an existing document from the contract by giving the name of the document.\"},\"_setDocument(string,string)\":{\"notice\":\"Used to attach a new document to the contract, or update the data or hash of an existing attached document\"},\"getAllDocuments()\":{\"notice\":\"Used to retrieve a full list of documents attached to the smart contract.\"},\"getDocument(string)\":{\"notice\":\"Used to return the details of a document with a known name (`string`).\"},\"getDocumentCount()\":{\"notice\":\"Used to retrieve the total documents in the smart contract.\"},\"getDocumentName(uint256)\":{\"notice\":\"Used to retrieve the document name from index in the smart contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Utils/BatchDocuments.sol\":\"BatchDocuments\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/Utils/BatchDocuments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../seriality/Seriality.sol\\\";\\n\\n/**\\n * @title Standard implementation of ERC1643 Document management\\n */\\ncontract BatchDocuments is Ownable, Seriality {\\n    struct Document {\\n        uint32 docIndex; // Store the document name indexes\\n        uint64 lastModified; // Timestamp at which document details was last modified\\n        string data; // data of the document that exist off-chain\\n    }\\n\\n    // mapping to store the documents details in the document\\n    mapping(string => Document) internal _documents;\\n    // mapping to store the document name indexes\\n    mapping(string => uint32) internal _docIndexes;\\n    // Array use to store all the document name present in the contracts\\n    string[] internal _docNames;\\n\\n    constructor() public Ownable() {}\\n\\n    // Document Events\\n    event DocumentRemoved(string indexed _name, string _data);\\n    event DocumentUpdated(string indexed _name, string _data);\\n\\n    /**\\n     * @notice Used to attach a new document to the contract, or update the data or hash of an existing attached document\\n     * @dev Can only be executed by the owner of the contract.\\n     * @param _name Name of the document. It should be unique always\\n     * @param _data Off-chain data of the document from where it is accessible to investors/advisors to read.\\n     */\\n    function _setDocument(string calldata _name, string calldata _data)\\n        external\\n        onlyOwner\\n    {\\n        require(bytes(_name).length > 0, \\\"Zero name is not allowed\\\");\\n        require(bytes(_data).length > 0, \\\"Should not be a empty data\\\");\\n        // Document storage document = _documents[_name];\\n        if (_documents[_name].lastModified == uint64(0)) {\\n            _docNames.push(_name);\\n            _documents[_name].docIndex = uint32(_docNames.length);\\n        }\\n        _documents[_name] = Document(\\n            _documents[_name].docIndex,\\n            uint64(block.timestamp),\\n            _data\\n        );\\n        emit DocumentUpdated(_name, _data);\\n    }\\n\\n    /**\\n     * @notice Used to remove an existing document from the contract by giving the name of the document.\\n     * @dev Can only be executed by the owner of the contract.\\n     * @param _name Name of the document. It should be unique always\\n     */\\n\\n    function _removeDocument(string calldata _name) external onlyOwner {\\n        require(\\n            _documents[_name].lastModified != uint64(0),\\n            \\\"Document should exist\\\"\\n        );\\n        uint32 index = _documents[_name].docIndex - 1;\\n        if (index != _docNames.length - 1) {\\n            _docNames[index] = _docNames[_docNames.length - 1];\\n            _documents[_docNames[index]].docIndex = index + 1;\\n        }\\n        _docNames.pop();\\n        emit DocumentRemoved(_name, _documents[_name].data);\\n        delete _documents[_name];\\n    }\\n\\n    /**\\n     * @notice Used to return the details of a document with a known name (`string`).\\n     * @param _name Name of the document\\n     * @return string The data associated with the document.\\n     * @return uint256 the timestamp at which the document was last modified.\\n     */\\n    function getDocument(string calldata _name)\\n        external\\n        view\\n        returns (string memory, uint256)\\n    {\\n        return (\\n            _documents[_name].data,\\n            uint256(_documents[_name].lastModified)\\n        );\\n    }\\n\\n    /**\\n     * @notice Used to retrieve a full list of documents attached to the smart contract.\\n     * @return string List of all documents names present in the contract.\\n     */\\n    function getAllDocuments() external view returns (bytes memory) {\\n        uint startindex = 0;\\n        uint endindex = _docNames.length;\\n        require(endindex >= startindex);\\n\\n        if (endindex > (_docNames.length - 1)) {\\n            endindex = _docNames.length - 1;\\n        }\\n\\n        uint offset = 64 * ((endindex - startindex) + 1);\\n\\n        bytes memory buffer = new bytes(offset);\\n        string memory out1 = new string(32);\\n\\n        for (uint i = startindex; i <= endindex; i++) {\\n            out1 = _docNames[i];\\n\\n            stringToBytes(offset, bytes(out1), buffer);\\n            offset -= sizeOfString(out1);\\n        }\\n        return buffer;\\n    }\\n\\n    /**\\n     * @notice Used to retrieve the total documents in the smart contract.\\n     * @return uint256 Count of the document names present in the contract.\\n     */\\n    function getDocumentCount() external view returns (uint256) {\\n        return _docNames.length;\\n    }\\n\\n    /**\\n     * @notice Used to retrieve the document name from index in the smart contract.\\n     * @return string Name of the document name.\\n     */\\n    function getDocumentName(uint256 _index)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        require(_index < _docNames.length, \\\"Index out of bounds\\\");\\n        return _docNames[_index];\\n    }\\n}\\n\",\"keccak256\":\"0x3a9cf582de02174599c7c2ce35dfddadfab0cf9e521fbb22d023f5492ef668d7\",\"license\":\"MIT\"},\"contracts/seriality/BytesToTypes.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/**\\n * @title BytesToTypes\\n * @dev The BytesToTypes contract converts the memory byte arrays to the standard solidity types\\n * @author pouladzade@gmail.com\\n */\\n\\ncontract BytesToTypes {\\n    function bytesToAddress(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (address _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToBool(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (bool _output)\\n    {\\n        uint8 x;\\n        assembly {\\n            x := mload(add(_input, _offst))\\n        }\\n        x == 0 ? _output = false : _output = true;\\n    }\\n\\n    function getStringSize(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint size)\\n    {\\n        assembly {\\n            size := mload(add(_input, _offst))\\n            let chunk_count := add(div(size, 32), 1) // chunk_count = size/32 + 1\\n\\n            if gt(mod(size, 32), 0) {\\n                // if size%32 > 0\\n                chunk_count := add(chunk_count, 1)\\n            }\\n\\n            size := mul(chunk_count, 32) // first 32 bytes reseves for size in strings\\n        }\\n    }\\n\\n    function bytesToString(\\n        uint _offst,\\n        bytes memory _input,\\n        bytes memory _output\\n    ) internal pure {\\n        uint size = 32;\\n        assembly {\\n            let chunk_count\\n\\n            size := mload(add(_input, _offst))\\n            chunk_count := add(div(size, 32), 1) // chunk_count = size/32 + 1\\n\\n            if gt(mod(size, 32), 0) {\\n                chunk_count := add(chunk_count, 1) // chunk_count++\\n            }\\n\\n            for {\\n                let index := 0\\n            } lt(index, chunk_count) {\\n                index := add(index, 1)\\n            } {\\n                mstore(add(_output, mul(index, 32)), mload(add(_input, _offst)))\\n                _offst := sub(_offst, 32) // _offst -= 32\\n            }\\n        }\\n    }\\n\\n    function bytesToBytes32(\\n        uint _offst,\\n        bytes memory _input,\\n        bytes32 _output\\n    ) internal pure {\\n        assembly {\\n            mstore(_output, add(_input, _offst))\\n            mstore(add(_output, 32), add(add(_input, _offst), 32))\\n        }\\n    }\\n\\n    function bytesToInt8(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int8 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt16(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int16 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt24(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int24 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt32(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int32 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt40(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int40 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt48(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int48 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt56(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int56 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt64(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int64 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt72(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int72 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt80(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int80 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt88(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int88 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt96(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int96 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt104(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int104 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt112(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int112 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt120(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int120 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt128(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int128 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt136(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int136 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt144(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int144 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt152(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int152 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt160(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int160 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt168(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int168 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt176(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int176 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt184(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int184 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt192(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int192 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt200(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int200 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt208(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int208 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt216(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int216 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt224(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int224 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt232(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int232 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt240(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int240 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt248(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int248 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt256(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int256 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint8(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint8 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint16(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint16 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint24(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint24 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint32(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint32 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint40(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint40 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint48(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint48 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint56(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint56 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint64(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint64 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint72(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint72 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint80(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint80 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint88(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint88 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint96(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint96 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint104(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint104 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint112(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint112 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint120(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint120 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint128(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint128 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint136(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint136 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint144(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint144 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint152(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint152 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint160(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint160 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint168(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint168 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint176(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint176 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint184(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint184 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint192(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint192 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint200(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint200 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint208(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint208 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint216(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint216 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint224(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint224 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint232(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint232 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint240(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint240 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint248(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint248 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint256(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint256 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x59fe3df0aacc99ac3ec038ab0e7c090a87545e1dd7dc68c2cb027f8e002f07ba\"},\"contracts/seriality/Seriality.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/**\\n * @title Seriality\\n * @dev The Seriality contract is the main interface for serializing data using the TypeToBytes, BytesToType and SizeOf\\n * @author pouladzade@gmail.com\\n */\\n\\nimport \\\"./BytesToTypes.sol\\\";\\nimport \\\"./TypesToBytes.sol\\\";\\nimport \\\"./SizeOf.sol\\\";\\n\\ncontract Seriality is BytesToTypes, TypesToBytes, SizeOf {\\n    constructor() public {}\\n}\\n\",\"keccak256\":\"0xb3612f5f04bde4eee045fe72788e0488a6311e28a890c96a697e535d15d29c90\"},\"contracts/seriality/SizeOf.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/**\\n * @title SizeOf\\n * @dev The SizeOf return the size of the solidity types in byte\\n * @author pouladzade@gmail.com\\n */\\n\\ncontract SizeOf {\\n    function sizeOfString(string memory _in)\\n        internal\\n        pure\\n        returns (uint _size)\\n    {\\n        _size = bytes(_in).length / 32;\\n        if (bytes(_in).length % 32 != 0) _size++;\\n\\n        _size++; // first 32 bytes is reserved for the size of the string\\n        _size *= 32;\\n    }\\n\\n    function sizeOfInt(uint16 _postfix) internal pure returns (uint size) {\\n        assembly {\\n            switch _postfix\\n                case 8 {\\n                    size := 1\\n                }\\n                case 16 {\\n                    size := 2\\n                }\\n                case 24 {\\n                    size := 3\\n                }\\n                case 32 {\\n                    size := 4\\n                }\\n                case 40 {\\n                    size := 5\\n                }\\n                case 48 {\\n                    size := 6\\n                }\\n                case 56 {\\n                    size := 7\\n                }\\n                case 64 {\\n                    size := 8\\n                }\\n                case 72 {\\n                    size := 9\\n                }\\n                case 80 {\\n                    size := 10\\n                }\\n                case 88 {\\n                    size := 11\\n                }\\n                case 96 {\\n                    size := 12\\n                }\\n                case 104 {\\n                    size := 13\\n                }\\n                case 112 {\\n                    size := 14\\n                }\\n                case 120 {\\n                    size := 15\\n                }\\n                case 128 {\\n                    size := 16\\n                }\\n                case 136 {\\n                    size := 17\\n                }\\n                case 144 {\\n                    size := 18\\n                }\\n                case 152 {\\n                    size := 19\\n                }\\n                case 160 {\\n                    size := 20\\n                }\\n                case 168 {\\n                    size := 21\\n                }\\n                case 176 {\\n                    size := 22\\n                }\\n                case 184 {\\n                    size := 23\\n                }\\n                case 192 {\\n                    size := 24\\n                }\\n                case 200 {\\n                    size := 25\\n                }\\n                case 208 {\\n                    size := 26\\n                }\\n                case 216 {\\n                    size := 27\\n                }\\n                case 224 {\\n                    size := 28\\n                }\\n                case 232 {\\n                    size := 29\\n                }\\n                case 240 {\\n                    size := 30\\n                }\\n                case 248 {\\n                    size := 31\\n                }\\n                case 256 {\\n                    size := 32\\n                }\\n                default {\\n                    size := 32\\n                }\\n        }\\n    }\\n\\n    function sizeOfUint(uint16 _postfix) internal pure returns (uint size) {\\n        return sizeOfInt(_postfix);\\n    }\\n\\n    function sizeOfAddress() internal pure returns (uint8) {\\n        return 20;\\n    }\\n\\n    function sizeOfBool() internal pure returns (uint8) {\\n        return 1;\\n    }\\n}\\n\",\"keccak256\":\"0x290355d5ee2ebf13fa619ceb33771e9200ecaa7dcbfb561444a1bb1366e21b67\"},\"contracts/seriality/TypesToBytes.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/**\\n * @title TypesToBytes\\n * @dev The TypesToBytes contract converts the standard solidity types to the byte array\\n * @author pouladzade@gmail.com\\n */\\n\\ncontract TypesToBytes {\\n    function addressToBytes(\\n        uint _offst,\\n        address _input,\\n        bytes memory _output\\n    ) internal pure {\\n        assembly {\\n            mstore(add(_output, _offst), _input)\\n        }\\n    }\\n\\n    function bytes32ToBytes(\\n        uint _offst,\\n        bytes32 _input,\\n        bytes memory _output\\n    ) internal pure {\\n        assembly {\\n            mstore(add(_output, _offst), _input)\\n            mstore(add(add(_output, _offst), 32), add(_input, 32))\\n        }\\n    }\\n\\n    function boolToBytes(\\n        uint _offst,\\n        bool _input,\\n        bytes memory _output\\n    ) internal pure {\\n        uint8 x = _input == false ? 0 : 1;\\n        assembly {\\n            mstore(add(_output, _offst), x)\\n        }\\n    }\\n\\n    function stringToBytes(\\n        uint _offst,\\n        bytes memory _input,\\n        bytes memory _output\\n    ) internal pure {\\n        uint256 stack_size = _input.length / 32;\\n        if (_input.length % 32 > 0) stack_size++;\\n\\n        assembly {\\n            stack_size := add(stack_size, 1) //adding because of 32 first bytes memory as the length\\n            for {\\n                let index := 0\\n            } lt(index, stack_size) {\\n                index := add(index, 1)\\n            } {\\n                mstore(add(_output, _offst), mload(add(_input, mul(index, 32))))\\n                _offst := sub(_offst, 32)\\n            }\\n        }\\n    }\\n\\n    function intToBytes(\\n        uint _offst,\\n        int _input,\\n        bytes memory _output\\n    ) internal pure {\\n        assembly {\\n            mstore(add(_output, _offst), _input)\\n        }\\n    }\\n\\n    function uintToBytes(\\n        uint _offst,\\n        uint _input,\\n        bytes memory _output\\n    ) internal pure {\\n        assembly {\\n            mstore(add(_output, _offst), _input)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1201f0a2437e16da281d319b24263ed8938cdfad8ee4be963ce1d3025f970206\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 290,
            "contract": "contracts/Utils/BatchDocuments.sol:BatchDocuments",
            "label": "_owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2908,
            "contract": "contracts/Utils/BatchDocuments.sol:BatchDocuments",
            "label": "_documents",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_string_memory_ptr,t_struct(Document)2904_storage)"
          },
          {
            "astId": 2912,
            "contract": "contracts/Utils/BatchDocuments.sol:BatchDocuments",
            "label": "_docIndexes",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)"
          },
          {
            "astId": 2915,
            "contract": "contracts/Utils/BatchDocuments.sol:BatchDocuments",
            "label": "_docNames",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_string_storage)dyn_storage": {
            "base": "t_string_storage",
            "encoding": "dynamic_array",
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_mapping(t_string_memory_ptr,t_struct(Document)2904_storage)": {
            "encoding": "mapping",
            "key": "t_string_memory_ptr",
            "label": "mapping(string => struct BatchDocuments.Document)",
            "numberOfBytes": "32",
            "value": "t_struct(Document)2904_storage"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "encoding": "mapping",
            "key": "t_string_memory_ptr",
            "label": "mapping(string => uint32)",
            "numberOfBytes": "32",
            "value": "t_uint32"
          },
          "t_string_memory_ptr": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Document)2904_storage": {
            "encoding": "inplace",
            "label": "struct BatchDocuments.Document",
            "members": [
              {
                "astId": 2899,
                "contract": "contracts/Utils/BatchDocuments.sol:BatchDocuments",
                "label": "docIndex",
                "offset": 0,
                "slot": "0",
                "type": "t_uint32"
              },
              {
                "astId": 2901,
                "contract": "contracts/Utils/BatchDocuments.sol:BatchDocuments",
                "label": "lastModified",
                "offset": 4,
                "slot": "0",
                "type": "t_uint64"
              },
              {
                "astId": 2903,
                "contract": "contracts/Utils/BatchDocuments.sol:BatchDocuments",
                "label": "data",
                "offset": 0,
                "slot": "1",
                "type": "t_string_storage"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint32": {
            "encoding": "inplace",
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "encoding": "inplace",
            "label": "uint64",
            "numberOfBytes": "8"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "_removeDocument(string)": {
            "notice": "Used to remove an existing document from the contract by giving the name of the document."
          },
          "_setDocument(string,string)": {
            "notice": "Used to attach a new document to the contract, or update the data or hash of an existing attached document"
          },
          "getAllDocuments()": {
            "notice": "Used to retrieve a full list of documents attached to the smart contract."
          },
          "getDocument(string)": {
            "notice": "Used to return the details of a document with a known name (`string`)."
          },
          "getDocumentCount()": {
            "notice": "Used to retrieve the total documents in the smart contract."
          },
          "getDocumentName(uint256)": {
            "notice": "Used to retrieve the document name from index in the smart contract."
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/Access/AnnexAccessControls.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nimport \\\"./AnnexAdminAccess.sol\\\";\\n\\ncontract ANNEXAccessControls is AnnexAdminAccess {\\n    /// @notice Role definitions\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant SMART_CONTRACT_ROLE =\\n        keccak256(\\\"SMART_CONTRACT_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /// @notice Events for adding and removing various roles\\n\\n    event MinterRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event MinterRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses\\n     */\\n    constructor() public {}\\n\\n    /////////////\\n    // Lookups //\\n    /////////////\\n\\n    /**\\n     * @notice Used to check whether an address has the minter role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasMinterRole(address _address) public view returns (bool) {\\n        return hasRole(MINTER_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the smart contract role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasSmartContractRole(address _address) public view returns (bool) {\\n        return hasRole(SMART_CONTRACT_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the operator role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasOperatorRole(address _address) public view returns (bool) {\\n        return hasRole(OPERATOR_ROLE, _address);\\n    }\\n\\n    ///////////////\\n    // Modifiers //\\n    ///////////////\\n\\n    /**\\n     * @notice Grants the minter role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addMinterRole(address _address) external {\\n        grantRole(MINTER_ROLE, _address);\\n        emit MinterRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the minter role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeMinterRole(address _address) external {\\n        revokeRole(MINTER_ROLE, _address);\\n        emit MinterRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the smart contract role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addSmartContractRole(address _address) external {\\n        grantRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the smart contract role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeSmartContractRole(address _address) external {\\n        revokeRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the operator role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addOperatorRole(address _address) external {\\n        grantRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the operator role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeOperatorRole(address _address) external {\\n        revokeRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleRemoved(_address, _msgSender());\\n    }\\n}\\n\"\n    },\n    \"contracts/Access/AnnexAdminAccess.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract AnnexAdminAccess is AccessControl {\\n    /// @dev Whether access is initialised.\\n    bool private initAccess;\\n\\n    /// @notice Events for adding and removing various roles.\\n    event AdminRoleGranted(address indexed beneficiary, address indexed caller);\\n\\n    event AdminRoleRemoved(address indexed beneficiary, address indexed caller);\\n\\n    /// @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses.\\n    constructor() public {}\\n\\n    /**\\n     * @notice Initializes access controls.\\n     * @param _admin Admins address.\\n     */\\n    function initAccessControls(address _admin) public {\\n        require(!initAccess, \\\"Already initialised\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        initAccess = true;\\n    }\\n\\n    /////////////\\n    // Lookups //\\n    /////////////\\n\\n    /**\\n     * @notice Used to check whether an address has the admin role.\\n     * @param _address EOA or contract being checked.\\n     * @return bool True if the account has the role or false if it does not.\\n     */\\n    function hasAdminRole(address _address) public view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\n    }\\n\\n    ///////////////\\n    // Modifiers //\\n    ///////////////\\n\\n    /**\\n     * @notice Grants the admin role to an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract receiving the new role.\\n     */\\n    function addAdminRole(address _address) external {\\n        grantRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the admin role from an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract affected.\\n     */\\n    function removeAdminRole(address _address) external {\\n        revokeRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleRemoved(_address, _msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/IterableOrderedOrderSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\n/**\\n    ERROR_ZERO : Inserting zero is not supported\\n    INVALID_ELE : Inserting element is not valid\\n    ERROR_SAME_ORDER : user is not allowed to place same order twice\\n    EMPTY_SET : Trying to get first from empty set\\n    ERROR_NEXT : Trying to get next of last element\\n    NON_EXISTENT : Trying to get next of non-existent element\\n\\n    \\n**/\\n\\nlibrary IterableOrderedOrderSet {\\n    using SafeMath for uint96;\\n    using IterableOrderedOrderSet for bytes32;\\n\\n    // represents smallest possible value for an order under comparison of fn smallerThan()\\n    bytes32 internal constant QUEUE_START =\\n        0x0000000000000000000000000000000000000000000000000000000000000001;\\n    // represents highest possible value for an order under comparison of fn smallerThan()\\n    bytes32 internal constant QUEUE_END =\\n        0xffffffffffffffffffffffffffffffffffffffff000000000000000000000001;\\n\\n    /// The struct is used to implement a modified version of a doubly linked\\n    /// list with sorted elements. The list starts from QUEUE_START to\\n    /// QUEUE_END, and each node keeps track of its predecessor and successor.\\n    /// Nodes can be added or removed.\\n    ///\\n    /// `next` and `prev` have a different role. The list is supposed to be\\n    /// traversed with `next`. If `next` is empty, the node is not part of the\\n    /// list. However, `prev` might be set for elements that are not in the\\n    /// list, which is why it should not be used for traversing. Having a `prev`\\n    /// set for elements not in the list is used to keep track of the history of\\n    /// the position in the list of a removed element.\\n    struct Data {\\n        mapping(bytes32 => bytes32) nextMap;\\n        mapping(bytes32 => bytes32) prevMap;\\n    }\\n\\n    struct Order {\\n        uint64 owner;\\n        uint96 buyAmount;\\n        uint96 sellAmount;\\n    }\\n\\n    function initializeEmptyList(Data storage self) internal {\\n        self.nextMap[QUEUE_START] = QUEUE_END;\\n        self.prevMap[QUEUE_END] = QUEUE_START;\\n    }\\n\\n    function isEmpty(Data storage self) internal view returns (bool) {\\n        return self.nextMap[QUEUE_START] == QUEUE_END;\\n    }\\n\\n    function insert(\\n        Data storage self,\\n        bytes32 elementToInsert,\\n        bytes32 elementBeforeNewOne\\n    ) internal returns (bool) {\\n        (, , uint96 denominator) = decodeOrder(elementToInsert);\\n        require(denominator != uint96(0), \\\"ERROR_ZERO\\\");\\n        require(\\n            elementToInsert != QUEUE_START && elementToInsert != QUEUE_END,\\n            \\\"INVALID_ELE\\\"\\n        );\\n        if (contains(self, elementToInsert)) {\\n            return false;\\n        }\\n        if (\\n            elementBeforeNewOne != QUEUE_START &&\\n            self.prevMap[elementBeforeNewOne] == bytes32(0)\\n        ) {\\n            return false;\\n        }\\n        if (!elementBeforeNewOne.smallerThan(elementToInsert)) {\\n            return false;\\n        }\\n\\n        // `elementBeforeNewOne` might have been removed during the time it\\n        // took to the transaction calling this function to be mined, so\\n        // the new order cannot be appended directly to this. We follow the\\n        // history of previous links backwards until we find an element in\\n        // the list from which to start our search.\\n        // Note that following the link backwards returns elements that are\\n        // before `elementBeforeNewOne` in sorted order.\\n        while (self.nextMap[elementBeforeNewOne] == bytes32(0)) {\\n            elementBeforeNewOne = self.prevMap[elementBeforeNewOne];\\n        }\\n\\n        // `elementBeforeNewOne` belongs now to the linked list. We search the\\n        // largest entry that is smaller than the element to insert.\\n        bytes32 previous;\\n        bytes32 current = elementBeforeNewOne;\\n        do {\\n            previous = current;\\n            current = self.nextMap[current];\\n        } while (current.smallerThan(elementToInsert));\\n        // Note: previous < elementToInsert < current\\n        self.nextMap[previous] = elementToInsert;\\n        self.prevMap[current] = elementToInsert;\\n        self.prevMap[elementToInsert] = previous;\\n        self.nextMap[elementToInsert] = current;\\n\\n        return true;\\n    }\\n\\n    /// The element is removed from the linked list, but the node retains\\n    /// information on which predecessor it had, so that a node in the chain\\n    /// can be reached by following the predecessor chain of deleted elements.\\n    function removeKeepHistory(Data storage self, bytes32 elementToRemove)\\n        internal\\n        returns (bool)\\n    {\\n        if (!contains(self, elementToRemove)) {\\n            return false;\\n        }\\n        bytes32 previousElement = self.prevMap[elementToRemove];\\n        bytes32 nextElement = self.nextMap[elementToRemove];\\n        self.nextMap[previousElement] = nextElement;\\n        self.prevMap[nextElement] = previousElement;\\n        self.nextMap[elementToRemove] = bytes32(0);\\n        return true;\\n    }\\n\\n    /// Remove an element from the chain, clearing all related storage.\\n    /// Note that no elements should be inserted using as a reference point a\\n    /// node deleted after calling `remove`, since an element in the `prev`\\n    /// chain might be missing.\\n    function remove(Data storage self, bytes32 elementToRemove)\\n        internal\\n        returns (bool)\\n    {\\n        bool result = removeKeepHistory(self, elementToRemove);\\n        if (result) {\\n            self.prevMap[elementToRemove] = bytes32(0);\\n        }\\n        return result;\\n    }\\n\\n    function contains(Data storage self, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (value == QUEUE_START) {\\n            return false;\\n        }\\n        // Note: QUEUE_END is not contained in the list since it has no\\n        // successor.\\n        return self.nextMap[value] != bytes32(0);\\n    }\\n\\n    // @dev orders are ordered by\\n    // 1. their price - buyAmount/sellAmount\\n    // 2. by the sellAmount\\n    // 3. their userId,\\n    function smallerThan(bytes32 orderLeft, bytes32 orderRight)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        (\\n            uint64 userIdLeft,\\n            uint96 priceNumeratorLeft,\\n            uint96 priceDenominatorLeft\\n        ) = decodeOrder(orderLeft);\\n        (\\n            uint64 userIdRight,\\n            uint96 priceNumeratorRight,\\n            uint96 priceDenominatorRight\\n        ) = decodeOrder(orderRight);\\n\\n        if (\\n            priceNumeratorLeft.mul(priceDenominatorRight) <\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\n        ) return true;\\n        if (\\n            priceNumeratorLeft.mul(priceDenominatorRight) >\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\n        ) return false;\\n\\n        if (priceNumeratorLeft < priceNumeratorRight) return true;\\n        if (priceNumeratorLeft > priceNumeratorRight) return false;\\n        require(\\n            userIdLeft != userIdRight,\\n            \\\"ERROR_SAME_ORDER\\\"\\n        );\\n        if (userIdLeft < userIdRight) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function first(Data storage self) internal view returns (bytes32) {\\n        require(!isEmpty(self), \\\"EMPTY_SET\\\");\\n        return self.nextMap[QUEUE_START];\\n    }\\n\\n    function next(Data storage self, bytes32 value)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        require(value != QUEUE_END, \\\"ERROR_NEXT\\\");\\n        bytes32 nextElement = self.nextMap[value];\\n        require(\\n            nextElement != bytes32(0),\\n            \\\"NON_EXISTENT\\\"\\n        );\\n        return nextElement;\\n    }\\n\\n    function decodeOrder(bytes32 _orderData)\\n        internal\\n        pure\\n        returns (\\n            uint64 userId,\\n            uint96 buyAmount,\\n            uint96 sellAmount\\n        )\\n    {\\n        // Note: converting to uint discards the binary digits that do not fit\\n        // the type.\\n        userId = uint64(uint256(_orderData) >> 192);\\n        buyAmount = uint96(uint256(_orderData) >> 96);\\n        sellAmount = uint96(uint256(_orderData));\\n    }\\n\\n    function encodeOrder(\\n        uint64 userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(\\n                (uint256(userId) << 192) +\\n                    (uint256(buyAmount) << 96) +\\n                    uint256(sellAmount)\\n            );\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IPancakeswapV2Router02.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IPancakeswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        returns (\\n            uint amountA,\\n            uint amountB,\\n            uint liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint amountToken,\\n            uint amountETH,\\n            uint liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) external pure returns (uint amountB);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountOut);\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(uint amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint[] memory amounts);\\n\\n    function getAmountsIn(uint amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint[] memory amounts);\\n}\\n\\ninterface IPancakeswapV2Router02 is IPancakeswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IPancakeswapV2Factory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IPancakeswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IPancakeswapV2Pair.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IPancakeswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint amount0,\\n        uint amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint);\\n\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\n    },\n    \"contracts/libraries/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Logic was copied and modified from here: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/SafeCast.sol\\n */\\nlibrary SafeCast {\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value < 2**96, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/AllowListVerifier.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nlibrary AllowListVerifierHelper {\\n    /// @dev Value returned by a call to `isAllowed` if the check\\n    /// was successful. The value is defined as:\\n    /// bytes4(keccak256(\\\"isAllowed(address,uint256,bytes)\\\"))\\n    bytes4 internal constant MAGICVALUE = 0x19a05a7e;\\n}\\n\\n///\\n/// @dev Standardized interface for an allowList manager for annexAuction\\n/// The interface was inspired by EIP-1271\\ninterface AllowListVerifier {\\n    /// @dev Should return whether the a specific user has access to an auction\\n    /// by returning the magic value from AllowListVerifierHelper\\n    function isAllowed(\\n        address user,\\n        uint256 auctionId,\\n        bytes calldata callData\\n    ) external view returns (bytes4);\\n}\\n\"\n    },\n    \"contracts/test/StateChangingAllowListVerifier.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity >=0.6.8;\\nimport \\\"../interfaces/AllowListVerifier.sol\\\";\\n\\ncontract StateChangingAllowListVerifier {\\n    bytes32 public test = bytes32(0);\\n\\n    function isAllowed(\\n        address user,\\n        uint256 auctionId,\\n        bytes calldata callData\\n    ) external returns (bytes4) {\\n        test = keccak256(abi.encode(user, auctionId, callData));\\n        return AllowListVerifierHelper.MAGICVALUE;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\n    },\n    \"contracts/Utils/BatchDocuments.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../seriality/Seriality.sol\\\";\\n\\n/**\\n * @title Standard implementation of ERC1643 Document management\\n */\\ncontract BatchDocuments is Ownable, Seriality {\\n    struct Document {\\n        uint32 docIndex; // Store the document name indexes\\n        uint64 lastModified; // Timestamp at which document details was last modified\\n        string data; // data of the document that exist off-chain\\n    }\\n\\n    // mapping to store the documents details in the document\\n    mapping(string => Document) internal _documents;\\n    // mapping to store the document name indexes\\n    mapping(string => uint32) internal _docIndexes;\\n    // Array use to store all the document name present in the contracts\\n    string[] internal _docNames;\\n\\n    constructor() public Ownable() {}\\n\\n    // Document Events\\n    event DocumentRemoved(string indexed _name, string _data);\\n    event DocumentUpdated(string indexed _name, string _data);\\n\\n    /**\\n     * @notice Used to attach a new document to the contract, or update the data or hash of an existing attached document\\n     * @dev Can only be executed by the owner of the contract.\\n     * @param _name Name of the document. It should be unique always\\n     * @param _data Off-chain data of the document from where it is accessible to investors/advisors to read.\\n     */\\n    function _setDocument(string calldata _name, string calldata _data)\\n        external\\n        onlyOwner\\n    {\\n        require(bytes(_name).length > 0, \\\"Zero name is not allowed\\\");\\n        require(bytes(_data).length > 0, \\\"Should not be a empty data\\\");\\n        // Document storage document = _documents[_name];\\n        if (_documents[_name].lastModified == uint64(0)) {\\n            _docNames.push(_name);\\n            _documents[_name].docIndex = uint32(_docNames.length);\\n        }\\n        _documents[_name] = Document(\\n            _documents[_name].docIndex,\\n            uint64(block.timestamp),\\n            _data\\n        );\\n        emit DocumentUpdated(_name, _data);\\n    }\\n\\n    /**\\n     * @notice Used to remove an existing document from the contract by giving the name of the document.\\n     * @dev Can only be executed by the owner of the contract.\\n     * @param _name Name of the document. It should be unique always\\n     */\\n\\n    function _removeDocument(string calldata _name) external onlyOwner {\\n        require(\\n            _documents[_name].lastModified != uint64(0),\\n            \\\"Document should exist\\\"\\n        );\\n        uint32 index = _documents[_name].docIndex - 1;\\n        if (index != _docNames.length - 1) {\\n            _docNames[index] = _docNames[_docNames.length - 1];\\n            _documents[_docNames[index]].docIndex = index + 1;\\n        }\\n        _docNames.pop();\\n        emit DocumentRemoved(_name, _documents[_name].data);\\n        delete _documents[_name];\\n    }\\n\\n    /**\\n     * @notice Used to return the details of a document with a known name (`string`).\\n     * @param _name Name of the document\\n     * @return string The data associated with the document.\\n     * @return uint256 the timestamp at which the document was last modified.\\n     */\\n    function getDocument(string calldata _name)\\n        external\\n        view\\n        returns (string memory, uint256)\\n    {\\n        return (\\n            _documents[_name].data,\\n            uint256(_documents[_name].lastModified)\\n        );\\n    }\\n\\n    /**\\n     * @notice Used to retrieve a full list of documents attached to the smart contract.\\n     * @return string List of all documents names present in the contract.\\n     */\\n    function getAllDocuments() external view returns (bytes memory) {\\n        uint startindex = 0;\\n        uint endindex = _docNames.length;\\n        require(endindex >= startindex);\\n\\n        if (endindex > (_docNames.length - 1)) {\\n            endindex = _docNames.length - 1;\\n        }\\n\\n        uint offset = 64 * ((endindex - startindex) + 1);\\n\\n        bytes memory buffer = new bytes(offset);\\n        string memory out1 = new string(32);\\n\\n        for (uint i = startindex; i <= endindex; i++) {\\n            out1 = _docNames[i];\\n\\n            stringToBytes(offset, bytes(out1), buffer);\\n            offset -= sizeOfString(out1);\\n        }\\n        return buffer;\\n    }\\n\\n    /**\\n     * @notice Used to retrieve the total documents in the smart contract.\\n     * @return uint256 Count of the document names present in the contract.\\n     */\\n    function getDocumentCount() external view returns (uint256) {\\n        return _docNames.length;\\n    }\\n\\n    /**\\n     * @notice Used to retrieve the document name from index in the smart contract.\\n     * @return string Name of the document name.\\n     */\\n    function getDocumentName(uint256 _index)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        require(_index < _docNames.length, \\\"Index out of bounds\\\");\\n        return _docNames[_index];\\n    }\\n}\\n\"\n    },\n    \"contracts/seriality/Seriality.sol\": {\n      \"content\": \"pragma solidity >=0.5.0;\\n\\n/**\\n * @title Seriality\\n * @dev The Seriality contract is the main interface for serializing data using the TypeToBytes, BytesToType and SizeOf\\n * @author pouladzade@gmail.com\\n */\\n\\nimport \\\"./BytesToTypes.sol\\\";\\nimport \\\"./TypesToBytes.sol\\\";\\nimport \\\"./SizeOf.sol\\\";\\n\\ncontract Seriality is BytesToTypes, TypesToBytes, SizeOf {\\n    constructor() public {}\\n}\\n\"\n    },\n    \"contracts/seriality/BytesToTypes.sol\": {\n      \"content\": \"pragma solidity >=0.5.0;\\n\\n/**\\n * @title BytesToTypes\\n * @dev The BytesToTypes contract converts the memory byte arrays to the standard solidity types\\n * @author pouladzade@gmail.com\\n */\\n\\ncontract BytesToTypes {\\n    function bytesToAddress(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (address _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToBool(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (bool _output)\\n    {\\n        uint8 x;\\n        assembly {\\n            x := mload(add(_input, _offst))\\n        }\\n        x == 0 ? _output = false : _output = true;\\n    }\\n\\n    function getStringSize(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint size)\\n    {\\n        assembly {\\n            size := mload(add(_input, _offst))\\n            let chunk_count := add(div(size, 32), 1) // chunk_count = size/32 + 1\\n\\n            if gt(mod(size, 32), 0) {\\n                // if size%32 > 0\\n                chunk_count := add(chunk_count, 1)\\n            }\\n\\n            size := mul(chunk_count, 32) // first 32 bytes reseves for size in strings\\n        }\\n    }\\n\\n    function bytesToString(\\n        uint _offst,\\n        bytes memory _input,\\n        bytes memory _output\\n    ) internal pure {\\n        uint size = 32;\\n        assembly {\\n            let chunk_count\\n\\n            size := mload(add(_input, _offst))\\n            chunk_count := add(div(size, 32), 1) // chunk_count = size/32 + 1\\n\\n            if gt(mod(size, 32), 0) {\\n                chunk_count := add(chunk_count, 1) // chunk_count++\\n            }\\n\\n            for {\\n                let index := 0\\n            } lt(index, chunk_count) {\\n                index := add(index, 1)\\n            } {\\n                mstore(add(_output, mul(index, 32)), mload(add(_input, _offst)))\\n                _offst := sub(_offst, 32) // _offst -= 32\\n            }\\n        }\\n    }\\n\\n    function bytesToBytes32(\\n        uint _offst,\\n        bytes memory _input,\\n        bytes32 _output\\n    ) internal pure {\\n        assembly {\\n            mstore(_output, add(_input, _offst))\\n            mstore(add(_output, 32), add(add(_input, _offst), 32))\\n        }\\n    }\\n\\n    function bytesToInt8(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int8 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt16(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int16 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt24(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int24 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt32(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int32 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt40(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int40 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt48(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int48 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt56(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int56 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt64(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int64 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt72(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int72 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt80(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int80 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt88(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int88 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt96(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int96 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt104(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int104 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt112(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int112 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt120(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int120 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt128(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int128 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt136(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int136 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt144(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int144 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt152(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int152 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt160(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int160 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt168(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int168 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt176(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int176 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt184(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int184 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt192(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int192 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt200(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int200 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt208(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int208 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt216(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int216 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt224(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int224 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt232(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int232 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt240(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int240 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt248(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int248 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToInt256(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (int256 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint8(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint8 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint16(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint16 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint24(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint24 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint32(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint32 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint40(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint40 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint48(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint48 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint56(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint56 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint64(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint64 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint72(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint72 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint80(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint80 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint88(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint88 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint96(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint96 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint104(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint104 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint112(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint112 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint120(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint120 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint128(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint128 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint136(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint136 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint144(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint144 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint152(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint152 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint160(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint160 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint168(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint168 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint176(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint176 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint184(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint184 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint192(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint192 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint200(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint200 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint208(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint208 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint216(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint216 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint224(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint224 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint232(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint232 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint240(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint240 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint248(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint248 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint256(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint256 _output)\\n    {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/seriality/TypesToBytes.sol\": {\n      \"content\": \"pragma solidity >=0.5.0;\\n\\n/**\\n * @title TypesToBytes\\n * @dev The TypesToBytes contract converts the standard solidity types to the byte array\\n * @author pouladzade@gmail.com\\n */\\n\\ncontract TypesToBytes {\\n    function addressToBytes(\\n        uint _offst,\\n        address _input,\\n        bytes memory _output\\n    ) internal pure {\\n        assembly {\\n            mstore(add(_output, _offst), _input)\\n        }\\n    }\\n\\n    function bytes32ToBytes(\\n        uint _offst,\\n        bytes32 _input,\\n        bytes memory _output\\n    ) internal pure {\\n        assembly {\\n            mstore(add(_output, _offst), _input)\\n            mstore(add(add(_output, _offst), 32), add(_input, 32))\\n        }\\n    }\\n\\n    function boolToBytes(\\n        uint _offst,\\n        bool _input,\\n        bytes memory _output\\n    ) internal pure {\\n        uint8 x = _input == false ? 0 : 1;\\n        assembly {\\n            mstore(add(_output, _offst), x)\\n        }\\n    }\\n\\n    function stringToBytes(\\n        uint _offst,\\n        bytes memory _input,\\n        bytes memory _output\\n    ) internal pure {\\n        uint256 stack_size = _input.length / 32;\\n        if (_input.length % 32 > 0) stack_size++;\\n\\n        assembly {\\n            stack_size := add(stack_size, 1) //adding because of 32 first bytes memory as the length\\n            for {\\n                let index := 0\\n            } lt(index, stack_size) {\\n                index := add(index, 1)\\n            } {\\n                mstore(add(_output, _offst), mload(add(_input, mul(index, 32))))\\n                _offst := sub(_offst, 32)\\n            }\\n        }\\n    }\\n\\n    function intToBytes(\\n        uint _offst,\\n        int _input,\\n        bytes memory _output\\n    ) internal pure {\\n        assembly {\\n            mstore(add(_output, _offst), _input)\\n        }\\n    }\\n\\n    function uintToBytes(\\n        uint _offst,\\n        uint _input,\\n        bytes memory _output\\n    ) internal pure {\\n        assembly {\\n            mstore(add(_output, _offst), _input)\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/seriality/SizeOf.sol\": {\n      \"content\": \"pragma solidity >=0.5.0;\\n\\n/**\\n * @title SizeOf\\n * @dev The SizeOf return the size of the solidity types in byte\\n * @author pouladzade@gmail.com\\n */\\n\\ncontract SizeOf {\\n    function sizeOfString(string memory _in)\\n        internal\\n        pure\\n        returns (uint _size)\\n    {\\n        _size = bytes(_in).length / 32;\\n        if (bytes(_in).length % 32 != 0) _size++;\\n\\n        _size++; // first 32 bytes is reserved for the size of the string\\n        _size *= 32;\\n    }\\n\\n    function sizeOfInt(uint16 _postfix) internal pure returns (uint size) {\\n        assembly {\\n            switch _postfix\\n                case 8 {\\n                    size := 1\\n                }\\n                case 16 {\\n                    size := 2\\n                }\\n                case 24 {\\n                    size := 3\\n                }\\n                case 32 {\\n                    size := 4\\n                }\\n                case 40 {\\n                    size := 5\\n                }\\n                case 48 {\\n                    size := 6\\n                }\\n                case 56 {\\n                    size := 7\\n                }\\n                case 64 {\\n                    size := 8\\n                }\\n                case 72 {\\n                    size := 9\\n                }\\n                case 80 {\\n                    size := 10\\n                }\\n                case 88 {\\n                    size := 11\\n                }\\n                case 96 {\\n                    size := 12\\n                }\\n                case 104 {\\n                    size := 13\\n                }\\n                case 112 {\\n                    size := 14\\n                }\\n                case 120 {\\n                    size := 15\\n                }\\n                case 128 {\\n                    size := 16\\n                }\\n                case 136 {\\n                    size := 17\\n                }\\n                case 144 {\\n                    size := 18\\n                }\\n                case 152 {\\n                    size := 19\\n                }\\n                case 160 {\\n                    size := 20\\n                }\\n                case 168 {\\n                    size := 21\\n                }\\n                case 176 {\\n                    size := 22\\n                }\\n                case 184 {\\n                    size := 23\\n                }\\n                case 192 {\\n                    size := 24\\n                }\\n                case 200 {\\n                    size := 25\\n                }\\n                case 208 {\\n                    size := 26\\n                }\\n                case 216 {\\n                    size := 27\\n                }\\n                case 224 {\\n                    size := 28\\n                }\\n                case 232 {\\n                    size := 29\\n                }\\n                case 240 {\\n                    size := 30\\n                }\\n                case 248 {\\n                    size := 31\\n                }\\n                case 256 {\\n                    size := 32\\n                }\\n                default {\\n                    size := 32\\n                }\\n        }\\n    }\\n\\n    function sizeOfUint(uint16 _postfix) internal pure returns (uint size) {\\n        return sizeOfInt(_postfix);\\n    }\\n\\n    function sizeOfAddress() internal pure returns (uint8) {\\n        return 20;\\n    }\\n\\n    function sizeOfBool() internal pure returns (uint8) {\\n        return 1;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/test/ERC20Mintable.sol\": {\n      \"content\": \"pragma solidity >=0.6.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract ERC20Mintable is ERC20 {\\n    constructor(string memory name, string memory symbol)\\n        public\\n        ERC20(symbol, name)\\n    {}\\n\\n    function mint(address account, uint256 amount) public {\\n        _mint(account, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IAnnexMarket.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ninterface IAnnexMarket {\\n    function init(bytes calldata data) external payable;\\n\\n    function initMarket(bytes calldata data) external;\\n\\n    function marketTemplate() external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/Utils/AnnexBatchable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable no-inline-assembly\\n\\ncontract BaseAnnexBatchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\\n    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail)\\n        external\\n        payable\\n        returns (bool[] memory successes, bytes[] memory results)\\n    {\\n        successes = new bool[](calls.length);\\n        results = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) =\\n                address(this).delegatecall(calls[i]);\\n            require(success || !revertOnFail, _getRevertMsg(result));\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n}\\n\\ncontract AnnexBatchable is BaseAnnexBatchable {\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\n    /// Lookup `IERC20.permit`.\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        token.permit(from, to, amount, deadline, v, r, s);\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/AnnexERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary AnnexERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) =\\n            address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) =\\n            address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) =\\n            address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            address(token).call(\\n                abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n            );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"AnnexERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            address(token).call(\\n                abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n            );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"AnnexERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IPointList.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\n// ----------------------------------------------------------------------------\\n// White List interface\\n// ----------------------------------------------------------------------------\\n\\ninterface IPointList {\\n    function isInList(address account) external view returns (bool);\\n\\n    function hasPoints(address account, uint256 amount)\\n        external\\n        view\\n        returns (bool);\\n\\n    function setPoints(address[] memory accounts, uint256[] memory amounts)\\n        external;\\n\\n    function initPointList(address accessControl) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IWETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\n    },\n    \"contracts/libraries/AnnexMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary AnnexMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"AnnexMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"AnnexMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"AnnexMath: Mul Overflow\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b > 0, \\\"AnnexMath: Div zero\\\");\\n        c = a / b;\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"AnnexMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"AnnexMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"AnnexMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n\\n    function to16(uint256 a) internal pure returns (uint16 c) {\\n        require(a <= uint16(-1), \\\"AnnexMath: uint16 Overflow\\\");\\n        c = uint16(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary AnnexMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"AnnexMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"AnnexMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary AnnexMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"AnnexMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"AnnexMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary AnnexMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"AnnexMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"AnnexMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary AnnexMath16 {\\n    function add(uint16 a, uint16 b) internal pure returns (uint16 c) {\\n        require((c = a + b) >= b, \\\"AnnexMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint16 a, uint16 b) internal pure returns (uint16 c) {\\n        require((c = a - b) <= a, \\\"AnnexMath: Underflow\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/Utils/SafeTransfer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.8;\\n\\ncontract SafeTransfer {\\n    address private constant ETH_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Helper function to handle both ETH and ERC20 payments\\n    function _safeTokenPayment(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == ETH_ADDRESS) {\\n            _safeTransferETH(_to, _amount);\\n        } else {\\n            _safeTransfer(_token, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Helper function to handle both ETH and ERC20 payments\\n    function _tokenPayment(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == ETH_ADDRESS) {\\n            _to.transfer(_amount);\\n        } else {\\n            _safeTransfer(_token, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function _safeApprove(\\n        address token,\\n        address to,\\n        uint value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) =\\n            token.call(\\n                // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n                abi.encodeWithSelector(0xa9059cbb, to, amount)\\n            );\\n        require(success && (data.length == 0 || abi.decode(data, (bool)))); // ERC20 Transfer failed\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) internal virtual {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) =\\n            token.call(\\n                // 0x23b872dd = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"))\\n                abi.encodeWithSelector(0x23b872dd, from, address(this), amount)\\n            );\\n        require(success && (data.length == 0 || abi.decode(data, (bool)))); // ERC20 TransferFrom failed\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function _safeTransferETH(address to, uint value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": false,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "57ec625a910b0de2395b86908b6b4bfc",
      "transactionHash": "0x49da1b20dbe893fac272dd9d01385c8d94538c68d5981c8b59268798f9cc77e7",
      "args": []
    },
    "decoded": {
      "from": "0x48F91fbC86679e14f481DD3C3381f0e07F93A711",
      "gasPrice": "10000000000",
      "gasLimit": "30000000",
      "to": null,
      "value": "0",
      "nonce": 63,
      "data": "0x608060405234801561001057600080fd5b5060006100216100c460201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100cc565b600033905090565b611a67806100db6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80639fa5f50b116100665780639fa5f50b1461010f578063c6b547e61461012d578063de7afa4b1461015d578063f2fde38b14610179578063f3494ae91461019557610093565b80633d1c227314610098578063715018a6146100b65780637ccb6a64146100c05780638da5cb5b146100f1575b600080fd5b6100a06101b1565b6040516100ad91906118db565b60405180910390f35b6100be6101be565b005b6100da60048036038101906100d59190611374565b61032b565b6040516100e8929190611809565b60405180910390f35b6100f961043b565b6040516101069190611786565b60405180910390f35b610117610464565b60405161012491906117a1565b60405180910390f35b6101476004803603810190610142919061142e565b610636565b60405161015491906117e7565b60405180910390f35b61017760048036038101906101729190611374565b610736565b005b610193600480360381019061018e919061134b565b610a83565b005b6101af60048036038101906101aa91906113b9565b610c75565b005b6000600380549050905090565b6101c6611019565b73ffffffffffffffffffffffffffffffffffffffff166101e461043b565b73ffffffffffffffffffffffffffffffffffffffff161461026d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6060600060018484604051610341929190611756565b908152602001604051809103902060010160018585604051610364929190611756565b908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff16818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104295780601f106103fe57610100808354040283529160200191610429565b820191906000526020600020905b81548152906001019060200180831161040c57829003601f168201915b50505050509150915091509250929050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060008060038054905090508181101561047e57600080fd5b60016003805490500381111561049a5760016003805490500390505b6000600183830301604002905060008167ffffffffffffffff811180156104c057600080fd5b506040519080825280601f01601f1916602001820160405280156104f35781602001600182028036833780820191505090505b5090506000602067ffffffffffffffff8111801561051057600080fd5b506040519080825280601f01601f1916602001820160405280156105435781602001600182028036833780820191505090505b50905060008590505b84811161062a576003818154811061056057fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105fe5780601f106105d3576101008083540402835291602001916105fe565b820191906000526020600020905b8154815290600101906020018083116105e157829003601f168201915b50505050509150610610848385611021565b61061982611082565b84039350808060010191505061054c565b50819550505050505090565b6060600380549050821061067f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106769061189b565b60405180910390fd5b6003828154811061068c57fe5b906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561072a5780601f106106ff5761010080835404028352916020019161072a565b820191906000526020600020905b81548152906001019060200180831161070d57829003601f168201915b50505050509050919050565b61073e611019565b73ffffffffffffffffffffffffffffffffffffffff1661075c61043b565b73ffffffffffffffffffffffffffffffffffffffff16146107e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600067ffffffffffffffff1660018383604051610803929190611756565b908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff161415610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b9061185b565b60405180910390fd5b60006001808484604051610889929190611756565b908152602001604051809103902060000160009054906101000a900463ffffffff160390506001600380549050038163ffffffff161461097f576003600160038054905003815481106108d857fe5b9060005260206000200160038263ffffffff16815481106108f557fe5b90600052602060002001908054600181600116156101000203166002900461091e9291906110c1565b5060018101600160038363ffffffff168154811061093857fe5b9060005260206000200160405161094f919061176f565b908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b600380548061098a57fe5b6001900381819060005260206000200160006109a69190611156565b905582826040516109b8929190611756565b60405180910390207f4b5338540b4d1c0f6dd0308a25f633b7ff60472f894d711cff9dd64e35c613b2600185856040516109f3929190611756565b9081526020016040518091039020600101604051610a119190611839565b60405180910390a260018383604051610a2b929190611756565b9081526020016040518091039020600080820160006101000a81549063ffffffff02191690556000820160046101000a81549067ffffffffffffffff0219169055600182016000610a7c9190611156565b5050505050565b610a8b611019565b73ffffffffffffffffffffffffffffffffffffffff16610aa961043b565b73ffffffffffffffffffffffffffffffffffffffff1614610b32576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611a0c6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610c7d611019565b73ffffffffffffffffffffffffffffffffffffffff16610c9b61043b565b73ffffffffffffffffffffffffffffffffffffffff1614610d24576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60008484905011610d6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d619061187b565b60405180910390fd5b60008282905011610db0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da7906118bb565b60405180910390fd5b600067ffffffffffffffff1660018585604051610dce929190611756565b908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff161415610e8a576003848490918060018154018082558091505060019003906000526020600020016000909192909192909192909192509190610e4192919061119e565b5060038054905060018585604051610e5a929190611756565b908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b604051806060016040528060018686604051610ea7929190611756565b908152602001604051809103902060000160009054906101000a900463ffffffff1663ffffffff1681526020014267ffffffffffffffff16815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525060018585604051610f3e929190611756565b908152602001604051809103902060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151816001019080519060200190610fbe92919061122c565b509050508383604051610fd2929190611756565b60405180910390207fbaa206e5ea800eb88bce099f453fee53295b793b9d5d1cfc4ce4b6db06a34f53838360405161100b9291906117c3565b60405180910390a250505050565b600033905090565b6000602083518161102e57fe5b0490506000602084518161103e57fe5b06111561104e5780806001019150505b60018101905060005b8181101561107b576020810284015185840152602085039450600181019050611057565b5050505050565b6000602082518161108f57fe5b0490506000602083518161109f57fe5b06146110ae5780806001019150505b8080600101915050602081029050919050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826110f75760008555611145565b82601f106111085780548555611145565b8280016001018555821561114557600052602060002091601f016020900482015b82811115611144578254825591600101919060010190611129565b5b50905061115291906112ba565b5090565b50805460018160011615610100020316600290046000825580601f1061117c575061119b565b601f01602090049060005260206000209081019061119a91906112ba565b5b50565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826111d4576000855561121b565b82601f106111ed57803560ff191683800117855561121b565b8280016001018555821561121b579182015b8281111561121a5782358255916020019190600101906111ff565b5b50905061122891906112ba565b5090565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261126257600085556112a9565b82601f1061127b57805160ff19168380011785556112a9565b828001600101855582156112a9579182015b828111156112a857825182559160200191906001019061128d565b5b5090506112b691906112ba565b5090565b5b808211156112d35760008160009055506001016112bb565b5090565b6000813590506112e6816119dd565b92915050565b60008083601f8401126112fe57600080fd5b8235905067ffffffffffffffff81111561131757600080fd5b60208301915083600182028301111561132f57600080fd5b9250929050565b600081359050611345816119f4565b92915050565b60006020828403121561135d57600080fd5b600061136b848285016112d7565b91505092915050565b6000806020838503121561138757600080fd5b600083013567ffffffffffffffff8111156113a157600080fd5b6113ad858286016112ec565b92509250509250929050565b600080600080604085870312156113cf57600080fd5b600085013567ffffffffffffffff8111156113e957600080fd5b6113f5878288016112ec565b9450945050602085013567ffffffffffffffff81111561141457600080fd5b611420878288016112ec565b925092505092959194509250565b60006020828403121561144057600080fd5b600061144e84828501611336565b91505092915050565b6114608161194e565b82525050565b60006114718261190b565b61147b8185611921565b935061148b818560208601611999565b611494816119cc565b840191505092915050565b60006114ab8385611932565b93506114b883858461198a565b6114c1836119cc565b840190509392505050565b60006114d88385611943565b93506114e583858461198a565b82840190509392505050565b60006114fc82611916565b6115068185611932565b9350611516818560208601611999565b61151f816119cc565b840191505092915050565b600081546001811660008114611547576001811461156d576115b1565b607f60028304166115588187611932565b955060ff1983168652602086019350506115b1565b6002820461157b8187611932565b9550611586856118f6565b60005b828110156115a857815481890152600182019150602081019050611589565b80880195505050505b505092915050565b6000815460018116600081146115d657600181146115fb5761163f565b607f60028304166115e78187611943565b955060ff198316865280860193505061163f565b600282046116098187611943565b9550611614856118f6565b60005b8281101561163657815481890152600182019150602081019050611617565b82880195505050505b505092915050565b6000611654601583611932565b91507f446f63756d656e742073686f756c6420657869737400000000000000000000006000830152602082019050919050565b6000611694601883611932565b91507f5a65726f206e616d65206973206e6f7420616c6c6f77656400000000000000006000830152602082019050919050565b60006116d4601383611932565b91507f496e646578206f7574206f6620626f756e6473000000000000000000000000006000830152602082019050919050565b6000611714601a83611932565b91507f53686f756c64206e6f74206265206120656d70747920646174610000000000006000830152602082019050919050565b61175081611980565b82525050565b60006117638284866114cc565b91508190509392505050565b600061177b82846115b9565b915081905092915050565b600060208201905061179b6000830184611457565b92915050565b600060208201905081810360008301526117bb8184611466565b905092915050565b600060208201905081810360008301526117de81848661149f565b90509392505050565b6000602082019050818103600083015261180181846114f1565b905092915050565b6000604082019050818103600083015261182381856114f1565b90506118326020830184611747565b9392505050565b60006020820190508181036000830152611853818461152a565b905092915050565b6000602082019050818103600083015261187481611647565b9050919050565b6000602082019050818103600083015261189481611687565b9050919050565b600060208201905081810360008301526118b4816116c7565b9050919050565b600060208201905081810360008301526118d481611707565b9050919050565b60006020820190506118f06000830184611747565b92915050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061195982611960565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156119b757808201518184015260208101905061199c565b838111156119c6576000848401525b50505050565b6000601f19601f8301169050919050565b6119e68161194e565b81146119f157600080fd5b50565b6119fd81611980565b8114611a0857600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220ebca934579bbd85dbff2f507dee202cafd0f2c54b14a757fb708246f752c5f8864736f6c63430007060033",
      "r": "0x7d8c03a72a5e8b01393d65a9e2d39b2e78304b9511ceda6933592fa5a6a03f6b",
      "s": "0x02c7a788c73aaffcddbb36503c4b0afd3285965a39bab63449e02a8a8df0287c",
      "v": 230,
      "chainId": 97
    }
  }
}