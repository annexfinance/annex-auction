{
  "0x454d4bb1339cdae604cebdf3bef660f737ea66e140bdfc3ec1dcab8187b66b8d": {
    "name": "AnnexBatchAuction",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "AnnexBatchAuction",
      "sourceName": "contracts/AnnexBatchAuction.sol",
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "soldAuctioningTokens",
              "type": "uint96"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "soldBiddingTokens",
              "type": "uint96"
            },
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "clearingPriceOrder",
              "type": "bytes32"
            }
          ],
          "name": "AuctionCleared",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "buyAmount",
              "type": "uint96"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "sellAmount",
              "type": "uint96"
            }
          ],
          "name": "CancellationSellOrder",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "buyAmount",
              "type": "uint96"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "sellAmount",
              "type": "uint96"
            }
          ],
          "name": "ClaimedFromOrder",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "_data",
              "type": "string"
            }
          ],
          "name": "DocumentRemoved",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "_data",
              "type": "string"
            }
          ],
          "name": "DocumentUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "contract IERC20",
              "name": "_auctioningToken",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "contract IERC20",
              "name": "_biddingToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "orderCancellationEndDate",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "auctionEndDate",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "_auctionedSellAmount",
              "type": "uint96"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "_minBuyAmount",
              "type": "uint96"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "minimumBiddingAmountPerOrder",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "minFundingThreshold",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "allowListContract",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "allowListData",
              "type": "bytes"
            }
          ],
          "name": "NewAuction",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "buyAmount",
              "type": "uint96"
            },
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "sellAmount",
              "type": "uint96"
            }
          ],
          "name": "NewSellOrder",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            }
          ],
          "name": "NewUser",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            }
          ],
          "name": "UserRegistration",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "FEE_DENOMINATOR",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "auctionAccessData",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "auctionAccessManager",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "auctionCounter",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "auctionData",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "auctioningToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "biddingToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "orderCancellationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionEndDate",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "initialAuctionOrder",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "minimumBiddingAmountPerOrder",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interimSumBidAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "interimOrder",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "clearingPriceOrder",
              "type": "bytes32"
            },
            {
              "internalType": "uint96",
              "name": "volumeClearingPriceOrder",
              "type": "uint96"
            },
            {
              "internalType": "bool",
              "name": "minFundingThresholdNotReached",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isAtomicClosureAllowed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "feeNumerator",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minFundingThreshold",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_bytes32",
              "type": "bytes32"
            }
          ],
          "name": "bytes32ToString",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "_sellOrders",
              "type": "bytes32[]"
            }
          ],
          "name": "cancelSellOrders",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "orders",
              "type": "bytes32[]"
            }
          ],
          "name": "claimFromParticipantOrder",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "sumAuctioningTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sumBiddingTokenAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "order",
              "type": "bytes32"
            }
          ],
          "name": "containsOrder",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "feeNumerator",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "feeReceiverUserId",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getAllDocuments",
          "outputs": [
            {
              "internalType": "bytes32[]",
              "name": "",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            }
          ],
          "name": "getDocument",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getDocumentCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "name": "getDocumentName",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            }
          ],
          "name": "getSecondsRemainingInBatch",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "name": "getUserId",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "_auctioningToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "_biddingToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "orderCancellationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "auctionEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint96",
              "name": "_auctionedSellAmount",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "_minBuyAmount",
              "type": "uint96"
            },
            {
              "internalType": "uint256",
              "name": "minimumBiddingAmountPerOrder",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minFundingThreshold",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isAtomicClosureAllowed",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "accessManagerContract",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "accessManagerContractData",
              "type": "bytes"
            }
          ],
          "name": "initiateAuction",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "numUsers",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "uint96[]",
              "name": "_minBuyAmounts",
              "type": "uint96[]"
            },
            {
              "internalType": "uint96[]",
              "name": "_sellAmounts",
              "type": "uint96[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "_prevSellOrders",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes",
              "name": "allowListCallData",
              "type": "bytes"
            }
          ],
          "name": "placeSellOrders",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "uint96[]",
              "name": "_minBuyAmounts",
              "type": "uint96[]"
            },
            {
              "internalType": "uint96[]",
              "name": "_sellAmounts",
              "type": "uint96[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "_prevSellOrders",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes",
              "name": "allowListCallData",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "orderSubmitter",
              "type": "address"
            }
          ],
          "name": "placeSellOrdersOnBehalf",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "iterationSteps",
              "type": "uint256"
            }
          ],
          "name": "precalculateSellAmountSum",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "name": "registerUser",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "userId",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            }
          ],
          "name": "removeDocument",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_data",
              "type": "string"
            }
          ],
          "name": "setDocument",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newFeeNumerator",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "newfeeReceiverAddress",
              "type": "address"
            }
          ],
          "name": "setFeeParameters",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            }
          ],
          "name": "settleAuction",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "clearingOrder",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "auctionId",
              "type": "uint256"
            },
            {
              "internalType": "uint96[]",
              "name": "_minBuyAmount",
              "type": "uint96[]"
            },
            {
              "internalType": "uint96[]",
              "name": "_sellAmount",
              "type": "uint96[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "_prevSellOrder",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes",
              "name": "allowListCallData",
              "type": "bytes"
            }
          ],
          "name": "settleAuctionAtomically",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "source",
              "type": "string"
            }
          ],
          "name": "stringToBytes32",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "result",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x60806040526000600c556001600d60006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055503480156200004057600080fd5b50600062000053620000f760201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620000ff565b600033905090565b616d15806200010f6000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80638da5cb5b1161010f578063d225269c116100a2578063e86dea4a11610071578063e86dea4a146112b7578063ec20d0bb146112d5578063f2fde38b14611552578063f59c2f0614611596576101f0565b8063d225269c14610f6b578063d73792a9146111c8578063dde51f6d146111e6578063e4a59ef41461125f576101f0565b80639fa5f50b116100de5780639fa5f50b14610d78578063a7e7664414610dd7578063c6b547e614610df5578063cfb5192814610e9c576101f0565b80638da5cb5b1461099057806391cfc1d4146109c45780639201de5514610c035780639c64d0ae14610caa576101f0565b806340b20b0911610187578063715018a611610156578063715018a6146106ee5780637882deaf146106f85780637ccb6a64146107d55780637ed18b70146108ce576101f0565b806340b20b091461054f57806355fc62d21461059d5780635cefb2911461067857806363c699a4146106a0576101f0565b80632b956ff7116101c35780632b956ff7146104555780632e993611146104b75780633d1c2273146104f95780633e12905f14610517576101f0565b80630a4cd6c9146101f557806315d37b4b1461038957806319a50f49146103cb5780632199d5cd146103f3575b600080fd5b610373600480360361016081101561020c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080356bffffffffffffffffffffffff16906020019092919080356bffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803515159060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156102ed57600080fd5b8201836020820111156102ff57600080fd5b8035906020019184600183028401116401000000008311171561032157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061163d565b6040518082815260200191505060405180910390f35b6103b56004803603602081101561039f57600080fd5b8101908080359060200190929190505050611cfc565b6040518082815260200191505060405180910390f35b6103d3611d56565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6104356004803603602081101561040957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d70565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6104976004803603602081101561046b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611eea565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6104e3600480360360208110156104cd57600080fd5b8101908080359060200190929190505050611f7f565b6040518082815260200191505060405180910390f35b610501612526565b6040518082815260200191505060405180910390f35b61054d6004803603604081101561052d57600080fd5b810190808035906020019092919080359060200190929190505050612533565b005b61059b6004803603604081101561056557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612855565b005b6105c9600480360360208110156105b357600080fd5b810190808035906020019092919050505061299a565b604051808f73ffffffffffffffffffffffffffffffffffffffff1681526020018e73ffffffffffffffffffffffffffffffffffffffff1681526020018d81526020018c81526020018b81526020018a8152602001898152602001888152602001878152602001866bffffffffffffffffffffffff168152602001851515815260200184151581526020018381526020018281526020019e50505050505050505050505050505060405180910390f35b610680612a78565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6106d6600480360360408110156106b657600080fd5b810190808035906020019092919080359060200190929190505050612a92565b60405180821515815260200191505060405180910390f35b6106f6612ac1565b005b6107b86004803603604081101561070e57600080fd5b81019080803590602001909291908035906020019064010000000081111561073557600080fd5b82018360208201111561074757600080fd5b8035906020019184602083028401116401000000008311171561076957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050612c2e565b604051808381526020018281526020019250505060405180910390f35b61084c600480360360208110156107eb57600080fd5b810190808035906020019064010000000081111561080857600080fd5b82018360208201111561081a57600080fd5b8035906020019184600183028401116401000000008311171561083c57600080fd5b909192939192939050505061327a565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610892578082015181840152602081019050610877565b50505050905090810190601f1680156108bf5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61098e600480360360408110156108e457600080fd5b81019080803590602001909291908035906020019064010000000081111561090b57600080fd5b82018360208201111561091d57600080fd5b8035906020019184602083028401116401000000008311171561093f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050613398565b005b6109986135fb565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610c01600480360360a08110156109da57600080fd5b810190808035906020019092919080359060200190640100000000811115610a0157600080fd5b820183602082011115610a1357600080fd5b80359060200191846020830284011164010000000083111715610a3557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610a9557600080fd5b820183602082011115610aa757600080fd5b80359060200191846020830284011164010000000083111715610ac957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610b2957600080fd5b820183602082011115610b3b57600080fd5b80359060200191846020830284011164010000000083111715610b5d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610bbd57600080fd5b820183602082011115610bcf57600080fd5b80359060200191846001830284011164010000000083111715610bf157600080fd5b9091929391929390505050613624565b005b610c2f60048036036020811015610c1957600080fd5b810190808035906020019092919050505061388c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c6f578082015181840152602081019050610c54565b50505050905090810190601f168015610c9c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610d7660048036036040811015610cc057600080fd5b8101908080359060200190640100000000811115610cdd57600080fd5b820183602082011115610cef57600080fd5b80359060200191846001830284011164010000000083111715610d1157600080fd5b909192939192939080359060200190640100000000811115610d3257600080fd5b820183602082011115610d4457600080fd5b80359060200191846001830284011164010000000083111715610d6657600080fd5b90919293919293905050506139fd565b005b610d80613abe565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610dc3578082015181840152602081019050610da8565b505050509050019250505060405180910390f35b610ddf613b16565b6040518082815260200191505060405180910390f35b610e2160048036036020811015610e0b57600080fd5b8101908080359060200190929190505050613b1c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e61578082015181840152602081019050610e46565b50505050905090810190601f168015610e8e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610f5560048036036020811015610eb257600080fd5b8101908080359060200190640100000000811115610ecf57600080fd5b820183602082011115610ee157600080fd5b80359060200191846001830284011164010000000083111715610f0357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050613bbf565b6040518082815260200191505060405180910390f35b6111a8600480360360a0811015610f8157600080fd5b810190808035906020019092919080359060200190640100000000811115610fa857600080fd5b820183602082011115610fba57600080fd5b80359060200191846020830284011164010000000083111715610fdc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561103c57600080fd5b82018360208201111561104e57600080fd5b8035906020019184602083028401116401000000008311171561107057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156110d057600080fd5b8201836020820111156110e257600080fd5b8035906020019184602083028401116401000000008311171561110457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561116457600080fd5b82018360208201111561117657600080fd5b8035906020019184600183028401116401000000008311171561119857600080fd5b9091929391929390505050613bea565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6111d0613c77565b6040518082815260200191505060405180910390f35b61125d600480360360208110156111fc57600080fd5b810190808035906020019064010000000081111561121957600080fd5b82018360208201111561122b57600080fd5b8035906020019184600183028401116401000000008311171561124d57600080fd5b9091929391929390505050613c7d565b005b61128b6004803603602081101561127557600080fd5b8101908080359060200190929190505050613d3a565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6112bf613d6d565b6040518082815260200191505060405180910390f35b611532600480360360c08110156112eb57600080fd5b81019080803590602001909291908035906020019064010000000081111561131257600080fd5b82018360208201111561132457600080fd5b8035906020019184602083028401116401000000008311171561134657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156113a657600080fd5b8201836020820111156113b857600080fd5b803590602001918460208302840111640100000000831117156113da57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561143a57600080fd5b82018360208201111561144c57600080fd5b8035906020019184602083028401116401000000008311171561146e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156114ce57600080fd5b8201836020820111156114e057600080fd5b8035906020019184600183028401116401000000008311171561150257600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613d73565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6115946004803603602081101561156857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613e01565b005b6115c2600480360360208110156115ac57600080fd5b8101908080359060200190929190505050613ff3565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156116025780820151818401526020810190506115e7565b50505050905090810190601f16801561162f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60006116b6333061168f6103e8611681611664600c546103e86140a390919063ffffffff16565b8e6bffffffffffffffffffffffff1661412b90919063ffffffff16565b6141b190919063ffffffff16565b8f73ffffffffffffffffffffffffffffffffffffffff1661423a909392919063ffffffff16565b6000886bffffffffffffffffffffffff161161173a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f63616e6e6f742061756374696f6e207a65726f20746f6b656e7300000000000081525060200191505060405180910390fd5b6000876bffffffffffffffffffffffff16116117a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806169e76023913960400191505060405180910390fd5b600086116117fa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180616b4d6036913960400191505060405180910390fd5b888a1115611853576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180616c6b6029913960400191505060405180910390fd5b4289116118ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180616ad66026913960400191505060405180910390fd5b6118c16001600b546140a390919063ffffffff16565b600b819055506118e460046000600b5481526020019081526020016000206142fb565b60006118ef33611eea565b9050604051806101c001604052808e73ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff1681526020018c81526020018b815260200161194c838b8d614380565b815260200188815260200160008152602001600160001b81526020016000801b815260200160006bffffffffffffffffffffffff1681526020016000151581526020018615158152602001600c5481526020018781525060056000600b54815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555061014082015181600901600c6101000a81548160ff02191690831515021790555061016082015181600901600d6101000a81548160ff02191690831515021790555061018082015181600a01556101a082015181600b01559050508360066000600b54815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260076000600b5481526020019081526020016000209080519060200190611b9d9291906166bb565b508b73ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16600b547f728d0fed13687f1840de94f5ae640eae49b43eda26b7ffe97e55e79a0de6e40c8e8e868f8f8f8f8e8e604051808a81526020018981526020018867ffffffffffffffff168152602001876bffffffffffffffffffffffff168152602001866bffffffffffffffffffffffff1681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611ca5578082015181840152602081019050611c8a565b50505050905090810190601f168015611cd25780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390a4600b549150509b9a5050505050505050505050565b60004260056000848152602001908152602001600020600301541015611d255760009050611d51565b611d4e4260056000858152602001908152602001600020600301546143c190919063ffffffff16565b90505b919050565b600a60009054906101000a900467ffffffffffffffff1681565b6000611dae611da96001600a60009054906101000a900467ffffffffffffffff1667ffffffffffffffff166140a390919063ffffffff16565b614444565b600a60006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550611e02600a60009054906101000a900467ffffffffffffffff168360086144af9092919063ffffffff16565b611e74576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5573657220616c7265616479207265676973746572656400000000000000000081525060200191505060405180910390fd5b600a60009054906101000a900467ffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff167f6838f67cb358c332087b73dbe769a6c869a5f87225236c16dda5d0013a77074c82604051808267ffffffffffffffff16815260200191505060405180910390a2919050565b6000611f008260086147d590919063ffffffff16565b15611f2057611f1982600861484290919063ffffffff16565b9050611f7a565b611f2982611d70565b90508173ffffffffffffffffffffffffffffffffffffffff168167ffffffffffffffff167f969d438b19b6b5fb3c0d3c6f16867e519fcec4233799d6be29d1c00f2045ba2660405160405180910390a35b919050565b60008160006005600083815260200190815260200160002060030154905060008114158015611fae5750804210155b8015611fd257506000801b6005600084815260200190815260200160002060080154145b612027576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180616bed6028913960400191505060405180910390fd5b50600080600061204c6005600088815260200190815260200160002060040154614921565b92509250925060006005600088815260200190815260200160002060060154905060006005600089815260200190815260200160002060070154905060008060008590505b60006120b885600460008f815260200190815260200160002061494790919063ffffffff16565b90507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b8114156120eb5750612174565b8094506120f785614921565b909150816bffffffffffffffffffffffff169150806bffffffffffffffffffffffff169050809450819550505061213783876140a390919063ffffffff16565b95505061215b82876bffffffffffffffffffffffff1661412b90919063ffffffff16565b61216e848761412b90919063ffffffff16565b10612091575b6000851180156121b657506121a082876bffffffffffffffffffffffff1661412b90919063ffffffff16565b6121b3848761412b90919063ffffffff16565b10155b156122bf5760006122026121f3856121e5868b6bffffffffffffffffffffffff1661412b90919063ffffffff16565b6141b190919063ffffffff16565b876143c190919063ffffffff16565b905080831061228d57600061222082856143c190919063ffffffff16565b905061222b81614a45565b600560008f815260200190815260200160002060090160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555061228282886143c190919063ffffffff16565b9650859b50506122b9565b6122a083876143c190919063ffffffff16565b95506122b66000886122b189614a45565b614380565b9a505b5061234b565b866bffffffffffffffffffffffff168511156122f0576122e96000876122e488614a45565b614380565b995061234a565b6122fc60008789614380565b9950612347612342886bffffffffffffffffffffffff16612334896bffffffffffffffffffffffff168961412b90919063ffffffff16565b6141b190919063ffffffff16565b614a45565b90505b5b89600560008d81526020019081526020016000206008018190555084600560008d8152602001908152602001600020600b015411156123b4576001600560008d8152602001908152602001600020600901600c6101000a81548160ff0219169083151502179055505b6123ce8b826bffffffffffffffffffffffff168a89614ab4565b8a7f4d160a2a345f2faeb9ac2e65272820b8ca5473b80aabef416bdf7e07ee7f591082878d60405180846bffffffffffffffffffffffff168152602001836bffffffffffffffffffffffff168152602001828152602001935050505060405180910390a26000600660008d815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760008c815260200190815260200160002060006124a4919061673b565b6000801b600560008d8152602001908152602001600020600401819055506000801b600560008d8152602001908152602001600020600701819055506000600560008d8152602001908152602001600020600601819055506000600560008d815260200190815260200160002060050181905550505050505050505050919050565b6000600380549050905090565b81600060056000838152602001908152602001600020600301549050600081141580156125605750804210155b801561258457506000801b6005600084815260200190815260200160002060080154145b6125d9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180616bed6028913960400191505060405180910390fd5b5060006125fb6005600086815260200190815260200160002060040154614921565b9250505060006005600086815260200190815260200160002060060154905060006005600087815260200190815260200160002060070154905060005b858110156126a75761266582600460008a815260200190815260200160002061494790919063ffffffff16565b9150600061267283614921565b92505050612697816bffffffffffffffffffffffff16856140a390919063ffffffff16565b9350508080600101915050612638565b507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b811415612741576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f7265616368656420656e64206f66206f72646572206c6973740000000000000081525060200191505060405180910390fd5b60008061274d83614921565b9250925050612781816bffffffffffffffffffffffff16866bffffffffffffffffffffffff1661412b90919063ffffffff16565b6127a2836bffffffffffffffffffffffff168661412b90919063ffffffff16565b10612815576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f746f6f206d616e79206f72646572732073756d6d65642075700000000000000081525060200191505060405180910390fd5b83600560008a81526020019081526020016000206006018190555082600560008a8152602001908152602001600020600701819055505050505050505050565b61285d614ca6565b73ffffffffffffffffffffffffffffffffffffffff1661287b6135fb565b73ffffffffffffffffffffffffffffffffffffffff1614612904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600f82111561295e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180616aa9602d913960400191505060405180910390fd5b61296781611eea565b600d60006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081600c819055505050565b60056020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050154908060060154908060070154908060080154908060090160009054906101000a90046bffffffffffffffffffffffff169080600901600c9054906101000a900460ff169080600901600d9054906101000a900460ff169080600a01549080600b015490508e565b600d60009054906101000a900467ffffffffffffffff1681565b6000612ab98260046000868152602001908152602001600020614cae90919063ffffffff16565b905092915050565b612ac9614ca6565b73ffffffffffffffffffffffffffffffffffffffff16612ae76135fb565b73ffffffffffffffffffffffffffffffffffffffff1614612b70576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080836000801b60056000838152602001908152602001600020600801541415612cc1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f41756374696f6e206e6f74207965742066696e6973686564000000000000000081525060200191505060405180910390fd5b60005b8451811015612d8457612d05858281518110612cdc57fe5b602002602001015160046000898152602001908152602001600020614cea90919063ffffffff16565b612d77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f6f72646572206973206e6f206c6f6e67657220636c61696d61626c650000000081525060200191505060405180910390fd5b8080600101915050612cc4565b50612d8d616783565b60056000878152602001908152602001600020604051806101c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160098201600c9054906101000a900460ff1615151515815260200160098201600d9054906101000a900460ff16151515158152602001600a8201548152602001600b820154815250509050600080612f39836101000151614921565b92509250506000612f5d88600081518110612f5057fe5b6020026020010151614921565b505090506000600560008b8152602001908152602001600020600901600c9054906101000a900460ff16905060005b8951811015613260576000806000612fb68d8581518110612fa957fe5b6020026020010151614921565b9250925092508567ffffffffffffffff168367ffffffffffffffff1614613028576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180616bca6023913960400191505060405180910390fd5b84156130565761304f816bffffffffffffffffffffffff168c6140a390919063ffffffff16565b9a506131e9565b8861010001518d858151811061306857fe5b6020026020010151141561312b576130dc6130cd886bffffffffffffffffffffffff166130bf8b6bffffffffffffffffffffffff168d61012001516bffffffffffffffffffffffff1661412b90919063ffffffff16565b6141b190919063ffffffff16565b8d6140a390919063ffffffff16565b9b506131246131158a61012001516bffffffffffffffffffffffff16836bffffffffffffffffffffffff166143c190919063ffffffff16565b8c6140a390919063ffffffff16565b9a506131e8565b6131568961010001518e868151811061314057fe5b6020026020010151614d2790919063ffffffff16565b156131c3576131bc6131ad886bffffffffffffffffffffffff1661319f8b6bffffffffffffffffffffffff16856bffffffffffffffffffffffff1661412b90919063ffffffff16565b6141b190919063ffffffff16565b8d6140a390919063ffffffff16565b9b506131e7565b6131e4816bffffffffffffffffffffffff168c6140a390919063ffffffff16565b9a505b5b5b8567ffffffffffffffff168e7f3f2c83616e48a2f8b3c9cc26499e2e5c61643714dac49027d82cf6732f96a91a848460405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35050508080600101915050612f8c565b5061326d8a898985614f45565b5050505050509250929050565b6060600060018484604051808383808284378083019250505092505050908152602001604051809103902060010160018585604051808383808284378083019250505092505050908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff16818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156133865780601f1061335b57610100808354040283529160200191613386565b820191906000526020600020905b81548152906001019060200180831161336957829003601f168201915b50505050509150915091509250929050565b8160056000828152602001908152602001600020600201544210613407576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526032815260200180616a0a6032913960400191505060405180910390fd5b600061341233611eea565b90506000805b845181101561359257600061345b86838151811061343257fe5b6020026020010151600460008a815260200190815260200160002061503a90919063ffffffff16565b9050801561358457600080600061348489868151811061347757fe5b6020026020010151614921565b9250925092508667ffffffffffffffff168367ffffffffffffffff16146134f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061699e6023913960400191505060405180910390fd5b613517816bffffffffffffffffffffffff16876140a390919063ffffffff16565b95508667ffffffffffffffff168a7f7edae327fe79804b2f38bd490d874a0d188d3ae8911b303205abe47400086ac4848460405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35050505b508080600101915050613418565b506135f433826005600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166150e59092919063ffffffff16565b5050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b85600060056000838152602001908152602001600020600301549050600081141580156136515750804210155b801561367557506000801b6005600084815260200190815260200160002060080154145b6136ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180616bed6028913960400191505060405180910390fd5b5060056000888152602001908152602001600020600901600d9054906101000a900460ff16613744576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806169456028913960400191505060405180910390fd5b60018651148015613756575060018551145b6137ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180616afc6027913960400191505060405180910390fd5b60006137b633611eea565b90506138136137ee82896000815181106137cc57fe5b6020026020010151896000815181106137e157fe5b6020026020010151614380565b600560008b815260200190815260200160002060070154614d2790919063ffffffff16565b613868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061696d6031913960400191505060405180910390fd5b61387788888888888833615187565b5061388188611f7f565b505050505050505050565b606060005b60208160ff161080156138dc5750600060f81b838260ff16602081106138b357fe5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156138ee578080600101915050613891565b60608160ff1667ffffffffffffffff8111801561390a57600080fd5b506040519080825280601f01601f19166020018201604052801561393d5781602001600182028036833780820191505090505b509050600091505b60208260ff161080156139905750600060f81b848360ff166020811061396757fe5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156139f357838260ff16602081106139a457fe5b1a60f81b818360ff16815181106139b757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050613945565b8092505050919050565b613a05614ca6565b73ffffffffffffffffffffffffffffffffffffffff16613a236135fb565b73ffffffffffffffffffffffffffffffffffffffff1614613aac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b613ab88484848461579f565b50505050565b60606003805480602002602001604051908101604052809291908181526020018280548015613b0c57602002820191906000526020600020905b815481526020019060010190808311613af8575b5050505050905090565b600b5481565b60606003805490508210613b98576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f496e646578206f7574206f6620626f756e64730000000000000000000000000081525060200191505060405180910390fd5b613bb860038381548110613ba857fe5b906000526020600020015461388c565b9050919050565b60006060829050600081511415613bdc576000801b915050613be5565b60208301519150505b919050565b60008660056000828152602001908152602001600020600301544210613c5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180616cbe6022913960400191505060405180910390fd5b613c6a88888888888833615187565b9150509695505050505050565b6103e881565b613c85614ca6565b73ffffffffffffffffffffffffffffffffffffffff16613ca36135fb565b73ffffffffffffffffffffffffffffffffffffffff1614613d2c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b613d368282615b7e565b5050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c5481565b60008760056000828152602001908152602001600020600301544210613de4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180616cbe6022913960400191505060405180910390fd5b613df389898989898989615187565b915050979650505050505050565b613e09614ca6565b73ffffffffffffffffffffffffffffffffffffffff16613e276135fb565b73ffffffffffffffffffffffffffffffffffffffff1614613eb0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613f36576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806169c16026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60076020528060005260406000206000915090508054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561409b5780601f106140705761010080835404028352916020019161409b565b820191906000526020600020905b81548152906001019060200180831161407e57829003601f168201915b505050505081565b600080828401905083811015614121576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60008083141561413e57600090506141ab565b600082840290508284828161414f57fe5b04146141a6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180616b836021913960400191505060405180910390fd5b809150505b92915050565b6000808211614228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b81838161423157fe5b04905092915050565b6142f5846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050615f25565b50505050565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b816000016000600160001b815260200190815260200160002081905550600160001b8160010160007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b81526020019081526020016000208190555050565b6000816bffffffffffffffffffffffff166060846bffffffffffffffffffffffff16901b60c08667ffffffffffffffff16901b010160001b90509392505050565b600082821115614439576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b60006801000000000000000082106144a7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180616ba46026913960400191505060405180910390fd5b819050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415614553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e6e6f7420696e73657274207a65726f206164647265737300000000000081525060200191505060405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff168367ffffffffffffffff1614156145fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f43616e6e6f7420696e73657274206d61782075696e743634000000000000000081525060200191505060405180910390fd5b60008460010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415806146e55750600073ffffffffffffffffffffffffffffffffffffffff168460000160006001860167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156146f357600090506147ce565b818460000160006001860167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183018460010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600190505b9392505050565b6000808360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415905092915050565b600061484e83836147d5565b6148c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d7573742068617665204164647265737320746f20676574204944000000000081525060200191505060405180910390fd5b60018360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1603905092915050565b600080600060c08460001c901c925060608460001c901c91508360001c90509193909250565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b8214156149c5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180616a616022913960400191505060405180910390fd5b60008360000160008481526020019081526020016000205490506000801b811415614a3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180616b23602a913960400191505060405180910390fd5b8091505092915050565b60006c010000000000000000000000008210614aac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061691f6026913960400191505060405180910390fd5b819050919050565b6000614b016103e8614af360056000898152602001908152602001600020600a0154856bffffffffffffffffffffffff1661412b90919063ffffffff16565b6141b190919063ffffffff16565b905060056000868152602001908152602001600020600901600c9054906101000a900460ff1615614b5e57614b5985614b5183856bffffffffffffffffffffffff166140a390919063ffffffff16565b600086614f45565b614c9f565b600080614b806005600089815260200190815260200160002060080154614921565b92509250506000614ba887866bffffffffffffffffffffffff166143c190919063ffffffff16565b90506000614bf1614be2876bffffffffffffffffffffffff16614bd4858961412b90919063ffffffff16565b6141b190919063ffffffff16565b836140a390919063ffffffff16565b90506000614c36856bffffffffffffffffffffffff16614c28866bffffffffffffffffffffffff168c61412b90919063ffffffff16565b6141b190919063ffffffff16565b9050614c448a83838b614f45565b614c998a614c7b896bffffffffffffffffffffffff16614c6d8d8b61412b90919063ffffffff16565b6141b190919063ffffffff16565b6000600d60009054906101000a900467ffffffffffffffff16614f45565b50505050505b5050505050565b600033905090565b6000600160001b821415614cc55760009050614ce4565b6000801b83600001600084815260200190815260200160002054141590505b92915050565b600080614cf7848461503a565b90508015614d1d576000801b846001016000858152602001908152602001600020819055505b8091505092915050565b600080600080614d3686614921565b9250925092506000806000614d4a88614921565b925092509250614d7f846bffffffffffffffffffffffff16836bffffffffffffffffffffffff1661412b90919063ffffffff16565b614dae826bffffffffffffffffffffffff16876bffffffffffffffffffffffff1661412b90919063ffffffff16565b1015614dc35760019650505050505050614f3f565b614df2846bffffffffffffffffffffffff16836bffffffffffffffffffffffff1661412b90919063ffffffff16565b614e21826bffffffffffffffffffffffff16876bffffffffffffffffffffffff1661412b90919063ffffffff16565b1115614e365760009650505050505050614f3f565b816bffffffffffffffffffffffff16856bffffffffffffffffffffffff161015614e695760019650505050505050614f3f565b816bffffffffffffffffffffffff16856bffffffffffffffffffffffff161115614e9c5760009650505050505050614f3f565b8267ffffffffffffffff168667ffffffffffffffff161415614f09576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180616c15602d913960400191505060405180910390fd5b8267ffffffffffffffff168667ffffffffffffffff161015614f345760019650505050505050614f3f565b600096505050505050505b92915050565b6000614f5b82600861601490919063ffffffff16565b90506000841115614fc857614fc781856005600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166150e59092919063ffffffff16565b5b60008311156150335761503281846005600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166150e59092919063ffffffff16565b5b5050505050565b60006150468383614cae565b61505357600090506150df565b60008360010160008481526020019081526020016000205490506000846000016000858152602001908152602001600020549050808560000160008481526020019081526020016000208190555081856001016000838152602001908152602001600020819055506000801b856000016000868152602001908152602001600020819055506001925050505b92915050565b6151828363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050615f25565b505050565b600080600660008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461538c576319a05a7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168173ffffffffffffffffffffffffffffffffffffffff166319a05a7e858c89896040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b1580156152be57600080fd5b505afa1580156152d2573d6000803e3d6000fd5b505050506040513d60208110156152e857600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461538b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f75736572206e6f7420616c6c6f77656420746f20706c616365206f726465720081525060200191505060405180910390fd5b5b506000806153af600560008c815260200190815260200160002060040154614921565b925092505060005b89518110156154a7576154028982815181106153cf57fe5b60200260200101516bffffffffffffffffffffffff16836bffffffffffffffffffffffff1661412b90919063ffffffff16565b615444846bffffffffffffffffffffffff168c848151811061542057fe5b60200260200101516bffffffffffffffffffffffff1661412b90919063ffffffff16565b1061549a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180616c426029913960400191505060405180910390fd5b80806001019150506153b7565b50505060006154b583611eea565b91506000600560008b815260200190815260200160002060050154905060005b895181101561572e5760008a82815181106154ec57fe5b60200260200101516bffffffffffffffffffffffff1611615558576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180616a3c6025913960400191505060405180910390fd5b8189828151811061556557fe5b60200260200101516bffffffffffffffffffffffff16116155ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f7264657220746f6f20736d616c6c000000000000000000000000000000000081525060200191505060405180910390fd5b615658615622858c848151811061560157fe5b60200260200101518c858151811061561557fe5b6020026020010151614380565b89838151811061562e57fe5b6020026020010151600460008f81526020019081526020016000206160e79092919063ffffffff16565b156157215761569189828151811061566c57fe5b60200260200101516bffffffffffffffffffffffff16846140a390919063ffffffff16565b92508367ffffffffffffffff168b7f9304f2fc7ed6d42c0400e678dbc7283e1e9054889c3afea5f965adff66ef9eac8c84815181106156cc57fe5b60200260200101518c85815181106156e057fe5b602002602001015160405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35b80806001019150506154d5565b50615792333084600560008f815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661423a909392919063ffffffff16565b5050979650505050505050565b60008484905011615818576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f5a65726f206e616d65206973206e6f7420616c6c6f776564000000000000000081525060200191505060405180910390fd5b60008282905011615891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f53686f756c64206e6f74206265206120656d707479206461746100000000000081525060200191505060405180910390fd5b600067ffffffffffffffff1660018585604051808383808284378083019250505092505050908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff1614156159b057600361593b85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050613bbf565b908060018154018082558091505060019003906000526020600020016000909190919091505560038054905060018585604051808383808284378083019250505092505050908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b604051806060016040528060018686604051808383808284378083019250505092505050908152602001604051809103902060000160009054906101000a900463ffffffff1663ffffffff1681526020014267ffffffffffffffff16815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525060018585604051808383808284378083019250505092505050908152602001604051809103902060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151816001019080519060200190615af2929190616839565b50905050838360405180838380828437808301925050509250505060405180910390207fbaa206e5ea800eb88bce099f453fee53295b793b9d5d1cfc4ce4b6db06a34f53838360405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a250505050565b600067ffffffffffffffff1660018383604051808383808284378083019250505092505050908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff161415615c47576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f446f63756d656e742073686f756c64206578697374000000000000000000000081525060200191505060405180910390fd5b60006001808484604051808383808284378083019250505092505050908152602001604051809103902060000160009054906101000a900463ffffffff160390506001600380549050038163ffffffff1614615d9257600360016003805490500381548110615cb257fe5b906000526020600020015460038263ffffffff1681548110615cd057fe5b9060005260206000200181905550600181016001615d0a60038463ffffffff1681548110615cfa57fe5b906000526020600020015461388c565b6040518082805190602001908083835b60208310615d3d5780518252602082019150602081019050602083039250615d1a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b6003805480615d9d57fe5b60019003818190600052602060002001600090559055828260405180838380828437808301925050509250505060405180910390207f4b5338540b4d1c0f6dd0308a25f633b7ff60472f894d711cff9dd64e35c613b26001858560405180838380828437808301925050509250505090815260200160405180910390206001016040518080602001828103825283818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015615ea65780601f10615e7b57610100808354040283529160200191615ea6565b820191906000526020600020905b815481529060010190602001808311615e8957829003601f168201915b50509250505060405180910390a2600183836040518083838082843780830192505050925050509081526020016040518091039020600080820160006101000a81549063ffffffff02191690556000820160046101000a81549067ffffffffffffffff0219169055600182016000615f1e91906168b9565b5050505050565b6060615f87826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166163959092919063ffffffff16565b905060008151111561600f57808060200190516020811015615fa857600080fd5b810190808051906020019092919050505061600e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180616c94602a913960400191505060405180910390fd5b5b505050565b600061602083836163ad565b616092576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d757374206861766520494420746f206765742041646472657373000000000081525060200191505060405180910390fd5b8260000160006001840167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000806160f384614921565b9250505060006bffffffffffffffffffffffff16816bffffffffffffffffffffffff16141561618a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f496e73657274696e67207a65726f206973206e6f7420737570706f727465640081525060200191505060405180910390fd5b600160001b84141580156161c157507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b8414155b616233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f496e73657274696e6720656c656d656e74206973206e6f742076616c6964000081525060200191505060405180910390fd5b61623d8585614cae565b1561624c57600091505061638e565b600160001b831415801561627757506000801b85600101600085815260200190815260200160002054145b1561628657600091505061638e565b6162998484614d2790919063ffffffff16565b6162a757600091505061638e565b5b6000801b8560000160008581526020019081526020016000205414156162e5578460010160008481526020019081526020016000205492506162a8565b6000808490505b80915086600001600082815260200190815260200160002054905061631a8682614d2790919063ffffffff16565b6162ec578587600001600084815260200190815260200160002081905550858760010160008381526020019081526020016000208190555081876001016000888152602001908152602001600020819055508087600001600088815260200190815260200160002081905550600193505050505b9392505050565b60606163a48484600085616433565b90509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168360000160006001850167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415905092915050565b60608247101561648e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180616a836026913960400191505060405180910390fd5b616497856165dc565b616509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106165595780518252602082019150602081019050602083039250616536565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146165bb576040519150601f19603f3d011682016040523d82523d6000602084013e6165c0565b606091505b50915091506165d08282866165ef565b92505050949350505050565b600080823b905060008111915050919050565b606083156165ff578290506166b4565b6000835111156166125782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561667957808201518184015260208101905061665e565b50505050905090810190601f1680156166a65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106166fc57805160ff191683800117855561672a565b8280016001018555821561672a579182015b8281111561672957825182559160200191906001019061670e565b5b5090506167379190616901565b5090565b50805460018160011615610100020316600290046000825580601f106167615750616780565b601f01602090049060005260206000209081019061677f9190616901565b5b50565b604051806101c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600080191681526020016000815260200160008152602001600080191681526020016000801916815260200160006bffffffffffffffffffffffff16815260200160001515815260200160001515815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061687a57805160ff19168380011785556168a8565b828001600101855582156168a8579182015b828111156168a757825182559160200191906001019061688c565b5b5090506168b59190616901565b5090565b50805460018160011615610100020316600290046000825580601f106168df57506168fe565b601f0160209004906000526020600020908101906168fd9190616901565b5b50565b5b8082111561691a576000816000905550600101616902565b509056fe53616665436173743a2076616c756520646f65736e27742066697420696e20393620626974736e6f7420616c6c6f77656420746f20736574746c652061756374696f6e2061746f6d6963616c6c7970726563616c63756c61746553656c6c416d6f756e7453756d20697320616c726561647920746f6f20616476616e6365644f6e6c792074686520757365722063616e2063616e63656c20686973206f72646572734f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373746f6b656e732063616e6e6f742062652061756374696f6e656420666f7220667265656e6f206c6f6e67657220696e206f7264657220706c6163656d656e7420616e642063616e63656c6174696f6e2070686173655f6d696e427579416d6f756e7473206d7573742062652067726561746572207468616e2030547279696e6720746f20676574206e657874206f66206c61737420656c656d656e74416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c466565206973206e6f7420616c6c6f77656420746f2062652073657420686967686572207468616e20312e352561756374696f6e20656e642064617465206d75737420626520696e20746865206675747572654f6e6c79206f6e65206f726465722063616e20626520706c616365642061746f6d6963616c6c79547279696e6720746f20676574206e657874206f66206e6f6e2d6578697374656e7420656c656d656e746d696e696d756d42696464696e67416d6f756e745065724f72646572206973206e6f7420616c6c6f77656420746f206265207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753616665436173743a2076616c756520646f65736e27742066697420696e20363420626974736f6e6c7920616c6c6f77656420746f20636c61696d20666f722073616d65207573657241756374696f6e206e6f7420696e20736f6c7574696f6e207375626d697373696f6e20706861736575736572206973206e6f7420616c6c6f77656420746f20706c6163652073616d65206f726465722074776963656c696d6974207072696365206e6f7420626574746572207468616e206d696d696d616c206f6666657274696d6520706572696f647320617265206e6f7420636f6e6669677572656420636f72726563746c795361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565646e6f206c6f6e67657220696e206f7264657220706c6163656d656e74207068617365a26469706673582212205f6c77bf119403eb2b57dbe6d6cb783a48d5e18962b31a825fdde4b51582a37564736f6c634300060c0033",
      "deployedBytecode": "",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "getAllDocuments()": {
            "returns": {
              "_0": "string List of all documents names present in the contract."
            }
          },
          "getDocument(string)": {
            "params": {
              "_name": "Name of the document"
            },
            "returns": {
              "_0": "string The data associated with the document.",
              "_1": "uint256 the timestamp at which the document was last modified."
            }
          },
          "getDocumentCount()": {
            "returns": {
              "_0": "uint256 Count of the document names present in the contract."
            }
          },
          "getDocumentName(uint256)": {
            "returns": {
              "_0": "string Name of the document name."
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "linkReferences": {},
          "object": "60806040526000600c556001600d60006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055503480156200004057600080fd5b50600062000053620000f760201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620000ff565b600033905090565b616d15806200010f6000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80638da5cb5b1161010f578063d225269c116100a2578063e86dea4a11610071578063e86dea4a146112b7578063ec20d0bb146112d5578063f2fde38b14611552578063f59c2f0614611596576101f0565b8063d225269c14610f6b578063d73792a9146111c8578063dde51f6d146111e6578063e4a59ef41461125f576101f0565b80639fa5f50b116100de5780639fa5f50b14610d78578063a7e7664414610dd7578063c6b547e614610df5578063cfb5192814610e9c576101f0565b80638da5cb5b1461099057806391cfc1d4146109c45780639201de5514610c035780639c64d0ae14610caa576101f0565b806340b20b0911610187578063715018a611610156578063715018a6146106ee5780637882deaf146106f85780637ccb6a64146107d55780637ed18b70146108ce576101f0565b806340b20b091461054f57806355fc62d21461059d5780635cefb2911461067857806363c699a4146106a0576101f0565b80632b956ff7116101c35780632b956ff7146104555780632e993611146104b75780633d1c2273146104f95780633e12905f14610517576101f0565b80630a4cd6c9146101f557806315d37b4b1461038957806319a50f49146103cb5780632199d5cd146103f3575b600080fd5b610373600480360361016081101561020c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080356bffffffffffffffffffffffff16906020019092919080356bffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803515159060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156102ed57600080fd5b8201836020820111156102ff57600080fd5b8035906020019184600183028401116401000000008311171561032157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061163d565b6040518082815260200191505060405180910390f35b6103b56004803603602081101561039f57600080fd5b8101908080359060200190929190505050611cfc565b6040518082815260200191505060405180910390f35b6103d3611d56565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6104356004803603602081101561040957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d70565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6104976004803603602081101561046b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611eea565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6104e3600480360360208110156104cd57600080fd5b8101908080359060200190929190505050611f7f565b6040518082815260200191505060405180910390f35b610501612526565b6040518082815260200191505060405180910390f35b61054d6004803603604081101561052d57600080fd5b810190808035906020019092919080359060200190929190505050612533565b005b61059b6004803603604081101561056557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612855565b005b6105c9600480360360208110156105b357600080fd5b810190808035906020019092919050505061299a565b604051808f73ffffffffffffffffffffffffffffffffffffffff1681526020018e73ffffffffffffffffffffffffffffffffffffffff1681526020018d81526020018c81526020018b81526020018a8152602001898152602001888152602001878152602001866bffffffffffffffffffffffff168152602001851515815260200184151581526020018381526020018281526020019e50505050505050505050505050505060405180910390f35b610680612a78565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6106d6600480360360408110156106b657600080fd5b810190808035906020019092919080359060200190929190505050612a92565b60405180821515815260200191505060405180910390f35b6106f6612ac1565b005b6107b86004803603604081101561070e57600080fd5b81019080803590602001909291908035906020019064010000000081111561073557600080fd5b82018360208201111561074757600080fd5b8035906020019184602083028401116401000000008311171561076957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050612c2e565b604051808381526020018281526020019250505060405180910390f35b61084c600480360360208110156107eb57600080fd5b810190808035906020019064010000000081111561080857600080fd5b82018360208201111561081a57600080fd5b8035906020019184600183028401116401000000008311171561083c57600080fd5b909192939192939050505061327a565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610892578082015181840152602081019050610877565b50505050905090810190601f1680156108bf5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61098e600480360360408110156108e457600080fd5b81019080803590602001909291908035906020019064010000000081111561090b57600080fd5b82018360208201111561091d57600080fd5b8035906020019184602083028401116401000000008311171561093f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050613398565b005b6109986135fb565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610c01600480360360a08110156109da57600080fd5b810190808035906020019092919080359060200190640100000000811115610a0157600080fd5b820183602082011115610a1357600080fd5b80359060200191846020830284011164010000000083111715610a3557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610a9557600080fd5b820183602082011115610aa757600080fd5b80359060200191846020830284011164010000000083111715610ac957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610b2957600080fd5b820183602082011115610b3b57600080fd5b80359060200191846020830284011164010000000083111715610b5d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610bbd57600080fd5b820183602082011115610bcf57600080fd5b80359060200191846001830284011164010000000083111715610bf157600080fd5b9091929391929390505050613624565b005b610c2f60048036036020811015610c1957600080fd5b810190808035906020019092919050505061388c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c6f578082015181840152602081019050610c54565b50505050905090810190601f168015610c9c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610d7660048036036040811015610cc057600080fd5b8101908080359060200190640100000000811115610cdd57600080fd5b820183602082011115610cef57600080fd5b80359060200191846001830284011164010000000083111715610d1157600080fd5b909192939192939080359060200190640100000000811115610d3257600080fd5b820183602082011115610d4457600080fd5b80359060200191846001830284011164010000000083111715610d6657600080fd5b90919293919293905050506139fd565b005b610d80613abe565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610dc3578082015181840152602081019050610da8565b505050509050019250505060405180910390f35b610ddf613b16565b6040518082815260200191505060405180910390f35b610e2160048036036020811015610e0b57600080fd5b8101908080359060200190929190505050613b1c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e61578082015181840152602081019050610e46565b50505050905090810190601f168015610e8e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610f5560048036036020811015610eb257600080fd5b8101908080359060200190640100000000811115610ecf57600080fd5b820183602082011115610ee157600080fd5b80359060200191846001830284011164010000000083111715610f0357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050613bbf565b6040518082815260200191505060405180910390f35b6111a8600480360360a0811015610f8157600080fd5b810190808035906020019092919080359060200190640100000000811115610fa857600080fd5b820183602082011115610fba57600080fd5b80359060200191846020830284011164010000000083111715610fdc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561103c57600080fd5b82018360208201111561104e57600080fd5b8035906020019184602083028401116401000000008311171561107057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156110d057600080fd5b8201836020820111156110e257600080fd5b8035906020019184602083028401116401000000008311171561110457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561116457600080fd5b82018360208201111561117657600080fd5b8035906020019184600183028401116401000000008311171561119857600080fd5b9091929391929390505050613bea565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6111d0613c77565b6040518082815260200191505060405180910390f35b61125d600480360360208110156111fc57600080fd5b810190808035906020019064010000000081111561121957600080fd5b82018360208201111561122b57600080fd5b8035906020019184600183028401116401000000008311171561124d57600080fd5b9091929391929390505050613c7d565b005b61128b6004803603602081101561127557600080fd5b8101908080359060200190929190505050613d3a565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6112bf613d6d565b6040518082815260200191505060405180910390f35b611532600480360360c08110156112eb57600080fd5b81019080803590602001909291908035906020019064010000000081111561131257600080fd5b82018360208201111561132457600080fd5b8035906020019184602083028401116401000000008311171561134657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156113a657600080fd5b8201836020820111156113b857600080fd5b803590602001918460208302840111640100000000831117156113da57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561143a57600080fd5b82018360208201111561144c57600080fd5b8035906020019184602083028401116401000000008311171561146e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156114ce57600080fd5b8201836020820111156114e057600080fd5b8035906020019184600183028401116401000000008311171561150257600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613d73565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6115946004803603602081101561156857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613e01565b005b6115c2600480360360208110156115ac57600080fd5b8101908080359060200190929190505050613ff3565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156116025780820151818401526020810190506115e7565b50505050905090810190601f16801561162f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60006116b6333061168f6103e8611681611664600c546103e86140a390919063ffffffff16565b8e6bffffffffffffffffffffffff1661412b90919063ffffffff16565b6141b190919063ffffffff16565b8f73ffffffffffffffffffffffffffffffffffffffff1661423a909392919063ffffffff16565b6000886bffffffffffffffffffffffff161161173a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f63616e6e6f742061756374696f6e207a65726f20746f6b656e7300000000000081525060200191505060405180910390fd5b6000876bffffffffffffffffffffffff16116117a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806169e76023913960400191505060405180910390fd5b600086116117fa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180616b4d6036913960400191505060405180910390fd5b888a1115611853576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180616c6b6029913960400191505060405180910390fd5b4289116118ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180616ad66026913960400191505060405180910390fd5b6118c16001600b546140a390919063ffffffff16565b600b819055506118e460046000600b5481526020019081526020016000206142fb565b60006118ef33611eea565b9050604051806101c001604052808e73ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff1681526020018c81526020018b815260200161194c838b8d614380565b815260200188815260200160008152602001600160001b81526020016000801b815260200160006bffffffffffffffffffffffff1681526020016000151581526020018615158152602001600c5481526020018781525060056000600b54815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555061014082015181600901600c6101000a81548160ff02191690831515021790555061016082015181600901600d6101000a81548160ff02191690831515021790555061018082015181600a01556101a082015181600b01559050508360066000600b54815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260076000600b5481526020019081526020016000209080519060200190611b9d9291906166bb565b508b73ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16600b547f728d0fed13687f1840de94f5ae640eae49b43eda26b7ffe97e55e79a0de6e40c8e8e868f8f8f8f8e8e604051808a81526020018981526020018867ffffffffffffffff168152602001876bffffffffffffffffffffffff168152602001866bffffffffffffffffffffffff1681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611ca5578082015181840152602081019050611c8a565b50505050905090810190601f168015611cd25780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390a4600b549150509b9a5050505050505050505050565b60004260056000848152602001908152602001600020600301541015611d255760009050611d51565b611d4e4260056000858152602001908152602001600020600301546143c190919063ffffffff16565b90505b919050565b600a60009054906101000a900467ffffffffffffffff1681565b6000611dae611da96001600a60009054906101000a900467ffffffffffffffff1667ffffffffffffffff166140a390919063ffffffff16565b614444565b600a60006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550611e02600a60009054906101000a900467ffffffffffffffff168360086144af9092919063ffffffff16565b611e74576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5573657220616c7265616479207265676973746572656400000000000000000081525060200191505060405180910390fd5b600a60009054906101000a900467ffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff167f6838f67cb358c332087b73dbe769a6c869a5f87225236c16dda5d0013a77074c82604051808267ffffffffffffffff16815260200191505060405180910390a2919050565b6000611f008260086147d590919063ffffffff16565b15611f2057611f1982600861484290919063ffffffff16565b9050611f7a565b611f2982611d70565b90508173ffffffffffffffffffffffffffffffffffffffff168167ffffffffffffffff167f969d438b19b6b5fb3c0d3c6f16867e519fcec4233799d6be29d1c00f2045ba2660405160405180910390a35b919050565b60008160006005600083815260200190815260200160002060030154905060008114158015611fae5750804210155b8015611fd257506000801b6005600084815260200190815260200160002060080154145b612027576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180616bed6028913960400191505060405180910390fd5b50600080600061204c6005600088815260200190815260200160002060040154614921565b92509250925060006005600088815260200190815260200160002060060154905060006005600089815260200190815260200160002060070154905060008060008590505b60006120b885600460008f815260200190815260200160002061494790919063ffffffff16565b90507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b8114156120eb5750612174565b8094506120f785614921565b909150816bffffffffffffffffffffffff169150806bffffffffffffffffffffffff169050809450819550505061213783876140a390919063ffffffff16565b95505061215b82876bffffffffffffffffffffffff1661412b90919063ffffffff16565b61216e848761412b90919063ffffffff16565b10612091575b6000851180156121b657506121a082876bffffffffffffffffffffffff1661412b90919063ffffffff16565b6121b3848761412b90919063ffffffff16565b10155b156122bf5760006122026121f3856121e5868b6bffffffffffffffffffffffff1661412b90919063ffffffff16565b6141b190919063ffffffff16565b876143c190919063ffffffff16565b905080831061228d57600061222082856143c190919063ffffffff16565b905061222b81614a45565b600560008f815260200190815260200160002060090160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555061228282886143c190919063ffffffff16565b9650859b50506122b9565b6122a083876143c190919063ffffffff16565b95506122b66000886122b189614a45565b614380565b9a505b5061234b565b866bffffffffffffffffffffffff168511156122f0576122e96000876122e488614a45565b614380565b995061234a565b6122fc60008789614380565b9950612347612342886bffffffffffffffffffffffff16612334896bffffffffffffffffffffffff168961412b90919063ffffffff16565b6141b190919063ffffffff16565b614a45565b90505b5b89600560008d81526020019081526020016000206008018190555084600560008d8152602001908152602001600020600b015411156123b4576001600560008d8152602001908152602001600020600901600c6101000a81548160ff0219169083151502179055505b6123ce8b826bffffffffffffffffffffffff168a89614ab4565b8a7f4d160a2a345f2faeb9ac2e65272820b8ca5473b80aabef416bdf7e07ee7f591082878d60405180846bffffffffffffffffffffffff168152602001836bffffffffffffffffffffffff168152602001828152602001935050505060405180910390a26000600660008d815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760008c815260200190815260200160002060006124a4919061673b565b6000801b600560008d8152602001908152602001600020600401819055506000801b600560008d8152602001908152602001600020600701819055506000600560008d8152602001908152602001600020600601819055506000600560008d815260200190815260200160002060050181905550505050505050505050919050565b6000600380549050905090565b81600060056000838152602001908152602001600020600301549050600081141580156125605750804210155b801561258457506000801b6005600084815260200190815260200160002060080154145b6125d9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180616bed6028913960400191505060405180910390fd5b5060006125fb6005600086815260200190815260200160002060040154614921565b9250505060006005600086815260200190815260200160002060060154905060006005600087815260200190815260200160002060070154905060005b858110156126a75761266582600460008a815260200190815260200160002061494790919063ffffffff16565b9150600061267283614921565b92505050612697816bffffffffffffffffffffffff16856140a390919063ffffffff16565b9350508080600101915050612638565b507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b811415612741576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f7265616368656420656e64206f66206f72646572206c6973740000000000000081525060200191505060405180910390fd5b60008061274d83614921565b9250925050612781816bffffffffffffffffffffffff16866bffffffffffffffffffffffff1661412b90919063ffffffff16565b6127a2836bffffffffffffffffffffffff168661412b90919063ffffffff16565b10612815576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f746f6f206d616e79206f72646572732073756d6d65642075700000000000000081525060200191505060405180910390fd5b83600560008a81526020019081526020016000206006018190555082600560008a8152602001908152602001600020600701819055505050505050505050565b61285d614ca6565b73ffffffffffffffffffffffffffffffffffffffff1661287b6135fb565b73ffffffffffffffffffffffffffffffffffffffff1614612904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600f82111561295e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180616aa9602d913960400191505060405180910390fd5b61296781611eea565b600d60006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081600c819055505050565b60056020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050154908060060154908060070154908060080154908060090160009054906101000a90046bffffffffffffffffffffffff169080600901600c9054906101000a900460ff169080600901600d9054906101000a900460ff169080600a01549080600b015490508e565b600d60009054906101000a900467ffffffffffffffff1681565b6000612ab98260046000868152602001908152602001600020614cae90919063ffffffff16565b905092915050565b612ac9614ca6565b73ffffffffffffffffffffffffffffffffffffffff16612ae76135fb565b73ffffffffffffffffffffffffffffffffffffffff1614612b70576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080836000801b60056000838152602001908152602001600020600801541415612cc1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f41756374696f6e206e6f74207965742066696e6973686564000000000000000081525060200191505060405180910390fd5b60005b8451811015612d8457612d05858281518110612cdc57fe5b602002602001015160046000898152602001908152602001600020614cea90919063ffffffff16565b612d77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f6f72646572206973206e6f206c6f6e67657220636c61696d61626c650000000081525060200191505060405180910390fd5b8080600101915050612cc4565b50612d8d616783565b60056000878152602001908152602001600020604051806101c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160098201600c9054906101000a900460ff1615151515815260200160098201600d9054906101000a900460ff16151515158152602001600a8201548152602001600b820154815250509050600080612f39836101000151614921565b92509250506000612f5d88600081518110612f5057fe5b6020026020010151614921565b505090506000600560008b8152602001908152602001600020600901600c9054906101000a900460ff16905060005b8951811015613260576000806000612fb68d8581518110612fa957fe5b6020026020010151614921565b9250925092508567ffffffffffffffff168367ffffffffffffffff1614613028576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180616bca6023913960400191505060405180910390fd5b84156130565761304f816bffffffffffffffffffffffff168c6140a390919063ffffffff16565b9a506131e9565b8861010001518d858151811061306857fe5b6020026020010151141561312b576130dc6130cd886bffffffffffffffffffffffff166130bf8b6bffffffffffffffffffffffff168d61012001516bffffffffffffffffffffffff1661412b90919063ffffffff16565b6141b190919063ffffffff16565b8d6140a390919063ffffffff16565b9b506131246131158a61012001516bffffffffffffffffffffffff16836bffffffffffffffffffffffff166143c190919063ffffffff16565b8c6140a390919063ffffffff16565b9a506131e8565b6131568961010001518e868151811061314057fe5b6020026020010151614d2790919063ffffffff16565b156131c3576131bc6131ad886bffffffffffffffffffffffff1661319f8b6bffffffffffffffffffffffff16856bffffffffffffffffffffffff1661412b90919063ffffffff16565b6141b190919063ffffffff16565b8d6140a390919063ffffffff16565b9b506131e7565b6131e4816bffffffffffffffffffffffff168c6140a390919063ffffffff16565b9a505b5b5b8567ffffffffffffffff168e7f3f2c83616e48a2f8b3c9cc26499e2e5c61643714dac49027d82cf6732f96a91a848460405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35050508080600101915050612f8c565b5061326d8a898985614f45565b5050505050509250929050565b6060600060018484604051808383808284378083019250505092505050908152602001604051809103902060010160018585604051808383808284378083019250505092505050908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff16818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156133865780601f1061335b57610100808354040283529160200191613386565b820191906000526020600020905b81548152906001019060200180831161336957829003601f168201915b50505050509150915091509250929050565b8160056000828152602001908152602001600020600201544210613407576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526032815260200180616a0a6032913960400191505060405180910390fd5b600061341233611eea565b90506000805b845181101561359257600061345b86838151811061343257fe5b6020026020010151600460008a815260200190815260200160002061503a90919063ffffffff16565b9050801561358457600080600061348489868151811061347757fe5b6020026020010151614921565b9250925092508667ffffffffffffffff168367ffffffffffffffff16146134f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061699e6023913960400191505060405180910390fd5b613517816bffffffffffffffffffffffff16876140a390919063ffffffff16565b95508667ffffffffffffffff168a7f7edae327fe79804b2f38bd490d874a0d188d3ae8911b303205abe47400086ac4848460405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35050505b508080600101915050613418565b506135f433826005600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166150e59092919063ffffffff16565b5050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b85600060056000838152602001908152602001600020600301549050600081141580156136515750804210155b801561367557506000801b6005600084815260200190815260200160002060080154145b6136ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180616bed6028913960400191505060405180910390fd5b5060056000888152602001908152602001600020600901600d9054906101000a900460ff16613744576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806169456028913960400191505060405180910390fd5b60018651148015613756575060018551145b6137ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180616afc6027913960400191505060405180910390fd5b60006137b633611eea565b90506138136137ee82896000815181106137cc57fe5b6020026020010151896000815181106137e157fe5b6020026020010151614380565b600560008b815260200190815260200160002060070154614d2790919063ffffffff16565b613868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061696d6031913960400191505060405180910390fd5b61387788888888888833615187565b5061388188611f7f565b505050505050505050565b606060005b60208160ff161080156138dc5750600060f81b838260ff16602081106138b357fe5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156138ee578080600101915050613891565b60608160ff1667ffffffffffffffff8111801561390a57600080fd5b506040519080825280601f01601f19166020018201604052801561393d5781602001600182028036833780820191505090505b509050600091505b60208260ff161080156139905750600060f81b848360ff166020811061396757fe5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156139f357838260ff16602081106139a457fe5b1a60f81b818360ff16815181106139b757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050613945565b8092505050919050565b613a05614ca6565b73ffffffffffffffffffffffffffffffffffffffff16613a236135fb565b73ffffffffffffffffffffffffffffffffffffffff1614613aac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b613ab88484848461579f565b50505050565b60606003805480602002602001604051908101604052809291908181526020018280548015613b0c57602002820191906000526020600020905b815481526020019060010190808311613af8575b5050505050905090565b600b5481565b60606003805490508210613b98576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f496e646578206f7574206f6620626f756e64730000000000000000000000000081525060200191505060405180910390fd5b613bb860038381548110613ba857fe5b906000526020600020015461388c565b9050919050565b60006060829050600081511415613bdc576000801b915050613be5565b60208301519150505b919050565b60008660056000828152602001908152602001600020600301544210613c5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180616cbe6022913960400191505060405180910390fd5b613c6a88888888888833615187565b9150509695505050505050565b6103e881565b613c85614ca6565b73ffffffffffffffffffffffffffffffffffffffff16613ca36135fb565b73ffffffffffffffffffffffffffffffffffffffff1614613d2c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b613d368282615b7e565b5050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c5481565b60008760056000828152602001908152602001600020600301544210613de4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180616cbe6022913960400191505060405180910390fd5b613df389898989898989615187565b915050979650505050505050565b613e09614ca6565b73ffffffffffffffffffffffffffffffffffffffff16613e276135fb565b73ffffffffffffffffffffffffffffffffffffffff1614613eb0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613f36576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806169c16026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60076020528060005260406000206000915090508054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561409b5780601f106140705761010080835404028352916020019161409b565b820191906000526020600020905b81548152906001019060200180831161407e57829003601f168201915b505050505081565b600080828401905083811015614121576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60008083141561413e57600090506141ab565b600082840290508284828161414f57fe5b04146141a6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180616b836021913960400191505060405180910390fd5b809150505b92915050565b6000808211614228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b81838161423157fe5b04905092915050565b6142f5846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050615f25565b50505050565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b816000016000600160001b815260200190815260200160002081905550600160001b8160010160007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b81526020019081526020016000208190555050565b6000816bffffffffffffffffffffffff166060846bffffffffffffffffffffffff16901b60c08667ffffffffffffffff16901b010160001b90509392505050565b600082821115614439576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b60006801000000000000000082106144a7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180616ba46026913960400191505060405180910390fd5b819050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415614553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e6e6f7420696e73657274207a65726f206164647265737300000000000081525060200191505060405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff168367ffffffffffffffff1614156145fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f43616e6e6f7420696e73657274206d61782075696e743634000000000000000081525060200191505060405180910390fd5b60008460010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415806146e55750600073ffffffffffffffffffffffffffffffffffffffff168460000160006001860167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156146f357600090506147ce565b818460000160006001860167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183018460010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600190505b9392505050565b6000808360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415905092915050565b600061484e83836147d5565b6148c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d7573742068617665204164647265737320746f20676574204944000000000081525060200191505060405180910390fd5b60018360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1603905092915050565b600080600060c08460001c901c925060608460001c901c91508360001c90509193909250565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b8214156149c5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180616a616022913960400191505060405180910390fd5b60008360000160008481526020019081526020016000205490506000801b811415614a3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180616b23602a913960400191505060405180910390fd5b8091505092915050565b60006c010000000000000000000000008210614aac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061691f6026913960400191505060405180910390fd5b819050919050565b6000614b016103e8614af360056000898152602001908152602001600020600a0154856bffffffffffffffffffffffff1661412b90919063ffffffff16565b6141b190919063ffffffff16565b905060056000868152602001908152602001600020600901600c9054906101000a900460ff1615614b5e57614b5985614b5183856bffffffffffffffffffffffff166140a390919063ffffffff16565b600086614f45565b614c9f565b600080614b806005600089815260200190815260200160002060080154614921565b92509250506000614ba887866bffffffffffffffffffffffff166143c190919063ffffffff16565b90506000614bf1614be2876bffffffffffffffffffffffff16614bd4858961412b90919063ffffffff16565b6141b190919063ffffffff16565b836140a390919063ffffffff16565b90506000614c36856bffffffffffffffffffffffff16614c28866bffffffffffffffffffffffff168c61412b90919063ffffffff16565b6141b190919063ffffffff16565b9050614c448a83838b614f45565b614c998a614c7b896bffffffffffffffffffffffff16614c6d8d8b61412b90919063ffffffff16565b6141b190919063ffffffff16565b6000600d60009054906101000a900467ffffffffffffffff16614f45565b50505050505b5050505050565b600033905090565b6000600160001b821415614cc55760009050614ce4565b6000801b83600001600084815260200190815260200160002054141590505b92915050565b600080614cf7848461503a565b90508015614d1d576000801b846001016000858152602001908152602001600020819055505b8091505092915050565b600080600080614d3686614921565b9250925092506000806000614d4a88614921565b925092509250614d7f846bffffffffffffffffffffffff16836bffffffffffffffffffffffff1661412b90919063ffffffff16565b614dae826bffffffffffffffffffffffff16876bffffffffffffffffffffffff1661412b90919063ffffffff16565b1015614dc35760019650505050505050614f3f565b614df2846bffffffffffffffffffffffff16836bffffffffffffffffffffffff1661412b90919063ffffffff16565b614e21826bffffffffffffffffffffffff16876bffffffffffffffffffffffff1661412b90919063ffffffff16565b1115614e365760009650505050505050614f3f565b816bffffffffffffffffffffffff16856bffffffffffffffffffffffff161015614e695760019650505050505050614f3f565b816bffffffffffffffffffffffff16856bffffffffffffffffffffffff161115614e9c5760009650505050505050614f3f565b8267ffffffffffffffff168667ffffffffffffffff161415614f09576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180616c15602d913960400191505060405180910390fd5b8267ffffffffffffffff168667ffffffffffffffff161015614f345760019650505050505050614f3f565b600096505050505050505b92915050565b6000614f5b82600861601490919063ffffffff16565b90506000841115614fc857614fc781856005600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166150e59092919063ffffffff16565b5b60008311156150335761503281846005600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166150e59092919063ffffffff16565b5b5050505050565b60006150468383614cae565b61505357600090506150df565b60008360010160008481526020019081526020016000205490506000846000016000858152602001908152602001600020549050808560000160008481526020019081526020016000208190555081856001016000838152602001908152602001600020819055506000801b856000016000868152602001908152602001600020819055506001925050505b92915050565b6151828363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050615f25565b505050565b600080600660008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461538c576319a05a7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168173ffffffffffffffffffffffffffffffffffffffff166319a05a7e858c89896040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b1580156152be57600080fd5b505afa1580156152d2573d6000803e3d6000fd5b505050506040513d60208110156152e857600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461538b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f75736572206e6f7420616c6c6f77656420746f20706c616365206f726465720081525060200191505060405180910390fd5b5b506000806153af600560008c815260200190815260200160002060040154614921565b925092505060005b89518110156154a7576154028982815181106153cf57fe5b60200260200101516bffffffffffffffffffffffff16836bffffffffffffffffffffffff1661412b90919063ffffffff16565b615444846bffffffffffffffffffffffff168c848151811061542057fe5b60200260200101516bffffffffffffffffffffffff1661412b90919063ffffffff16565b1061549a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180616c426029913960400191505060405180910390fd5b80806001019150506153b7565b50505060006154b583611eea565b91506000600560008b815260200190815260200160002060050154905060005b895181101561572e5760008a82815181106154ec57fe5b60200260200101516bffffffffffffffffffffffff1611615558576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180616a3c6025913960400191505060405180910390fd5b8189828151811061556557fe5b60200260200101516bffffffffffffffffffffffff16116155ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f7264657220746f6f20736d616c6c000000000000000000000000000000000081525060200191505060405180910390fd5b615658615622858c848151811061560157fe5b60200260200101518c858151811061561557fe5b6020026020010151614380565b89838151811061562e57fe5b6020026020010151600460008f81526020019081526020016000206160e79092919063ffffffff16565b156157215761569189828151811061566c57fe5b60200260200101516bffffffffffffffffffffffff16846140a390919063ffffffff16565b92508367ffffffffffffffff168b7f9304f2fc7ed6d42c0400e678dbc7283e1e9054889c3afea5f965adff66ef9eac8c84815181106156cc57fe5b60200260200101518c85815181106156e057fe5b602002602001015160405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35b80806001019150506154d5565b50615792333084600560008f815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661423a909392919063ffffffff16565b5050979650505050505050565b60008484905011615818576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f5a65726f206e616d65206973206e6f7420616c6c6f776564000000000000000081525060200191505060405180910390fd5b60008282905011615891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f53686f756c64206e6f74206265206120656d707479206461746100000000000081525060200191505060405180910390fd5b600067ffffffffffffffff1660018585604051808383808284378083019250505092505050908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff1614156159b057600361593b85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050613bbf565b908060018154018082558091505060019003906000526020600020016000909190919091505560038054905060018585604051808383808284378083019250505092505050908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b604051806060016040528060018686604051808383808284378083019250505092505050908152602001604051809103902060000160009054906101000a900463ffffffff1663ffffffff1681526020014267ffffffffffffffff16815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525060018585604051808383808284378083019250505092505050908152602001604051809103902060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151816001019080519060200190615af2929190616839565b50905050838360405180838380828437808301925050509250505060405180910390207fbaa206e5ea800eb88bce099f453fee53295b793b9d5d1cfc4ce4b6db06a34f53838360405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a250505050565b600067ffffffffffffffff1660018383604051808383808284378083019250505092505050908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff161415615c47576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f446f63756d656e742073686f756c64206578697374000000000000000000000081525060200191505060405180910390fd5b60006001808484604051808383808284378083019250505092505050908152602001604051809103902060000160009054906101000a900463ffffffff160390506001600380549050038163ffffffff1614615d9257600360016003805490500381548110615cb257fe5b906000526020600020015460038263ffffffff1681548110615cd057fe5b9060005260206000200181905550600181016001615d0a60038463ffffffff1681548110615cfa57fe5b906000526020600020015461388c565b6040518082805190602001908083835b60208310615d3d5780518252602082019150602081019050602083039250615d1a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b6003805480615d9d57fe5b60019003818190600052602060002001600090559055828260405180838380828437808301925050509250505060405180910390207f4b5338540b4d1c0f6dd0308a25f633b7ff60472f894d711cff9dd64e35c613b26001858560405180838380828437808301925050509250505090815260200160405180910390206001016040518080602001828103825283818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015615ea65780601f10615e7b57610100808354040283529160200191615ea6565b820191906000526020600020905b815481529060010190602001808311615e8957829003601f168201915b50509250505060405180910390a2600183836040518083838082843780830192505050925050509081526020016040518091039020600080820160006101000a81549063ffffffff02191690556000820160046101000a81549067ffffffffffffffff0219169055600182016000615f1e91906168b9565b5050505050565b6060615f87826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166163959092919063ffffffff16565b905060008151111561600f57808060200190516020811015615fa857600080fd5b810190808051906020019092919050505061600e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180616c94602a913960400191505060405180910390fd5b5b505050565b600061602083836163ad565b616092576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d757374206861766520494420746f206765742041646472657373000000000081525060200191505060405180910390fd5b8260000160006001840167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000806160f384614921565b9250505060006bffffffffffffffffffffffff16816bffffffffffffffffffffffff16141561618a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f496e73657274696e67207a65726f206973206e6f7420737570706f727465640081525060200191505060405180910390fd5b600160001b84141580156161c157507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b8414155b616233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f496e73657274696e6720656c656d656e74206973206e6f742076616c6964000081525060200191505060405180910390fd5b61623d8585614cae565b1561624c57600091505061638e565b600160001b831415801561627757506000801b85600101600085815260200190815260200160002054145b1561628657600091505061638e565b6162998484614d2790919063ffffffff16565b6162a757600091505061638e565b5b6000801b8560000160008581526020019081526020016000205414156162e5578460010160008481526020019081526020016000205492506162a8565b6000808490505b80915086600001600082815260200190815260200160002054905061631a8682614d2790919063ffffffff16565b6162ec578587600001600084815260200190815260200160002081905550858760010160008381526020019081526020016000208190555081876001016000888152602001908152602001600020819055508087600001600088815260200190815260200160002081905550600193505050505b9392505050565b60606163a48484600085616433565b90509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168360000160006001850167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415905092915050565b60608247101561648e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180616a836026913960400191505060405180910390fd5b616497856165dc565b616509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106165595780518252602082019150602081019050602083039250616536565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146165bb576040519150601f19603f3d011682016040523d82523d6000602084013e6165c0565b606091505b50915091506165d08282866165ef565b92505050949350505050565b600080823b905060008111915050919050565b606083156165ff578290506166b4565b6000835111156166125782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561667957808201518184015260208101905061665e565b50505050905090810190601f1680156166a65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106166fc57805160ff191683800117855561672a565b8280016001018555821561672a579182015b8281111561672957825182559160200191906001019061670e565b5b5090506167379190616901565b5090565b50805460018160011615610100020316600290046000825580601f106167615750616780565b601f01602090049060005260206000209081019061677f9190616901565b5b50565b604051806101c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600080191681526020016000815260200160008152602001600080191681526020016000801916815260200160006bffffffffffffffffffffffff16815260200160001515815260200160001515815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061687a57805160ff19168380011785556168a8565b828001600101855582156168a8579182015b828111156168a757825182559160200191906001019061688c565b5b5090506168b59190616901565b5090565b50805460018160011615610100020316600290046000825580601f106168df57506168fe565b601f0160209004906000526020600020908101906168fd9190616901565b5b50565b5b8082111561691a576000816000905550600101616902565b509056fe53616665436173743a2076616c756520646f65736e27742066697420696e20393620626974736e6f7420616c6c6f77656420746f20736574746c652061756374696f6e2061746f6d6963616c6c7970726563616c63756c61746553656c6c416d6f756e7453756d20697320616c726561647920746f6f20616476616e6365644f6e6c792074686520757365722063616e2063616e63656c20686973206f72646572734f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373746f6b656e732063616e6e6f742062652061756374696f6e656420666f7220667265656e6f206c6f6e67657220696e206f7264657220706c6163656d656e7420616e642063616e63656c6174696f6e2070686173655f6d696e427579416d6f756e7473206d7573742062652067726561746572207468616e2030547279696e6720746f20676574206e657874206f66206c61737420656c656d656e74416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c466565206973206e6f7420616c6c6f77656420746f2062652073657420686967686572207468616e20312e352561756374696f6e20656e642064617465206d75737420626520696e20746865206675747572654f6e6c79206f6e65206f726465722063616e20626520706c616365642061746f6d6963616c6c79547279696e6720746f20676574206e657874206f66206e6f6e2d6578697374656e7420656c656d656e746d696e696d756d42696464696e67416d6f756e745065724f72646572206973206e6f7420616c6c6f77656420746f206265207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753616665436173743a2076616c756520646f65736e27742066697420696e20363420626974736f6e6c7920616c6c6f77656420746f20636c61696d20666f722073616d65207573657241756374696f6e206e6f7420696e20736f6c7574696f6e207375626d697373696f6e20706861736575736572206973206e6f7420616c6c6f77656420746f20706c6163652073616d65206f726465722074776963656c696d6974207072696365206e6f7420626574746572207468616e206d696d696d616c206f6666657274696d6520706572696f647320617265206e6f7420636f6e6669677572656420636f72726563746c795361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565646e6f206c6f6e67657220696e206f7264657220706c6163656d656e74207068617365a26469706673582212205f6c77bf119403eb2b57dbe6d6cb783a48d5e18962b31a825fdde4b51582a37564736f6c634300060c0033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0xC SSTORE PUSH1 0x1 PUSH1 0xD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH3 0x40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH3 0x53 PUSH3 0xF7 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH3 0xFF JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x6D15 DUP1 PUSH3 0x10F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1F0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x10F JUMPI DUP1 PUSH4 0xD225269C GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xE86DEA4A GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xE86DEA4A EQ PUSH2 0x12B7 JUMPI DUP1 PUSH4 0xEC20D0BB EQ PUSH2 0x12D5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1552 JUMPI DUP1 PUSH4 0xF59C2F06 EQ PUSH2 0x1596 JUMPI PUSH2 0x1F0 JUMP JUMPDEST DUP1 PUSH4 0xD225269C EQ PUSH2 0xF6B JUMPI DUP1 PUSH4 0xD73792A9 EQ PUSH2 0x11C8 JUMPI DUP1 PUSH4 0xDDE51F6D EQ PUSH2 0x11E6 JUMPI DUP1 PUSH4 0xE4A59EF4 EQ PUSH2 0x125F JUMPI PUSH2 0x1F0 JUMP JUMPDEST DUP1 PUSH4 0x9FA5F50B GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x9FA5F50B EQ PUSH2 0xD78 JUMPI DUP1 PUSH4 0xA7E76644 EQ PUSH2 0xDD7 JUMPI DUP1 PUSH4 0xC6B547E6 EQ PUSH2 0xDF5 JUMPI DUP1 PUSH4 0xCFB51928 EQ PUSH2 0xE9C JUMPI PUSH2 0x1F0 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x990 JUMPI DUP1 PUSH4 0x91CFC1D4 EQ PUSH2 0x9C4 JUMPI DUP1 PUSH4 0x9201DE55 EQ PUSH2 0xC03 JUMPI DUP1 PUSH4 0x9C64D0AE EQ PUSH2 0xCAA JUMPI PUSH2 0x1F0 JUMP JUMPDEST DUP1 PUSH4 0x40B20B09 GT PUSH2 0x187 JUMPI DUP1 PUSH4 0x715018A6 GT PUSH2 0x156 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x6EE JUMPI DUP1 PUSH4 0x7882DEAF EQ PUSH2 0x6F8 JUMPI DUP1 PUSH4 0x7CCB6A64 EQ PUSH2 0x7D5 JUMPI DUP1 PUSH4 0x7ED18B70 EQ PUSH2 0x8CE JUMPI PUSH2 0x1F0 JUMP JUMPDEST DUP1 PUSH4 0x40B20B09 EQ PUSH2 0x54F JUMPI DUP1 PUSH4 0x55FC62D2 EQ PUSH2 0x59D JUMPI DUP1 PUSH4 0x5CEFB291 EQ PUSH2 0x678 JUMPI DUP1 PUSH4 0x63C699A4 EQ PUSH2 0x6A0 JUMPI PUSH2 0x1F0 JUMP JUMPDEST DUP1 PUSH4 0x2B956FF7 GT PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x2B956FF7 EQ PUSH2 0x455 JUMPI DUP1 PUSH4 0x2E993611 EQ PUSH2 0x4B7 JUMPI DUP1 PUSH4 0x3D1C2273 EQ PUSH2 0x4F9 JUMPI DUP1 PUSH4 0x3E12905F EQ PUSH2 0x517 JUMPI PUSH2 0x1F0 JUMP JUMPDEST DUP1 PUSH4 0xA4CD6C9 EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0x15D37B4B EQ PUSH2 0x389 JUMPI DUP1 PUSH4 0x19A50F49 EQ PUSH2 0x3CB JUMPI DUP1 PUSH4 0x2199D5CD EQ PUSH2 0x3F3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x373 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x160 DUP2 LT ISZERO PUSH2 0x20C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x2ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x163D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x39F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1CFC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3D3 PUSH2 0x1D56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x435 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1D70 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x497 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1EEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1F7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x501 PUSH2 0x2526 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x54D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x52D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2533 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x59B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x565 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2855 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5C9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x299A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP16 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 DUP2 MSTORE PUSH1 0x20 ADD DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP15 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x680 PUSH2 0x2A78 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6D6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x6B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2A92 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6F6 PUSH2 0x2AC1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7B8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x70E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x735 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x747 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x769 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x2C2E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x84C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x81A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x83C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x327A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x892 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x877 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x8BF JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x98E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x90B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x91D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x93F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x3398 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x998 PUSH2 0x35FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC01 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x9DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xA01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xA13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xA35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xA95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xAA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xAC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xB29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xB3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xB5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xBBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xBCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xBF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x3624 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC2F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x388C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC6F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xC54 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xC9C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD76 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xCC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xCDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xCEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xD11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xD32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xD44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xD66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x39FD JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD80 PUSH2 0x3ABE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xDC3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDA8 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDDF PUSH2 0x3B16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE21 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3B1C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE61 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xE46 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xE8E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF55 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xEB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xECF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xEE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xF03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x3BBF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xF81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xFA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xFBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xFDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x103C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x104E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1070 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x10D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x10E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1176 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1198 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x3BEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D0 PUSH2 0x3C77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x125D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x122B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x124D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x3C7D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x128B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3D3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12BF PUSH2 0x3D6D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1532 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x12EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x13A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x13B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x13DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x143A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x144C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x146E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x14CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x14E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1502 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3D73 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1594 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3E01 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3FF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1602 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x15E7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x162F JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x16B6 CALLER ADDRESS PUSH2 0x168F PUSH2 0x3E8 PUSH2 0x1681 PUSH2 0x1664 PUSH1 0xC SLOAD PUSH2 0x3E8 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP15 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP16 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x423A SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x173A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616E6E6F742061756374696F6E207A65726F20746F6B656E73000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x17A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x69E7 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 GT PUSH2 0x17FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x36 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6B4D PUSH1 0x36 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP9 DUP11 GT ISZERO PUSH2 0x1853 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6C6B PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP DUP10 GT PUSH2 0x18AB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6AD6 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x18C1 PUSH1 0x1 PUSH1 0xB SLOAD PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xB DUP2 SWAP1 SSTORE POP PUSH2 0x18E4 PUSH1 0x4 PUSH1 0x0 PUSH1 0xB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x42FB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18EF CALLER PUSH2 0x1EEA JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x194C DUP4 DUP12 DUP14 PUSH2 0x4380 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH1 0x0 SHL DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 SHL DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP7 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xC SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE POP PUSH1 0x5 PUSH1 0x0 PUSH1 0xB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x7 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x8 ADD SSTORE PUSH2 0x120 DUP3 ADD MLOAD DUP2 PUSH1 0x9 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x140 DUP3 ADD MLOAD DUP2 PUSH1 0x9 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x160 DUP3 ADD MLOAD DUP2 PUSH1 0x9 ADD PUSH1 0xD PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x180 DUP3 ADD MLOAD DUP2 PUSH1 0xA ADD SSTORE PUSH2 0x1A0 DUP3 ADD MLOAD DUP2 PUSH1 0xB ADD SSTORE SWAP1 POP POP DUP4 PUSH1 0x6 PUSH1 0x0 PUSH1 0xB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x7 PUSH1 0x0 PUSH1 0xB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1B9D SWAP3 SWAP2 SWAP1 PUSH2 0x66BB JUMP JUMPDEST POP DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xB SLOAD PUSH32 0x728D0FED13687F1840DE94F5AE640EAE49B43EDA26B7FFE97E55E79A0DE6E40C DUP15 DUP15 DUP7 DUP16 DUP16 DUP16 DUP16 DUP15 DUP15 PUSH1 0x40 MLOAD DUP1 DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CA5 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1C8A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1CD2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP11 POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0xB SLOAD SWAP2 POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 TIMESTAMP PUSH1 0x5 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD LT ISZERO PUSH2 0x1D25 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x1D51 JUMP JUMPDEST PUSH2 0x1D4E TIMESTAMP PUSH1 0x5 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x43C1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DAE PUSH2 0x1DA9 PUSH1 0x1 PUSH1 0xA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4444 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1E02 PUSH1 0xA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x8 PUSH2 0x44AF SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1E74 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5573657220616C72656164792072656769737465726564000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6838F67CB358C332087B73DBE769A6C869A5F87225236C16DDA5D0013A77074C DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F00 DUP3 PUSH1 0x8 PUSH2 0x47D5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x1F20 JUMPI PUSH2 0x1F19 DUP3 PUSH1 0x8 PUSH2 0x4842 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1F7A JUMP JUMPDEST PUSH2 0x1F29 DUP3 PUSH2 0x1D70 JUMP JUMPDEST SWAP1 POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH32 0x969D438B19B6B5FB3C0D3C6F16867E519FCEC4233799D6BE29D1C00F2045BA26 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 0x1FAE JUMPI POP DUP1 TIMESTAMP LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1FD2 JUMPI POP PUSH1 0x0 DUP1 SHL PUSH1 0x5 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD EQ JUMPDEST PUSH2 0x2027 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6BED PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x204C PUSH1 0x5 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x20B8 DUP6 PUSH1 0x4 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x4947 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP2 EQ ISZERO PUSH2 0x20EB JUMPI POP PUSH2 0x2174 JUMP JUMPDEST DUP1 SWAP5 POP PUSH2 0x20F7 DUP6 PUSH2 0x4921 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP DUP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 SWAP5 POP DUP2 SWAP6 POP POP POP PUSH2 0x2137 DUP4 DUP8 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP6 POP POP PUSH2 0x215B DUP3 DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x216E DUP5 DUP8 PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT PUSH2 0x2091 JUMPI JUMPDEST PUSH1 0x0 DUP6 GT DUP1 ISZERO PUSH2 0x21B6 JUMPI POP PUSH2 0x21A0 DUP3 DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x21B3 DUP5 DUP8 PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT ISZERO JUMPDEST ISZERO PUSH2 0x22BF JUMPI PUSH1 0x0 PUSH2 0x2202 PUSH2 0x21F3 DUP6 PUSH2 0x21E5 DUP7 DUP12 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 PUSH2 0x43C1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 DUP4 LT PUSH2 0x228D JUMPI PUSH1 0x0 PUSH2 0x2220 DUP3 DUP6 PUSH2 0x43C1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x222B DUP2 PUSH2 0x4A45 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x2282 DUP3 DUP9 PUSH2 0x43C1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP7 POP DUP6 SWAP12 POP POP PUSH2 0x22B9 JUMP JUMPDEST PUSH2 0x22A0 DUP4 DUP8 PUSH2 0x43C1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP6 POP PUSH2 0x22B6 PUSH1 0x0 DUP9 PUSH2 0x22B1 DUP10 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0x4380 JUMP JUMPDEST SWAP11 POP JUMPDEST POP PUSH2 0x234B JUMP JUMPDEST DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 GT ISZERO PUSH2 0x22F0 JUMPI PUSH2 0x22E9 PUSH1 0x0 DUP8 PUSH2 0x22E4 DUP9 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0x4380 JUMP JUMPDEST SWAP10 POP PUSH2 0x234A JUMP JUMPDEST PUSH2 0x22FC PUSH1 0x0 DUP8 DUP10 PUSH2 0x4380 JUMP JUMPDEST SWAP10 POP PUSH2 0x2347 PUSH2 0x2342 DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2334 DUP10 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4A45 JUMP JUMPDEST SWAP1 POP JUMPDEST JUMPDEST DUP10 PUSH1 0x5 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x5 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0xB ADD SLOAD GT ISZERO PUSH2 0x23B4 JUMPI PUSH1 0x1 PUSH1 0x5 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x23CE DUP12 DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 DUP10 PUSH2 0x4AB4 JUMP JUMPDEST DUP11 PUSH32 0x4D160A2A345F2FAEB9AC2E65272820B8CA5473B80AABEF416BDF7E07EE7F5910 DUP3 DUP8 DUP14 PUSH1 0x40 MLOAD DUP1 DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x7 PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x24A4 SWAP2 SWAP1 PUSH2 0x673B JUMP JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x5 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 SHL PUSH1 0x5 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 0x2560 JUMPI POP DUP1 TIMESTAMP LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2584 JUMPI POP PUSH1 0x0 DUP1 SHL PUSH1 0x5 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD EQ JUMPDEST PUSH2 0x25D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6BED PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0x25FB PUSH1 0x5 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x26A7 JUMPI PUSH2 0x2665 DUP3 PUSH1 0x4 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x4947 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x2672 DUP4 PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x2697 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP4 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2638 JUMP JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP2 EQ ISZERO PUSH2 0x2741 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x7265616368656420656E64206F66206F72646572206C69737400000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x274D DUP4 PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH2 0x2781 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x27A2 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT PUSH2 0x2815 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x746F6F206D616E79206F72646572732073756D6D656420757000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x5 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x5 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x285D PUSH2 0x4CA6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x287B PUSH2 0x35FB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2904 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xF DUP3 GT ISZERO PUSH2 0x295E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6AA9 PUSH1 0x2D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2967 DUP2 PUSH2 0x1EEA JUMP JUMPDEST PUSH1 0xD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0xC DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 DUP1 PUSH1 0x5 ADD SLOAD SWAP1 DUP1 PUSH1 0x6 ADD SLOAD SWAP1 DUP1 PUSH1 0x7 ADD SLOAD SWAP1 DUP1 PUSH1 0x8 ADD SLOAD SWAP1 DUP1 PUSH1 0x9 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x9 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x9 ADD PUSH1 0xD SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0xA ADD SLOAD SWAP1 DUP1 PUSH1 0xB ADD SLOAD SWAP1 POP DUP15 JUMP JUMPDEST PUSH1 0xD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AB9 DUP3 PUSH1 0x4 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x4CAE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2AC9 PUSH2 0x4CA6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2AE7 PUSH2 0x35FB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2B70 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x0 DUP1 SHL PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD EQ ISZERO PUSH2 0x2CC1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x41756374696F6E206E6F74207965742066696E69736865640000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2D84 JUMPI PUSH2 0x2D05 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2CDC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x4 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x4CEA SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x2D77 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F72646572206973206E6F206C6F6E67657220636C61696D61626C6500000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2CC4 JUMP JUMPDEST POP PUSH2 0x2D8D PUSH2 0x6783 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x8 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 DUP3 ADD PUSH1 0xD SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xB DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x2F39 DUP4 PUSH2 0x100 ADD MLOAD PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH1 0x0 PUSH2 0x2F5D DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2F50 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4921 JUMP JUMPDEST POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 JUMPDEST DUP10 MLOAD DUP2 LT ISZERO PUSH2 0x3260 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2FB6 DUP14 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2FA9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3028 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6BCA PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 ISZERO PUSH2 0x3056 JUMPI PUSH2 0x304F DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP11 POP PUSH2 0x31E9 JUMP JUMPDEST DUP9 PUSH2 0x100 ADD MLOAD DUP14 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3068 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ ISZERO PUSH2 0x312B JUMPI PUSH2 0x30DC PUSH2 0x30CD DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x30BF DUP12 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP14 PUSH2 0x120 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP14 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP12 POP PUSH2 0x3124 PUSH2 0x3115 DUP11 PUSH2 0x120 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x43C1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP13 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP11 POP PUSH2 0x31E8 JUMP JUMPDEST PUSH2 0x3156 DUP10 PUSH2 0x100 ADD MLOAD DUP15 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3140 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4D27 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x31C3 JUMPI PUSH2 0x31BC PUSH2 0x31AD DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x319F DUP12 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP14 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP12 POP PUSH2 0x31E7 JUMP JUMPDEST PUSH2 0x31E4 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP11 POP JUMPDEST JUMPDEST JUMPDEST DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP15 PUSH32 0x3F2C83616E48A2F8B3C9CC26499E2E5C61643714DAC49027D82CF6732F96A91A DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2F8C JUMP JUMPDEST POP PUSH2 0x326D DUP11 DUP10 DUP10 DUP6 PUSH2 0x4F45 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x4 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x3386 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x335B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3386 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3369 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x5 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD TIMESTAMP LT PUSH2 0x3407 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x32 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6A0A PUSH1 0x32 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3412 CALLER PUSH2 0x1EEA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x3592 JUMPI PUSH1 0x0 PUSH2 0x345B DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3432 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x4 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x503A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x3584 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3484 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3477 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ PUSH2 0x34F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x699E PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3517 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP6 POP DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP11 PUSH32 0x7EDAE327FE79804B2F38BD490D874A0D188D3AE8911B303205ABE47400086AC4 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMPDEST POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x3418 JUMP JUMPDEST POP PUSH2 0x35F4 CALLER DUP3 PUSH1 0x5 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x50E5 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST DUP6 PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 0x3651 JUMPI POP DUP1 TIMESTAMP LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x3675 JUMPI POP PUSH1 0x0 DUP1 SHL PUSH1 0x5 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD EQ JUMPDEST PUSH2 0x36CA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6BED PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x5 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0xD SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3744 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6945 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP7 MLOAD EQ DUP1 ISZERO PUSH2 0x3756 JUMPI POP PUSH1 0x1 DUP6 MLOAD EQ JUMPDEST PUSH2 0x37AB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6AFC PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x37B6 CALLER PUSH2 0x1EEA JUMP JUMPDEST SWAP1 POP PUSH2 0x3813 PUSH2 0x37EE DUP3 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x37CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x37E1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4380 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD PUSH2 0x4D27 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3868 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x696D PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3877 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 CALLER PUSH2 0x5187 JUMP JUMPDEST POP PUSH2 0x3881 DUP9 PUSH2 0x1F7F JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x20 DUP2 PUSH1 0xFF AND LT DUP1 ISZERO PUSH2 0x38DC JUMPI POP PUSH1 0x0 PUSH1 0xF8 SHL DUP4 DUP3 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT PUSH2 0x38B3 JUMPI INVALID JUMPDEST BYTE PUSH1 0xF8 SHL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x38EE JUMPI DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x3891 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x390A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x393D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 PUSH1 0xFF AND LT DUP1 ISZERO PUSH2 0x3990 JUMPI POP PUSH1 0x0 PUSH1 0xF8 SHL DUP5 DUP4 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT PUSH2 0x3967 JUMPI INVALID JUMPDEST BYTE PUSH1 0xF8 SHL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x39F3 JUMPI DUP4 DUP3 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT PUSH2 0x39A4 JUMPI INVALID JUMPDEST BYTE PUSH1 0xF8 SHL DUP2 DUP4 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x39B7 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 DUP1 PUSH1 0x1 ADD SWAP3 POP POP PUSH2 0x3945 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3A05 PUSH2 0x4CA6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3A23 PUSH2 0x35FB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3AAC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3AB8 DUP5 DUP5 DUP5 DUP5 PUSH2 0x579F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x3B0C JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x3AF8 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD SWAP1 POP DUP3 LT PUSH2 0x3B98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x496E646578206F7574206F6620626F756E647300000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3BB8 PUSH1 0x3 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3BA8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x388C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x3BDC JUMPI PUSH1 0x0 DUP1 SHL SWAP2 POP POP PUSH2 0x3BE5 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP7 PUSH1 0x5 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP LT PUSH2 0x3C5B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6CBE PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3C6A DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 CALLER PUSH2 0x5187 JUMP JUMPDEST SWAP2 POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH2 0x3C85 PUSH2 0x4CA6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3CA3 PUSH2 0x35FB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3D2C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3D36 DUP3 DUP3 PUSH2 0x5B7E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP8 PUSH1 0x5 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP LT PUSH2 0x3DE4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6CBE PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3DF3 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x5187 JUMP JUMPDEST SWAP2 POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3E09 PUSH2 0x4CA6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3E27 PUSH2 0x35FB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3EB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3F36 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x69C1 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x409B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4070 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x409B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x407E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4121 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x413E JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x41AB JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x414F JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x41A6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6B83 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x4228 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x4231 JUMPI INVALID JUMPDEST DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x42F5 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x5F25 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SHL DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 SHL DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 SHL PUSH1 0xC0 DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 SHL ADD ADD PUSH1 0x0 SHL SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x4439 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH9 0x10000000000000000 DUP3 LT PUSH2 0x44A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6BA4 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4553 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E6E6F7420696E73657274207A65726F2061646472657373000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x45FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E6E6F7420696E73657274206D61782075696E7436340000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 PUSH2 0x46E5 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 DUP7 ADD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x46F3 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x47CE JUMP JUMPDEST DUP2 DUP5 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 DUP7 ADD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 DUP4 ADD DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x484E DUP4 DUP4 PUSH2 0x47D5 JUMP JUMPDEST PUSH2 0x48C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4D7573742068617665204164647265737320746F206765742049440000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xC0 DUP5 PUSH1 0x0 SHR SWAP1 SHR SWAP3 POP PUSH1 0x60 DUP5 PUSH1 0x0 SHR SWAP1 SHR SWAP2 POP DUP4 PUSH1 0x0 SHR SWAP1 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP3 EQ ISZERO PUSH2 0x49C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6A61 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 EQ ISZERO PUSH2 0x4A3B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6B23 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH13 0x1000000000000000000000000 DUP3 LT PUSH2 0x4AAC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x691F PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B01 PUSH2 0x3E8 PUSH2 0x4AF3 PUSH1 0x5 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0xA ADD SLOAD DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x5 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x4B5E JUMPI PUSH2 0x4B59 DUP6 PUSH2 0x4B51 DUP4 DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP7 PUSH2 0x4F45 JUMP JUMPDEST PUSH2 0x4C9F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4B80 PUSH1 0x5 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH1 0x0 PUSH2 0x4BA8 DUP8 DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x43C1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4BF1 PUSH2 0x4BE2 DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4BD4 DUP6 DUP10 PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP4 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4C36 DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4C28 DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x4C44 DUP11 DUP4 DUP4 DUP12 PUSH2 0x4F45 JUMP JUMPDEST PUSH2 0x4C99 DUP11 PUSH2 0x4C7B DUP10 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4C6D DUP14 DUP12 PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x4F45 JUMP JUMPDEST POP POP POP POP POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SHL DUP3 EQ ISZERO PUSH2 0x4CC5 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x4CE4 JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4CF7 DUP5 DUP5 PUSH2 0x503A JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x4D1D JUMPI PUSH1 0x0 DUP1 SHL DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x4D36 DUP7 PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4D4A DUP9 PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x4D7F DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4DAE DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT ISZERO PUSH2 0x4DC3 JUMPI PUSH1 0x1 SWAP7 POP POP POP POP POP POP POP PUSH2 0x4F3F JUMP JUMPDEST PUSH2 0x4DF2 DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4E21 DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST GT ISZERO PUSH2 0x4E36 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x4F3F JUMP JUMPDEST DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x4E69 JUMPI PUSH1 0x1 SWAP7 POP POP POP POP POP POP POP PUSH2 0x4F3F JUMP JUMPDEST DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x4E9C JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x4F3F JUMP JUMPDEST DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F09 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6C15 PUSH1 0x2D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x4F34 JUMPI PUSH1 0x1 SWAP7 POP POP POP POP POP POP POP PUSH2 0x4F3F JUMP JUMPDEST PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F5B DUP3 PUSH1 0x8 PUSH2 0x6014 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 GT ISZERO PUSH2 0x4FC8 JUMPI PUSH2 0x4FC7 DUP2 DUP6 PUSH1 0x5 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x50E5 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 GT ISZERO PUSH2 0x5033 JUMPI PUSH2 0x5032 DUP2 DUP5 PUSH1 0x5 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x50E5 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5046 DUP4 DUP4 PUSH2 0x4CAE JUMP JUMPDEST PUSH2 0x5053 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x50DF JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 SHL DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x5182 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x5F25 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x6 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x538C JUMPI PUSH4 0x19A05A7E PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x19A05A7E DUP6 DUP13 DUP10 DUP10 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP5 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP6 POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x52BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x52D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x52E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x538B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x75736572206E6F7420616C6C6F77656420746F20706C616365206F7264657200 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x53AF PUSH1 0x5 PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH1 0x0 JUMPDEST DUP10 MLOAD DUP2 LT ISZERO PUSH2 0x54A7 JUMPI PUSH2 0x5402 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x53CF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x5444 DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5420 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT PUSH2 0x549A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6C42 PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x53B7 JUMP JUMPDEST POP POP POP PUSH1 0x0 PUSH2 0x54B5 DUP4 PUSH2 0x1EEA JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD SLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP10 MLOAD DUP2 LT ISZERO PUSH2 0x572E JUMPI PUSH1 0x0 DUP11 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x54EC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x5558 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6A3C PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5565 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x55EE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F7264657220746F6F20736D616C6C0000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5658 PUSH2 0x5622 DUP6 DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5601 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP13 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5615 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4380 JUMP JUMPDEST DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x562E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x4 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x60E7 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x5721 JUMPI PUSH2 0x5691 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x566C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP12 PUSH32 0x9304F2FC7ED6D42C0400E678DBC7283E1E9054889C3AFEA5F965ADFF66EF9EAC DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x56CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP13 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x56E0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x54D5 JUMP JUMPDEST POP PUSH2 0x5792 CALLER ADDRESS DUP5 PUSH1 0x5 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x423A SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 SWAP1 POP GT PUSH2 0x5818 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5A65726F206E616D65206973206E6F7420616C6C6F7765640000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 SWAP1 POP GT PUSH2 0x5891 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x53686F756C64206E6F74206265206120656D7074792064617461000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x4 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x59B0 JUMPI PUSH1 0x3 PUSH2 0x593B DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x3BBF JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE PUSH1 0x3 DUP1 SLOAD SWAP1 POP PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP2 MSTORE POP PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x4 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x5AF2 SWAP3 SWAP2 SWAP1 PUSH2 0x6839 JUMP JUMPDEST POP SWAP1 POP POP DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH32 0xBAA206E5EA800EB88BCE099F453FEE53295B793B9D5D1CFC4CE4B6DB06A34F53 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP5 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x4 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x5C47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x446F63756D656E742073686F756C642065786973740000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND SUB SWAP1 POP PUSH1 0x1 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SUB DUP2 PUSH4 0xFFFFFFFF AND EQ PUSH2 0x5D92 JUMPI PUSH1 0x3 PUSH1 0x1 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SUB DUP2 SLOAD DUP2 LT PUSH2 0x5CB2 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x3 DUP3 PUSH4 0xFFFFFFFF AND DUP2 SLOAD DUP2 LT PUSH2 0x5CD0 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP2 ADD PUSH1 0x1 PUSH2 0x5D0A PUSH1 0x3 DUP5 PUSH4 0xFFFFFFFF AND DUP2 SLOAD DUP2 LT PUSH2 0x5CFA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x388C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x5D3D JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x5D1A JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x3 DUP1 SLOAD DUP1 PUSH2 0x5D9D JUMPI INVALID JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH32 0x4B5338540B4D1C0F6DD0308A25F633B7FF60472F894D711CFF9DD64E35C613B2 PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x5EA6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5E7B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5EA6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5E89 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x4 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 PUSH2 0x5F1E SWAP2 SWAP1 PUSH2 0x68B9 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5F87 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x6395 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x600F JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5FA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x600E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6C94 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6020 DUP4 DUP4 PUSH2 0x63AD JUMP JUMPDEST PUSH2 0x6092 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4D757374206861766520494420746F2067657420416464726573730000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 DUP5 ADD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60F3 DUP5 PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP POP POP PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x618A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x496E73657274696E67207A65726F206973206E6F7420737570706F7274656400 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 SHL DUP5 EQ ISZERO DUP1 ISZERO PUSH2 0x61C1 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP5 EQ ISZERO JUMPDEST PUSH2 0x6233 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x496E73657274696E6720656C656D656E74206973206E6F742076616C69640000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x623D DUP6 DUP6 PUSH2 0x4CAE JUMP JUMPDEST ISZERO PUSH2 0x624C JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x638E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SHL DUP4 EQ ISZERO DUP1 ISZERO PUSH2 0x6277 JUMPI POP PUSH1 0x0 DUP1 SHL DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ JUMPDEST ISZERO PUSH2 0x6286 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x638E JUMP JUMPDEST PUSH2 0x6299 DUP5 DUP5 PUSH2 0x4D27 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x62A7 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x638E JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP1 SHL DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO PUSH2 0x62E5 JUMPI DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP3 POP PUSH2 0x62A8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 SWAP1 POP JUMPDEST DUP1 SWAP2 POP DUP7 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH2 0x631A DUP7 DUP3 PUSH2 0x4D27 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x62EC JUMPI DUP6 DUP8 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP6 DUP8 PUSH1 0x1 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 DUP8 PUSH1 0x1 ADD PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP8 PUSH1 0x0 ADD PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP4 POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x63A4 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x6433 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 DUP6 ADD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x648E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6A83 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6497 DUP6 PUSH2 0x65DC JUMP JUMPDEST PUSH2 0x6509 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x6559 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x6536 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x65BB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x65C0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x65D0 DUP3 DUP3 DUP7 PUSH2 0x65EF JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x65FF JUMPI DUP3 SWAP1 POP PUSH2 0x66B4 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x6612 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6679 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x665E JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x66A6 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x66FC JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x672A JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x672A JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x6729 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x670E JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x6737 SWAP2 SWAP1 PUSH2 0x6901 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x6761 JUMPI POP PUSH2 0x6780 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x677F SWAP2 SWAP1 PUSH2 0x6901 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x687A JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x68A8 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x68A8 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x68A7 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x688C JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x68B5 SWAP2 SWAP1 PUSH2 0x6901 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x68DF JUMPI POP PUSH2 0x68FE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x68FD SWAP2 SWAP1 PUSH2 0x6901 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x691A JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x6902 JUMP JUMPDEST POP SWAP1 JUMP INVALID MSTORE8 PUSH2 0x6665 NUMBER PUSH2 0x7374 GASPRICE KECCAK256 PUSH23 0x616C756520646F65736E27742066697420696E20393620 PUSH3 0x697473 PUSH15 0x6F7420616C6C6F77656420746F2073 PUSH6 0x74746C652061 PUSH22 0x6374696F6E2061746F6D6963616C6C7970726563616C PUSH4 0x756C6174 PUSH6 0x53656C6C416D PUSH16 0x756E7453756D20697320616C72656164 PUSH26 0x20746F6F20616476616E6365644F6E6C79207468652075736572 KECCAK256 PUSH4 0x616E2063 PUSH2 0x6E63 PUSH6 0x6C2068697320 PUSH16 0x72646572734F776E61626C653A206E65 PUSH24 0x206F776E657220697320746865207A65726F206164647265 PUSH20 0x73746F6B656E732063616E6E6F74206265206175 PUSH4 0x74696F6E PUSH6 0x6420666F7220 PUSH7 0x7265656E6F206C PUSH16 0x6E67657220696E206F7264657220706C PUSH2 0x6365 PUSH14 0x656E7420616E642063616E63656C PUSH2 0x7469 PUSH16 0x6E2070686173655F6D696E427579416D PUSH16 0x756E7473206D75737420626520677265 PUSH2 0x7465 PUSH19 0x207468616E2030547279696E6720746F206765 PUSH21 0x206E657874206F66206C61737420656C656D656E74 COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH10 0x6E73756666696369656E PUSH21 0x2062616C616E636520666F722063616C6C46656520 PUSH10 0x73206E6F7420616C6C6F PUSH24 0x656420746F2062652073657420686967686572207468616E KECCAK256 BALANCE 0x2E CALLDATALOAD 0x25 PUSH2 0x7563 PUSH21 0x696F6E20656E642064617465206D75737420626520 PUSH10 0x6E207468652066757475 PUSH19 0x654F6E6C79206F6E65206F726465722063616E KECCAK256 PUSH3 0x652070 PUSH13 0x616365642061746F6D6963616C PUSH13 0x79547279696E6720746F206765 PUSH21 0x206E657874206F66206E6F6E2D6578697374656E74 KECCAK256 PUSH6 0x6C656D656E74 PUSH14 0x696E696D756D42696464696E6741 PUSH14 0x6F756E745065724F726465722069 PUSH20 0x206E6F7420616C6C6F77656420746F206265207A PUSH6 0x726F53616665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F7753616665436173743A KECCAK256 PUSH23 0x616C756520646F65736E27742066697420696E20363420 PUSH3 0x697473 PUSH16 0x6E6C7920616C6C6F77656420746F2063 PUSH13 0x61696D20666F722073616D6520 PUSH22 0x73657241756374696F6E206E6F7420696E20736F6C75 PUSH21 0x696F6E207375626D697373696F6E20706861736575 PUSH20 0x6572206973206E6F7420616C6C6F77656420746F KECCAK256 PUSH17 0x6C6163652073616D65206F726465722074 PUSH24 0x6963656C696D6974207072696365206E6F74206265747465 PUSH19 0x207468616E206D696D696D616C206F66666572 PUSH21 0x696D6520706572696F647320617265206E6F742063 PUSH16 0x6E6669677572656420636F7272656374 PUSH13 0x795361666545524332303A2045 MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x7563636565646E6F206C6F6E67657220696E206F PUSH19 0x64657220706C6163656D656E74207068617365 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F PUSH13 0x77BF119403EB2B57DBE6D6CB78 GASPRICE 0x48 0xD5 0xE1 DUP10 PUSH3 0xB31A82 0x5F 0xDD 0xE4 0xB5 ISZERO DUP3 LOG3 PUSH22 0x64736F6C634300060C00330000000000000000000000 ",
          "sourceMap": "633:29198:7:-:0;;;4661:1;4631:31;;4756:1;4722:35;;;;;;;;;;;;;;;;;;;;4538:85;;;;;;;;;;884:17:0;904:12;:10;;;:12;;:::i;:::-;884:32;;935:9;926:6;;:18;;;;;;;;;;;;;;;;;;992:9;959:43;;988:1;959:43;;;;;;;;;;;;850:159;633:29198:7;;598:104:6;651:15;685:10;678:17;;598:104;:::o;633:29198:7:-;;;;;;;"
        },
        "deployedBytecode": {
          "immutableReferences": {},
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1F0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x10F JUMPI DUP1 PUSH4 0xD225269C GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xE86DEA4A GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xE86DEA4A EQ PUSH2 0x12B7 JUMPI DUP1 PUSH4 0xEC20D0BB EQ PUSH2 0x12D5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1552 JUMPI DUP1 PUSH4 0xF59C2F06 EQ PUSH2 0x1596 JUMPI PUSH2 0x1F0 JUMP JUMPDEST DUP1 PUSH4 0xD225269C EQ PUSH2 0xF6B JUMPI DUP1 PUSH4 0xD73792A9 EQ PUSH2 0x11C8 JUMPI DUP1 PUSH4 0xDDE51F6D EQ PUSH2 0x11E6 JUMPI DUP1 PUSH4 0xE4A59EF4 EQ PUSH2 0x125F JUMPI PUSH2 0x1F0 JUMP JUMPDEST DUP1 PUSH4 0x9FA5F50B GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x9FA5F50B EQ PUSH2 0xD78 JUMPI DUP1 PUSH4 0xA7E76644 EQ PUSH2 0xDD7 JUMPI DUP1 PUSH4 0xC6B547E6 EQ PUSH2 0xDF5 JUMPI DUP1 PUSH4 0xCFB51928 EQ PUSH2 0xE9C JUMPI PUSH2 0x1F0 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x990 JUMPI DUP1 PUSH4 0x91CFC1D4 EQ PUSH2 0x9C4 JUMPI DUP1 PUSH4 0x9201DE55 EQ PUSH2 0xC03 JUMPI DUP1 PUSH4 0x9C64D0AE EQ PUSH2 0xCAA JUMPI PUSH2 0x1F0 JUMP JUMPDEST DUP1 PUSH4 0x40B20B09 GT PUSH2 0x187 JUMPI DUP1 PUSH4 0x715018A6 GT PUSH2 0x156 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x6EE JUMPI DUP1 PUSH4 0x7882DEAF EQ PUSH2 0x6F8 JUMPI DUP1 PUSH4 0x7CCB6A64 EQ PUSH2 0x7D5 JUMPI DUP1 PUSH4 0x7ED18B70 EQ PUSH2 0x8CE JUMPI PUSH2 0x1F0 JUMP JUMPDEST DUP1 PUSH4 0x40B20B09 EQ PUSH2 0x54F JUMPI DUP1 PUSH4 0x55FC62D2 EQ PUSH2 0x59D JUMPI DUP1 PUSH4 0x5CEFB291 EQ PUSH2 0x678 JUMPI DUP1 PUSH4 0x63C699A4 EQ PUSH2 0x6A0 JUMPI PUSH2 0x1F0 JUMP JUMPDEST DUP1 PUSH4 0x2B956FF7 GT PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x2B956FF7 EQ PUSH2 0x455 JUMPI DUP1 PUSH4 0x2E993611 EQ PUSH2 0x4B7 JUMPI DUP1 PUSH4 0x3D1C2273 EQ PUSH2 0x4F9 JUMPI DUP1 PUSH4 0x3E12905F EQ PUSH2 0x517 JUMPI PUSH2 0x1F0 JUMP JUMPDEST DUP1 PUSH4 0xA4CD6C9 EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0x15D37B4B EQ PUSH2 0x389 JUMPI DUP1 PUSH4 0x19A50F49 EQ PUSH2 0x3CB JUMPI DUP1 PUSH4 0x2199D5CD EQ PUSH2 0x3F3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x373 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x160 DUP2 LT ISZERO PUSH2 0x20C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x2ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x163D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x39F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1CFC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3D3 PUSH2 0x1D56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x435 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1D70 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x497 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1EEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1F7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x501 PUSH2 0x2526 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x54D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x52D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2533 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x59B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x565 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2855 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5C9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x299A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP16 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 DUP2 MSTORE PUSH1 0x20 ADD DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP15 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x680 PUSH2 0x2A78 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6D6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x6B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2A92 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6F6 PUSH2 0x2AC1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7B8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x70E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x735 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x747 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x769 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x2C2E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x84C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x81A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x83C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x327A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x892 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x877 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x8BF JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x98E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x90B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x91D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x93F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x3398 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x998 PUSH2 0x35FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC01 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x9DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xA01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xA13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xA35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xA95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xAA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xAC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xB29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xB3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xB5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xBBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xBCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xBF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x3624 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC2F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x388C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC6F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xC54 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xC9C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD76 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xCC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xCDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xCEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xD11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xD32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xD44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xD66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x39FD JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD80 PUSH2 0x3ABE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xDC3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDA8 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDDF PUSH2 0x3B16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE21 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3B1C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE61 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xE46 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xE8E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF55 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xEB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xECF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xEE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xF03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x3BBF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xF81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xFA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xFBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xFDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x103C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x104E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1070 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x10D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x10E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1176 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1198 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x3BEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D0 PUSH2 0x3C77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x125D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x11FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x122B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x124D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x3C7D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x128B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3D3A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12BF PUSH2 0x3D6D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1532 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xC0 DUP2 LT ISZERO PUSH2 0x12EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x13A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x13B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x13DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x143A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x144C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x146E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x14CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x14E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1502 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3D73 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1594 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3E01 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3FF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1602 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x15E7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x162F JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x16B6 CALLER ADDRESS PUSH2 0x168F PUSH2 0x3E8 PUSH2 0x1681 PUSH2 0x1664 PUSH1 0xC SLOAD PUSH2 0x3E8 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP15 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP16 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x423A SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x173A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x63616E6E6F742061756374696F6E207A65726F20746F6B656E73000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x17A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x69E7 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 GT PUSH2 0x17FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x36 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6B4D PUSH1 0x36 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP9 DUP11 GT ISZERO PUSH2 0x1853 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6C6B PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP DUP10 GT PUSH2 0x18AB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6AD6 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x18C1 PUSH1 0x1 PUSH1 0xB SLOAD PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xB DUP2 SWAP1 SSTORE POP PUSH2 0x18E4 PUSH1 0x4 PUSH1 0x0 PUSH1 0xB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x42FB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18EF CALLER PUSH2 0x1EEA JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x194C DUP4 DUP12 DUP14 PUSH2 0x4380 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH1 0x0 SHL DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 SHL DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP7 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xC SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE POP PUSH1 0x5 PUSH1 0x0 PUSH1 0xB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x7 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x8 ADD SSTORE PUSH2 0x120 DUP3 ADD MLOAD DUP2 PUSH1 0x9 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x140 DUP3 ADD MLOAD DUP2 PUSH1 0x9 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x160 DUP3 ADD MLOAD DUP2 PUSH1 0x9 ADD PUSH1 0xD PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x180 DUP3 ADD MLOAD DUP2 PUSH1 0xA ADD SSTORE PUSH2 0x1A0 DUP3 ADD MLOAD DUP2 PUSH1 0xB ADD SSTORE SWAP1 POP POP DUP4 PUSH1 0x6 PUSH1 0x0 PUSH1 0xB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x7 PUSH1 0x0 PUSH1 0xB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1B9D SWAP3 SWAP2 SWAP1 PUSH2 0x66BB JUMP JUMPDEST POP DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xB SLOAD PUSH32 0x728D0FED13687F1840DE94F5AE640EAE49B43EDA26B7FFE97E55E79A0DE6E40C DUP15 DUP15 DUP7 DUP16 DUP16 DUP16 DUP16 DUP15 DUP15 PUSH1 0x40 MLOAD DUP1 DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CA5 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1C8A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1CD2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP11 POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0xB SLOAD SWAP2 POP POP SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 TIMESTAMP PUSH1 0x5 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD LT ISZERO PUSH2 0x1D25 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x1D51 JUMP JUMPDEST PUSH2 0x1D4E TIMESTAMP PUSH1 0x5 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x43C1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DAE PUSH2 0x1DA9 PUSH1 0x1 PUSH1 0xA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4444 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1E02 PUSH1 0xA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x8 PUSH2 0x44AF SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1E74 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5573657220616C72656164792072656769737465726564000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6838F67CB358C332087B73DBE769A6C869A5F87225236C16DDA5D0013A77074C DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F00 DUP3 PUSH1 0x8 PUSH2 0x47D5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x1F20 JUMPI PUSH2 0x1F19 DUP3 PUSH1 0x8 PUSH2 0x4842 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1F7A JUMP JUMPDEST PUSH2 0x1F29 DUP3 PUSH2 0x1D70 JUMP JUMPDEST SWAP1 POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH32 0x969D438B19B6B5FB3C0D3C6F16867E519FCEC4233799D6BE29D1C00F2045BA26 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 0x1FAE JUMPI POP DUP1 TIMESTAMP LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1FD2 JUMPI POP PUSH1 0x0 DUP1 SHL PUSH1 0x5 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD EQ JUMPDEST PUSH2 0x2027 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6BED PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x204C PUSH1 0x5 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x20B8 DUP6 PUSH1 0x4 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x4947 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP2 EQ ISZERO PUSH2 0x20EB JUMPI POP PUSH2 0x2174 JUMP JUMPDEST DUP1 SWAP5 POP PUSH2 0x20F7 DUP6 PUSH2 0x4921 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP DUP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 SWAP5 POP DUP2 SWAP6 POP POP POP PUSH2 0x2137 DUP4 DUP8 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP6 POP POP PUSH2 0x215B DUP3 DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x216E DUP5 DUP8 PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT PUSH2 0x2091 JUMPI JUMPDEST PUSH1 0x0 DUP6 GT DUP1 ISZERO PUSH2 0x21B6 JUMPI POP PUSH2 0x21A0 DUP3 DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x21B3 DUP5 DUP8 PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT ISZERO JUMPDEST ISZERO PUSH2 0x22BF JUMPI PUSH1 0x0 PUSH2 0x2202 PUSH2 0x21F3 DUP6 PUSH2 0x21E5 DUP7 DUP12 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 PUSH2 0x43C1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 DUP4 LT PUSH2 0x228D JUMPI PUSH1 0x0 PUSH2 0x2220 DUP3 DUP6 PUSH2 0x43C1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x222B DUP2 PUSH2 0x4A45 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x2282 DUP3 DUP9 PUSH2 0x43C1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP7 POP DUP6 SWAP12 POP POP PUSH2 0x22B9 JUMP JUMPDEST PUSH2 0x22A0 DUP4 DUP8 PUSH2 0x43C1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP6 POP PUSH2 0x22B6 PUSH1 0x0 DUP9 PUSH2 0x22B1 DUP10 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0x4380 JUMP JUMPDEST SWAP11 POP JUMPDEST POP PUSH2 0x234B JUMP JUMPDEST DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 GT ISZERO PUSH2 0x22F0 JUMPI PUSH2 0x22E9 PUSH1 0x0 DUP8 PUSH2 0x22E4 DUP9 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0x4380 JUMP JUMPDEST SWAP10 POP PUSH2 0x234A JUMP JUMPDEST PUSH2 0x22FC PUSH1 0x0 DUP8 DUP10 PUSH2 0x4380 JUMP JUMPDEST SWAP10 POP PUSH2 0x2347 PUSH2 0x2342 DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2334 DUP10 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4A45 JUMP JUMPDEST SWAP1 POP JUMPDEST JUMPDEST DUP10 PUSH1 0x5 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x5 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0xB ADD SLOAD GT ISZERO PUSH2 0x23B4 JUMPI PUSH1 0x1 PUSH1 0x5 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x23CE DUP12 DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 DUP10 PUSH2 0x4AB4 JUMP JUMPDEST DUP11 PUSH32 0x4D160A2A345F2FAEB9AC2E65272820B8CA5473B80AABEF416BDF7E07EE7F5910 DUP3 DUP8 DUP14 PUSH1 0x40 MLOAD DUP1 DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x7 PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x24A4 SWAP2 SWAP1 PUSH2 0x673B JUMP JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x5 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 SHL PUSH1 0x5 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 0x2560 JUMPI POP DUP1 TIMESTAMP LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2584 JUMPI POP PUSH1 0x0 DUP1 SHL PUSH1 0x5 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD EQ JUMPDEST PUSH2 0x25D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6BED PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0x25FB PUSH1 0x5 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x26A7 JUMPI PUSH2 0x2665 DUP3 PUSH1 0x4 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x4947 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x2672 DUP4 PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x2697 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP4 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2638 JUMP JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP2 EQ ISZERO PUSH2 0x2741 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x7265616368656420656E64206F66206F72646572206C69737400000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x274D DUP4 PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH2 0x2781 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x27A2 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT PUSH2 0x2815 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x746F6F206D616E79206F72646572732073756D6D656420757000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x5 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x5 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x285D PUSH2 0x4CA6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x287B PUSH2 0x35FB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2904 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xF DUP3 GT ISZERO PUSH2 0x295E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6AA9 PUSH1 0x2D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2967 DUP2 PUSH2 0x1EEA JUMP JUMPDEST PUSH1 0xD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0xC DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 DUP1 PUSH1 0x5 ADD SLOAD SWAP1 DUP1 PUSH1 0x6 ADD SLOAD SWAP1 DUP1 PUSH1 0x7 ADD SLOAD SWAP1 DUP1 PUSH1 0x8 ADD SLOAD SWAP1 DUP1 PUSH1 0x9 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x9 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x9 ADD PUSH1 0xD SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0xA ADD SLOAD SWAP1 DUP1 PUSH1 0xB ADD SLOAD SWAP1 POP DUP15 JUMP JUMPDEST PUSH1 0xD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AB9 DUP3 PUSH1 0x4 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x4CAE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2AC9 PUSH2 0x4CA6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2AE7 PUSH2 0x35FB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2B70 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x0 DUP1 SHL PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD EQ ISZERO PUSH2 0x2CC1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x41756374696F6E206E6F74207965742066696E69736865640000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2D84 JUMPI PUSH2 0x2D05 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2CDC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x4 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x4CEA SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x2D77 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F72646572206973206E6F206C6F6E67657220636C61696D61626C6500000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2CC4 JUMP JUMPDEST POP PUSH2 0x2D8D PUSH2 0x6783 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x8 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 DUP3 ADD PUSH1 0xD SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xB DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x2F39 DUP4 PUSH2 0x100 ADD MLOAD PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH1 0x0 PUSH2 0x2F5D DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2F50 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4921 JUMP JUMPDEST POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 JUMPDEST DUP10 MLOAD DUP2 LT ISZERO PUSH2 0x3260 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2FB6 DUP14 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2FA9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3028 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6BCA PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 ISZERO PUSH2 0x3056 JUMPI PUSH2 0x304F DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP11 POP PUSH2 0x31E9 JUMP JUMPDEST DUP9 PUSH2 0x100 ADD MLOAD DUP14 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3068 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ ISZERO PUSH2 0x312B JUMPI PUSH2 0x30DC PUSH2 0x30CD DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x30BF DUP12 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP14 PUSH2 0x120 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP14 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP12 POP PUSH2 0x3124 PUSH2 0x3115 DUP11 PUSH2 0x120 ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x43C1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP13 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP11 POP PUSH2 0x31E8 JUMP JUMPDEST PUSH2 0x3156 DUP10 PUSH2 0x100 ADD MLOAD DUP15 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3140 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4D27 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x31C3 JUMPI PUSH2 0x31BC PUSH2 0x31AD DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x319F DUP12 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP14 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP12 POP PUSH2 0x31E7 JUMP JUMPDEST PUSH2 0x31E4 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP11 POP JUMPDEST JUMPDEST JUMPDEST DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP15 PUSH32 0x3F2C83616E48A2F8B3C9CC26499E2E5C61643714DAC49027D82CF6732F96A91A DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2F8C JUMP JUMPDEST POP PUSH2 0x326D DUP11 DUP10 DUP10 DUP6 PUSH2 0x4F45 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x4 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x3386 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x335B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3386 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3369 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x5 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD TIMESTAMP LT PUSH2 0x3407 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x32 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6A0A PUSH1 0x32 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3412 CALLER PUSH2 0x1EEA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x3592 JUMPI PUSH1 0x0 PUSH2 0x345B DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3432 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x4 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x503A SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x3584 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3484 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3477 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ PUSH2 0x34F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x699E PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3517 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP6 POP DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP11 PUSH32 0x7EDAE327FE79804B2F38BD490D874A0D188D3AE8911B303205ABE47400086AC4 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMPDEST POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x3418 JUMP JUMPDEST POP PUSH2 0x35F4 CALLER DUP3 PUSH1 0x5 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x50E5 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST DUP6 PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 0x3651 JUMPI POP DUP1 TIMESTAMP LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x3675 JUMPI POP PUSH1 0x0 DUP1 SHL PUSH1 0x5 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD EQ JUMPDEST PUSH2 0x36CA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6BED PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x5 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0xD SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3744 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6945 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP7 MLOAD EQ DUP1 ISZERO PUSH2 0x3756 JUMPI POP PUSH1 0x1 DUP6 MLOAD EQ JUMPDEST PUSH2 0x37AB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6AFC PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x37B6 CALLER PUSH2 0x1EEA JUMP JUMPDEST SWAP1 POP PUSH2 0x3813 PUSH2 0x37EE DUP3 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x37CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x37E1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4380 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD PUSH2 0x4D27 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3868 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x696D PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3877 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 CALLER PUSH2 0x5187 JUMP JUMPDEST POP PUSH2 0x3881 DUP9 PUSH2 0x1F7F JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x20 DUP2 PUSH1 0xFF AND LT DUP1 ISZERO PUSH2 0x38DC JUMPI POP PUSH1 0x0 PUSH1 0xF8 SHL DUP4 DUP3 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT PUSH2 0x38B3 JUMPI INVALID JUMPDEST BYTE PUSH1 0xF8 SHL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x38EE JUMPI DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x3891 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x390A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x393D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 PUSH1 0xFF AND LT DUP1 ISZERO PUSH2 0x3990 JUMPI POP PUSH1 0x0 PUSH1 0xF8 SHL DUP5 DUP4 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT PUSH2 0x3967 JUMPI INVALID JUMPDEST BYTE PUSH1 0xF8 SHL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x39F3 JUMPI DUP4 DUP3 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT PUSH2 0x39A4 JUMPI INVALID JUMPDEST BYTE PUSH1 0xF8 SHL DUP2 DUP4 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x39B7 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 DUP1 PUSH1 0x1 ADD SWAP3 POP POP PUSH2 0x3945 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3A05 PUSH2 0x4CA6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3A23 PUSH2 0x35FB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3AAC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3AB8 DUP5 DUP5 DUP5 DUP5 PUSH2 0x579F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x3B0C JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x3AF8 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD SWAP1 POP DUP3 LT PUSH2 0x3B98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x496E646578206F7574206F6620626F756E647300000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3BB8 PUSH1 0x3 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3BA8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x388C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x3BDC JUMPI PUSH1 0x0 DUP1 SHL SWAP2 POP POP PUSH2 0x3BE5 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP7 PUSH1 0x5 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP LT PUSH2 0x3C5B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6CBE PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3C6A DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 CALLER PUSH2 0x5187 JUMP JUMPDEST SWAP2 POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH2 0x3C85 PUSH2 0x4CA6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3CA3 PUSH2 0x35FB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3D2C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3D36 DUP3 DUP3 PUSH2 0x5B7E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP8 PUSH1 0x5 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD TIMESTAMP LT PUSH2 0x3DE4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6CBE PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3DF3 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x5187 JUMP JUMPDEST SWAP2 POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3E09 PUSH2 0x4CA6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3E27 PUSH2 0x35FB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3EB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3F36 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x69C1 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x409B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4070 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x409B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x407E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4121 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x413E JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x41AB JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x414F JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x41A6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6B83 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x4228 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x4231 JUMPI INVALID JUMPDEST DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x42F5 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x5F25 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SHL DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 SHL DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 SHL PUSH1 0xC0 DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 SHL ADD ADD PUSH1 0x0 SHL SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x4439 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH9 0x10000000000000000 DUP3 LT PUSH2 0x44A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6BA4 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4553 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E6E6F7420696E73657274207A65726F2061646472657373000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x45FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x43616E6E6F7420696E73657274206D61782075696E7436340000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 PUSH2 0x46E5 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 DUP7 ADD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x46F3 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x47CE JUMP JUMPDEST DUP2 DUP5 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 DUP7 ADD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 DUP4 ADD DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x484E DUP4 DUP4 PUSH2 0x47D5 JUMP JUMPDEST PUSH2 0x48C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4D7573742068617665204164647265737320746F206765742049440000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xC0 DUP5 PUSH1 0x0 SHR SWAP1 SHR SWAP3 POP PUSH1 0x60 DUP5 PUSH1 0x0 SHR SWAP1 SHR SWAP2 POP DUP4 PUSH1 0x0 SHR SWAP1 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP3 EQ ISZERO PUSH2 0x49C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6A61 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 EQ ISZERO PUSH2 0x4A3B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6B23 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH13 0x1000000000000000000000000 DUP3 LT PUSH2 0x4AAC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x691F PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B01 PUSH2 0x3E8 PUSH2 0x4AF3 PUSH1 0x5 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0xA ADD SLOAD DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x5 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x4B5E JUMPI PUSH2 0x4B59 DUP6 PUSH2 0x4B51 DUP4 DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP7 PUSH2 0x4F45 JUMP JUMPDEST PUSH2 0x4C9F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4B80 PUSH1 0x5 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD SLOAD PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH1 0x0 PUSH2 0x4BA8 DUP8 DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x43C1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4BF1 PUSH2 0x4BE2 DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4BD4 DUP6 DUP10 PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP4 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4C36 DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4C28 DUP7 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x4C44 DUP11 DUP4 DUP4 DUP12 PUSH2 0x4F45 JUMP JUMPDEST PUSH2 0x4C99 DUP11 PUSH2 0x4C7B DUP10 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4C6D DUP14 DUP12 PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x41B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x4F45 JUMP JUMPDEST POP POP POP POP POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SHL DUP3 EQ ISZERO PUSH2 0x4CC5 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x4CE4 JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4CF7 DUP5 DUP5 PUSH2 0x503A JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x4D1D JUMPI PUSH1 0x0 DUP1 SHL DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x4D36 DUP7 PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4D4A DUP9 PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x4D7F DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4DAE DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT ISZERO PUSH2 0x4DC3 JUMPI PUSH1 0x1 SWAP7 POP POP POP POP POP POP POP PUSH2 0x4F3F JUMP JUMPDEST PUSH2 0x4DF2 DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4E21 DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST GT ISZERO PUSH2 0x4E36 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x4F3F JUMP JUMPDEST DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x4E69 JUMPI PUSH1 0x1 SWAP7 POP POP POP POP POP POP POP PUSH2 0x4F3F JUMP JUMPDEST DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x4E9C JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x4F3F JUMP JUMPDEST DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F09 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6C15 PUSH1 0x2D SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x4F34 JUMPI PUSH1 0x1 SWAP7 POP POP POP POP POP POP POP PUSH2 0x4F3F JUMP JUMPDEST PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F5B DUP3 PUSH1 0x8 PUSH2 0x6014 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 GT ISZERO PUSH2 0x4FC8 JUMPI PUSH2 0x4FC7 DUP2 DUP6 PUSH1 0x5 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x50E5 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 GT ISZERO PUSH2 0x5033 JUMPI PUSH2 0x5032 DUP2 DUP5 PUSH1 0x5 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x50E5 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5046 DUP4 DUP4 PUSH2 0x4CAE JUMP JUMPDEST PUSH2 0x5053 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x50DF JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 SHL DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x5182 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x5F25 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x6 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x538C JUMPI PUSH4 0x19A05A7E PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x19A05A7E DUP6 DUP13 DUP10 DUP10 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP5 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP6 POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x52BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x52D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x52E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x538B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x75736572206E6F7420616C6C6F77656420746F20706C616365206F7264657200 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x53AF PUSH1 0x5 PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH1 0x0 JUMPDEST DUP10 MLOAD DUP2 LT ISZERO PUSH2 0x54A7 JUMPI PUSH2 0x5402 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x53CF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x5444 DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5420 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x412B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT PUSH2 0x549A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6C42 PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x53B7 JUMP JUMPDEST POP POP POP PUSH1 0x0 PUSH2 0x54B5 DUP4 PUSH2 0x1EEA JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD SLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP10 MLOAD DUP2 LT ISZERO PUSH2 0x572E JUMPI PUSH1 0x0 DUP11 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x54EC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x5558 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6A3C PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5565 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x55EE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6F7264657220746F6F20736D616C6C0000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5658 PUSH2 0x5622 DUP6 DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5601 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP13 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5615 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x4380 JUMP JUMPDEST DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x562E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x4 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x60E7 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x5721 JUMPI PUSH2 0x5691 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x566C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0x40A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP12 PUSH32 0x9304F2FC7ED6D42C0400E678DBC7283E1E9054889C3AFEA5F965ADFF66EF9EAC DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x56CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP13 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x56E0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x54D5 JUMP JUMPDEST POP PUSH2 0x5792 CALLER ADDRESS DUP5 PUSH1 0x5 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x423A SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 SWAP1 POP GT PUSH2 0x5818 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5A65726F206E616D65206973206E6F7420616C6C6F7765640000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 SWAP1 POP GT PUSH2 0x5891 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x53686F756C64206E6F74206265206120656D7074792064617461000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x4 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x59B0 JUMPI PUSH1 0x3 PUSH2 0x593B DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x3BBF JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE PUSH1 0x3 DUP1 SLOAD SWAP1 POP PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP2 MSTORE POP PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x4 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x5AF2 SWAP3 SWAP2 SWAP1 PUSH2 0x6839 JUMP JUMPDEST POP SWAP1 POP POP DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH32 0xBAA206E5EA800EB88BCE099F453FEE53295B793B9D5D1CFC4CE4B6DB06A34F53 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP5 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x4 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x5C47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x446F63756D656E742073686F756C642065786973740000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND SUB SWAP1 POP PUSH1 0x1 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SUB DUP2 PUSH4 0xFFFFFFFF AND EQ PUSH2 0x5D92 JUMPI PUSH1 0x3 PUSH1 0x1 PUSH1 0x3 DUP1 SLOAD SWAP1 POP SUB DUP2 SLOAD DUP2 LT PUSH2 0x5CB2 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x3 DUP3 PUSH4 0xFFFFFFFF AND DUP2 SLOAD DUP2 LT PUSH2 0x5CD0 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP2 ADD PUSH1 0x1 PUSH2 0x5D0A PUSH1 0x3 DUP5 PUSH4 0xFFFFFFFF AND DUP2 SLOAD DUP2 LT PUSH2 0x5CFA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x388C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x5D3D JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x5D1A JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x3 DUP1 SLOAD DUP1 PUSH2 0x5D9D JUMPI INVALID JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH32 0x4B5338540B4D1C0F6DD0308A25F633B7FF60472F894D711CFF9DD64E35C613B2 PUSH1 0x1 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x5EA6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5E7B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5EA6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5E89 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP1 DUP4 ADD SWAP3 POP POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x4 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 PUSH2 0x5F1E SWAP2 SWAP1 PUSH2 0x68B9 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5F87 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x6395 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x600F JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5FA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x600E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6C94 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6020 DUP4 DUP4 PUSH2 0x63AD JUMP JUMPDEST PUSH2 0x6092 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4D757374206861766520494420746F2067657420416464726573730000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 DUP5 ADD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60F3 DUP5 PUSH2 0x4921 JUMP JUMPDEST SWAP3 POP POP POP PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x618A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x496E73657274696E67207A65726F206973206E6F7420737570706F7274656400 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 SHL DUP5 EQ ISZERO DUP1 ISZERO PUSH2 0x61C1 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001 PUSH1 0x0 SHL DUP5 EQ ISZERO JUMPDEST PUSH2 0x6233 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x496E73657274696E6720656C656D656E74206973206E6F742076616C69640000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x623D DUP6 DUP6 PUSH2 0x4CAE JUMP JUMPDEST ISZERO PUSH2 0x624C JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x638E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SHL DUP4 EQ ISZERO DUP1 ISZERO PUSH2 0x6277 JUMPI POP PUSH1 0x0 DUP1 SHL DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ JUMPDEST ISZERO PUSH2 0x6286 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x638E JUMP JUMPDEST PUSH2 0x6299 DUP5 DUP5 PUSH2 0x4D27 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x62A7 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x638E JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP1 SHL DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO PUSH2 0x62E5 JUMPI DUP5 PUSH1 0x1 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP3 POP PUSH2 0x62A8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 SWAP1 POP JUMPDEST DUP1 SWAP2 POP DUP7 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH2 0x631A DUP7 DUP3 PUSH2 0x4D27 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x62EC JUMPI DUP6 DUP8 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP6 DUP8 PUSH1 0x1 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 DUP8 PUSH1 0x1 ADD PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP8 PUSH1 0x0 ADD PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP4 POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x63A4 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x6433 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD PUSH1 0x0 PUSH1 0x1 DUP6 ADD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x648E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x6A83 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6497 DUP6 PUSH2 0x65DC JUMP JUMPDEST PUSH2 0x6509 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x6559 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x6536 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x65BB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x65C0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x65D0 DUP3 DUP3 DUP7 PUSH2 0x65EF JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x65FF JUMPI DUP3 SWAP1 POP PUSH2 0x66B4 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x6612 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6679 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x665E JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x66A6 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x66FC JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x672A JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x672A JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x6729 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x670E JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x6737 SWAP2 SWAP1 PUSH2 0x6901 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x6761 JUMPI POP PUSH2 0x6780 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x677F SWAP2 SWAP1 PUSH2 0x6901 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x687A JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x68A8 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x68A8 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x68A7 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x688C JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x68B5 SWAP2 SWAP1 PUSH2 0x6901 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x68DF JUMPI POP PUSH2 0x68FE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x68FD SWAP2 SWAP1 PUSH2 0x6901 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x691A JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x6902 JUMP JUMPDEST POP SWAP1 JUMP INVALID MSTORE8 PUSH2 0x6665 NUMBER PUSH2 0x7374 GASPRICE KECCAK256 PUSH23 0x616C756520646F65736E27742066697420696E20393620 PUSH3 0x697473 PUSH15 0x6F7420616C6C6F77656420746F2073 PUSH6 0x74746C652061 PUSH22 0x6374696F6E2061746F6D6963616C6C7970726563616C PUSH4 0x756C6174 PUSH6 0x53656C6C416D PUSH16 0x756E7453756D20697320616C72656164 PUSH26 0x20746F6F20616476616E6365644F6E6C79207468652075736572 KECCAK256 PUSH4 0x616E2063 PUSH2 0x6E63 PUSH6 0x6C2068697320 PUSH16 0x72646572734F776E61626C653A206E65 PUSH24 0x206F776E657220697320746865207A65726F206164647265 PUSH20 0x73746F6B656E732063616E6E6F74206265206175 PUSH4 0x74696F6E PUSH6 0x6420666F7220 PUSH7 0x7265656E6F206C PUSH16 0x6E67657220696E206F7264657220706C PUSH2 0x6365 PUSH14 0x656E7420616E642063616E63656C PUSH2 0x7469 PUSH16 0x6E2070686173655F6D696E427579416D PUSH16 0x756E7473206D75737420626520677265 PUSH2 0x7465 PUSH19 0x207468616E2030547279696E6720746F206765 PUSH21 0x206E657874206F66206C61737420656C656D656E74 COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH10 0x6E73756666696369656E PUSH21 0x2062616C616E636520666F722063616C6C46656520 PUSH10 0x73206E6F7420616C6C6F PUSH24 0x656420746F2062652073657420686967686572207468616E KECCAK256 BALANCE 0x2E CALLDATALOAD 0x25 PUSH2 0x7563 PUSH21 0x696F6E20656E642064617465206D75737420626520 PUSH10 0x6E207468652066757475 PUSH19 0x654F6E6C79206F6E65206F726465722063616E KECCAK256 PUSH3 0x652070 PUSH13 0x616365642061746F6D6963616C PUSH13 0x79547279696E6720746F206765 PUSH21 0x206E657874206F66206E6F6E2D6578697374656E74 KECCAK256 PUSH6 0x6C656D656E74 PUSH14 0x696E696D756D42696464696E6741 PUSH14 0x6F756E745065724F726465722069 PUSH20 0x206E6F7420616C6C6F77656420746F206265207A PUSH6 0x726F53616665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F7753616665436173743A KECCAK256 PUSH23 0x616C756520646F65736E27742066697420696E20363420 PUSH3 0x697473 PUSH16 0x6E6C7920616C6C6F77656420746F2063 PUSH13 0x61696D20666F722073616D6520 PUSH22 0x73657241756374696F6E206E6F7420696E20736F6C75 PUSH21 0x696F6E207375626D697373696F6E20706861736575 PUSH20 0x6572206973206E6F7420616C6C6F77656420746F KECCAK256 PUSH17 0x6C6163652073616D65206F726465722074 PUSH24 0x6963656C696D6974207072696365206E6F74206265747465 PUSH19 0x207468616E206D696D696D616C206F66666572 PUSH21 0x696D6520706572696F647320617265206E6F742063 PUSH16 0x6E6669677572656420636F7272656374 PUSH13 0x795361666545524332303A2045 MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x7563636565646E6F206C6F6E67657220696E206F PUSH19 0x64657220706C6163656D656E74207068617365 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F PUSH13 0x77BF119403EB2B57DBE6D6CB78 GASPRICE 0x48 0xD5 0xE1 DUP10 PUSH3 0xB31A82 0x5F 0xDD 0xE4 0xB5 ISZERO DUP3 LOG3 PUSH22 0x64736F6C634300060C00330000000000000000000000 ",
          "sourceMapi;:::-;;;;;;;;;;;;;;;;;;;28641:307;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4427:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;28022:319;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;28349:284;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;17020:4849;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3866:102:8;;;:::i;:::-;;;;;;;;;;;;;;;;;;;14284:1435:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4766:461;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4171:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4722:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;28956:179;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1717:145:0;;;:::i;:::-;;21972:2902:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;3141:251:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12698:1388:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1085:85:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;15727:1216:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4730:377:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29291:147:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3584:103:8;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4476:29:7;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4129:239:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4376:346;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8639:553:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4669:46;;;:::i;:::-;;;;;;;;;;;;;;;;;;;29719:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4254:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4631:31;;;:::i;:::-;;;;;;;;;;;;;;;;;;;9200:598;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;2011:240:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4316:50:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5711:2920;6181:7;6441:230;6489:10;6522:4;6542:112;4711:4;6542:59;6567:33;6587:12;;4711:4;6567:19;;:33;;;;:::i;:::-;6542:20;:24;;;;:59;;;;:::i;:::-;:63;;:112;;;;:::i;:::-;6441:16;:33;;;;:230;;;;;;:::i;:::-;6713:1;6690:20;:24;;;6682:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6780:1;6764:13;:17;;;6756:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6885:1;6854:28;:32;6832:136;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7029:14;7001:24;:42;;6979:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7162:15;7145:14;:32;7123:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7271:21;7290:1;7271:14;;:18;;:21;;;;:::i;:::-;7254:14;:38;;;;7303:48;:10;:26;7314:14;;7303:26;;;;;;;;;;;:46;:48::i;:::-;7362:13;7378:21;7388:10;7378:9;:21::i;:::-;7362:37;;7440:578;;;;;;;;7466:16;7440:578;;;;;;7497:13;7440:578;;;;;;7525:24;7440:578;;;;7564:14;7440:578;;;;7593:146;7647:6;7672:13;7704:20;7593:35;:146::i;:::-;7440:578;;;;7754:28;7440:578;;;;7797:1;7440:578;;;;379:66:13;7813:35:7;;7440:578;;;;7871:1;7863:10;;7440:578;;;;7888:1;7440:578;;;;;;7904:5;7440:578;;;;;;7924:22;7440:578;;;;;;7961:12;;7440:578;;;;7988:19;7440:578;;;7410:11;:27;7422:14;;7410:27;;;;;;;;;;;:608;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8068:21;8029:20;:36;8050:14;;8029:36;;;;;;;;;;;;:60;;;;;;;;;;;;;;;;;;8136:25;8100:17;:33;8118:14;;8100:33;;;;;;;;;;;:61;;;;;;;;;;;;:::i;:::-;;8262:13;8177:414;;8231:16;8177:414;;8202:14;;8177:414;8290:24;8329:14;8358:6;8379:20;8414:13;8442:28;8485:19;8519:21;8555:25;8177:414;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8609:14;;8602:21;;;5711:2920;;;;;;;;;;;;;:::o;28641:307::-;28744:7;28813:15;28773:11;:22;28785:9;28773:22;;;;;;;;;;;:37;;;:55;28769:96;;;28852:1;28845:8;;;;28769:96;28882:58;28924:15;28882:11;:22;28894:9;28882:22;;;;;;;;;;;:37;;;:41;;:58;;;;:::i;:::-;28875:65;;28641:307;;;;:::o;4427:22::-;;;;;;;;;;;;;:::o;28022:319::-;28074:13;28111:26;:15;28124:1;28111:8;;;;;;;;;;;:12;;;;:15;;;;:::i;:::-;:24;:26::i;:::-;28100:8;;:37;;;;;;;;;;;;;;;;;;28170:38;28193:8;;;;;;;;;;;28203:4;28170:15;:22;;:38;;;;;:::i;:::-;28148:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28279:8;;;;;;;;;;;28270:17;;28320:4;28303:30;;;28326:6;28303:30;;;;;;;;;;;;;;;;;;;;28022:319;;;:::o;28349:284::-;28398:13;28428:32;28455:4;28428:15;:26;;:32;;;;:::i;:::-;28424:202;;;28486:27;28508:4;28486:15;:21;;:27;;;;:::i;:::-;28477:36;;28424:202;;;28555:18;28568:4;28555:12;:18::i;:::-;28546:27;;28609:4;28593:21;;28601:6;28593:21;;;;;;;;;;;;28424:202;28349:284;;;:::o;17020:4849::-;17142:21;17113:9;1602:22;1627:11;:22;1639:9;1627:22;;;;;;;;;;;:37;;;1602:62;;1723:1;1705:14;:19;;:77;;;;;1768:14;1749:15;:33;;1705:77;:157;;;;;1860:1;1852:10;;1807:11;:22;1819:9;1807:22;;;;;;;;;;;:41;;;:55;1705:157;1679:259;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17020:4849;17196:19:::1;17230:28:::0;17273:26:::1;17313:56;:11;:22;17325:9;17313:22;;;;;;;;;;;:42;;;:54;:56::i;:::-;17181:188;;;;;;17382:21;17406:11;:22;17418:9;17406:22;;;;;;;;;;;:42;;;17382:66;;17459:20;17482:11;:22;17494:9;17482:22;;;;;;;;;;;:35;;;17459:58;;17528:23;17562:24:::0;17597:34:::1;17634:19;17597:56;;17756:511;17774:17;17794:40;17821:12;17794:10;:21;17805:9;17794:21;;;;;;;;;;;:26;;:40;;;;:::i;:::-;17774:60;;591:66:13;17866:33:7;;17853:9;:46;17849:92;;;17920:5;;;17849:92;17970:9;17955:24;;18034:26;:12;:24;:26::i;:::-;17994:66;;;;;;;;;;;;;;;;;;;;;18091:35;18109:16;18091:13;:17;;:35;;;;:::i;:::-;18075:51;;17756:511;18214:41;18238:16;18214:19;:23;;;;:41;;;;:::i;:::-;18160:34;18178:15;18160:13;:17;;:34;;;;:::i;:::-;:95;17756:511;;;18313:1;18297:13;:17;:126;;;;;18382:41;18406:16;18382:19;:23;;;;:41;;;;:::i;:::-;18331:34;18349:15;18331:13;:17;;:34;;;;:::i;:::-;:92;;18297:126;18279:2613;;;18599:21;18623:113;18659:62;18705:15;18659:41;18683:16;18659:19;:23;;;;:41;;;;:::i;:::-;:45;;:62;;;;:::i;:::-;18623:13;:17;;:113;;;;:::i;:::-;18599:137;;18777:13;18757:16;:33;18753:1018;;18910:31;18944:75;18987:13;18944:16;:20;;:75;;;;:::i;:::-;18910:109;;19106:34;:23;:32;:34::i;:::-;19038:11;:22;19050:9;19038:22;;;;;;;;;;;:65;;;:102;;;;;;;;;;;;;;;;;;19175:32;19193:13;19175;:17;;:32;;;;:::i;:::-;19159:48;;19242:12;19226:28;;18753:1018;;;;19518:35;19536:16;19518:13;:17;;:35;;;;:::i;:::-;19502:51;;19588:167;19646:1;19670:19;19712:24;:13;:22;:24::i;:::-;19588:35;:167::i;:::-;19572:183;;18753:1018;18279:2613;;;;20033:21;20017:37;;:13;:37;20013:868;;;20187:167;20245:1;20269:19;20311:24;:13;:22;:24::i;:::-;20187:35;:167::i;:::-;20171:183;;20013:868;;;20522:164;20580:1;20604:19;20646:21;20522:35;:164::i;:::-;20506:180;;20735:130;:101;20814:21;20735:101;;:56;20771:19;20735:56;;:13;:35;;:56;;;;:::i;:::-;:78;;:101;;;;:::i;:::-;:128;:130::i;:::-;20705:160;;20013:868;18279:2613;20946:13;20902:11;:22;20914:9;20902:22;;;;;;;;;;;:41;;:57;;;;21021:13;20976:11;:22;20988:9;20976:22;;;;;;;;;;;:42;;;:58;20972:150;;;21106:4;21051:11;:22;21063:9;21051:22;;;;;;;;;;;:52;;;:59;;;;;;;;;;;;;;;;;;20972:150;21132:167;21176:9;21200:27;21132:167;;21242:12;21269:19;21132:29;:167::i;:::-;21344:9;21315:155;21368:27;21417:13;21446;21315:155;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21547:1;21505:20;:31;21526:9;21505:31;;;;;;;;;;;;:44;;;;;;;;;;;;;;;;;;21567:17;:28;21585:9;21567:28;;;;;;;;;;;;21560:35;;;;:::i;:::-;21659:1;21651:10:::0;::::1;21606:11;:22;21618:9;21606:22;;;;;;;;;;;:42;;:55;;;;21718:1;21710:10:::0;::::1;21672:11;:22;21684:9;21672:22;;;;;;;;;;;:35;;:48;;;;21784:1;21731:11;:22;21743:9;21731:22;;;;;;;;;;;:42;;:55;;;;21859:1;21797:11;:22;21809:9;21797:22;;;;;;;;;;;:51;;:64;;;;1960:1;;;;;;;;17020:4849:::0;;;;:::o;3866:102:8:-;3917:7;3944:9;:16;;;;3937:23;;3866:102;:::o;14284:1435:7:-;14420:9;1602:22;1627:11;:22;1639:9;1627:22;;;;;;;;;;;:37;;;1602:62;;1723:1;1705:14;:19;;:77;;;;;1768:14;1749:15;:33;;1705:77;:157;;;;;1860:1;1852:10;;1807:11;:22;1819:9;1807:22;;;;;;;;;;;:41;;;:55;1705:157;1679:259;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14284:1435;14447:27:::1;14478:76;:11;:22;14490:9;14478:22;;;;;;;;;;;:52;;;:74;:76::i;:::-;14442:112;;;;14565:20;14588:11;:22;14600:9;14588:22;;;;;;;;;;;:42;;;14565:65;;14641:17;14661:11;:22;14673:9;14661:22;;;;;;;;;;;:35;;;14641:55;;14714:9;14709:255;14733:14;14729:1;:18;14709:255;;;14781:37;14808:9;14781:10;:21;14792:9;14781:21;;;;;;;;;;;:26;;:37;;;;:::i;:::-;14769:49;;14838:23;14865;:9;:21;:23::i;:::-;14833:55;;;;14918:34;14935:16;14918:34;;:12;:16;;:34;;;;:::i;:::-;14903:49;;14709:255;14749:3;;;;;;;14709:255;;;;591:66:13;15011:33:7;;14998:9;:46;;14976:121;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;15318:22;15342:23:::0;15369:33:::1;:9;:31;:33::i;:::-;15315:87;;;;;15488:42;15513:16;15488:42;;:20;:24;;;;:42;;;;:::i;:::-;15435:33;15452:15;15435:33;;:12;:16;;:33;;;;:::i;:::-;:95;15413:170;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;15641:12;15596:11;:22;15608:9;15596:22;;;;;;;;;;;:42;;:57;;;;15702:9;15664:11;:22;15676:9;15664:22;;;;;;;;;;;:35;;:47;;;;1960:1;;;;;14284:1435:::0;;;:::o;4766:461::-;1308:12:0;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4944:2:7::1;4925:15;:21;;4903:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5146:32;5156:21;5146:9;:32::i;:::-;5126:17;;:52;;;;;;;;;;;;;;;;;;5204:15;5189:12;:30;;;;4766:461:::0;;:::o;4171:50::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4722:35::-;;;;;;;;;;;;;:::o;28956:179::-;29061:4;29090:37;29121:5;29090:10;:21;29101:9;29090:21;;;;;;;;;;;:30;;:37;;;;:::i;:::-;29083:44;;28956:179;;;;:::o;1717:145:0:-;1308:12;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1823:1:::1;1786:40;;1807:6;::::0;::::1;;;;;;;;1786:40;;;;;;;;;;;;1853:1;1836:6:::0;::::1;:19;;;;;;;;;;;;;;;;;;1717:145::o:0;21972:2902:7:-;22160:32;22207:29;22117:9;2107:1;2099:10;;2054:11;:22;2066:9;2054:22;;;;;;;;;;;:41;;;:55;;2032:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22269:9:::1;22264:334;22288:6;:13;22284:1;:17;22264:334;;;22483:39;22512:6;22519:1;22512:9;;;;;;;;;;;;;;22483:10;:21;22494:9;22483:21;;;;;;;;;;;:28;;:39;;;;:::i;:::-;22457:129;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;22303:3;;;;;;;22264:334;;;;22608:26;;:::i;:::-;22637:11;:22;22649:9;22637:22;;;;;;;;;;;22608:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;22673:21;22696:23:::0;22723:60:::1;:7;:36;;;:58;:60::i;:::-;22670:113;;;;;22797:13;22818:23;:6;22825:1;22818:9;;;;;;;;;;;;;;:21;:23::i;:::-;22796:45;;;;22852:34;22889:11;:22;22901:9;22889:22;;;;;;;;;;;:62;;;;;;;;;;;;22852:99;;22967:9;22962:1744;22986:6;:13;22982:1;:17;22962:1744;;;23022:18;23042:16:::0;23060:17:::1;23081:69;:6;23106:1;23081:41;;;;;;;;;;;;;;:67;:69::i;:::-;23021:129;;;;;;23206:6;23191:21;;:11;:21;;;23165:118;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23302:29;23298:1319;;;23400:37;23426:10;23400:37;;:21;:25;;:37;;;;:::i;:::-;23376:61;;23298:1319;;;23519:7;:26;;;23506:6;23513:1;23506:9;;;;;;;;;;;;;;:39;23502:1100;;;23625:230;23680:152;23815:16;23680:152;;:104;23769:14;23680:104;;:7;:58;;;:88;;;;:104;;;;:::i;:::-;:134;;:152;;;;:::i;:::-;23625:24;:28;;:230;;;;:::i;:::-;23598:257;;23902:123;23954:48;23969:7;:32;;;23954:48;;:10;:14;;;;:48;;;;:::i;:::-;23902:21;:25;;:123;;;;:::i;:::-;23878:147;;23502:1100;;;24078:49;24100:7;:26;;;24078:6;24085:1;24078:9;;;;;;;;;;;;;;:21;;:49;;;;:::i;:::-;24074:509;;;24215:138;24274:52;24309:16;24274:52;;:30;24289:14;24274:30;;:10;:14;;;;:30;;;;:::i;:::-;:34;;:52;;;;:::i;:::-;24215:24;:28;;:138;;;;:::i;:::-;24188:165;;24074:509;;;24466:93;24522:10;24466:93;;:21;:25;;:93;;;;:::i;:::-;24442:117;;24074:509;23502:1100;23298:1319;24664:6;24636:58;;24653:9;24636:58;24672:9;24683:10;24636:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;22962:1744;;;23001:3;;;;;;;22962:1744;;;;24716:144;24744:9;24768:24;24807:21;24843:6;24716:13;:144::i;:::-;2172:1;;;;;21972:2902:::0;;;;;;:::o;3141:251:8:-;3235:13;3250:7;3297:10;3308:5;;3297:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:22;;3342:10;3353:5;;3342:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;3334:39;;3275:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3141:251;;;;;:::o;12698:1388:7:-;12834:9;1369:11;:22;1381:9;1369:22;;;;;;;;;;;:47;;;1351:15;:65;1329:165;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12861:13:::1;12877:21;12887:10;12877:9;:21::i;:::-;12861:37;;12909:23;12952:9:::0;12947:1001:::1;12971:11;:18;12967:1;:22;12947:1001;;;13163:12;13178:87;13236:11;13248:1;13236:14;;;;;;;;;;;;;;13178:10;:21;13189:9;13178:21;;;;;;;;;;;:39;;:87;;;;:::i;:::-;13163:102;;13284:7;13280:657;;;13335:19;13377:22:::0;13422:23:::1;13467:28;:11;13479:1;13467:14;;;;;;;;;;;;;;:26;:28::i;:::-;13312:183;;;;;;13560:6;13544:22;;:12;:22;;;13514:131;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13682:37;13702:16;13682:37;;:15;:19;;:37;;;;:::i;:::-;13664:55;;13819:6;13743:178;;13787:9;13743:178;13848:15;13886:16;13743:178;;;;;;;;;;;;;;;;;;;;;;;;;;;;13280:657;;;;12947:1001;12991:3;;;;;;;12947:1001;;;;13958:114;14021:10;14046:15;13958:11;:22;13970:9;13958:22;;;;;;;;;;;:35;;;;;;;;;;;;:48;;;;:114;;;;;:::i;:::-;1505:1;;12698:1388:::0;;;:::o;1085:85:0:-;1131:7;1157:6;;;;;;;;;;;1150:13;;1085:85;:::o;15727:1216:7:-;15991:9;1602:22;1627:11;:22;1639:9;1627:22;;;;;;;;;;;:37;;;1602:62;;1723:1;1705:14;:19;;:77;;;;;1768:14;1749:15;:33;;1705:77;:157;;;;;1860:1;1852:10;;1807:11;:22;1819:9;1807:22;;;;;;;;;;;:41;;;:55;1705:157;1679:259;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15727:1216;16035:11:::1;:22;16047:9;16035:22;;;;;;;;;;;:45;;;;;;;;;;;;16013:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16205:1;16181:13;:20;:25;:52;;;;;16232:1;16210:11;:18;:23;16181:52;16159:141;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16311:13;16327:21;16337:10;16327:9;:21::i;:::-;16311:37;;16381:240;16447:159;16505:6;16534:13;16548:1;16534:16;;;;;;;;;;;;;;16573:11;16585:1;16573:14;;;;;;;;;;;;;;16447:35;:159::i;:::-;16381:11;:22;16393:9;16381:22;;;;;;;;;;;:35;;;:47;;:240;;;;:::i;:::-;16359:339;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16709:191;16740:9;16764:13;16792:11;16818:14;16847:17;;16879:10;16709:16;:191::i;:::-;;16911:24;16925:9;16911:13;:24::i;:::-;;1960:1;15727:1216:::0;;;;;;;:::o;4730:377:8:-;4794:13;4820:7;4842:64;4852:2;4848:1;:6;;;:26;;;;;4873:1;4858:16;;:8;4867:1;4858:11;;;;;;;;;;;;:16;;;;;4848:26;4842:64;;;4891:3;;;;;;;4842:64;;;4916:23;4952:1;4942:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4916:38;;4974:1;4970:5;;4965:99;4981:2;4977:1;:6;;;:26;;;;;5002:1;4987:16;;:8;4996:1;4987:11;;;;;;;;;;;;:16;;;;;4977:26;4965:99;;;5041:8;5050:1;5041:11;;;;;;;;;;;;5025:10;5036:1;5025:13;;;;;;;;;;;;;:27;;;;;;;;;;;5005:3;;;;;;;4965:99;;;5088:10;5074:25;;;;4730:377;;;:::o;29291:147:7:-;1308:12:0;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29404:26:7::1;29417:5;;29424;;29404:12;:26::i;:::-;29291:147:::0;;;;:::o;3584:103:8:-;3634:16;3670:9;3663:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3584:103;:::o;4476:29:7:-;;;;:::o;4129:239:8:-;4220:13;4268:9;:16;;;;4259:6;:25;4251:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4326:34;4342:9;4352:6;4342:17;;;;;;;;;;;;;;;;4326:15;:34::i;:::-;4319:41;;4129:239;;;:::o;4376:346::-;4471:14;4503:32;4544:6;4503:48;;4596:1;4566:19;:26;:31;4562:74;;;4621:3;4614:10;;;;;;;4562:74;4700:2;4692:6;4688:15;4682:22;4672:32;;4657:58;;;;;:::o;8639:553:7:-;8916:13;8896:9;1127:11;:22;1139:9;1127:22;;;;;;;;;;;:37;;;1109:15;:55;1087:139;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8962:222:::1;8997:9;9025:14;9058:12;9089:15;9123:17;;9159:10;8962:16;:222::i;:::-;8942:242;;8639:553:::0;;;;;;;;;:::o;4669:46::-;4711:4;4669:46;:::o;29719:109::-;1308:12:0;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29798:22:7::1;29814:5;;29798:15;:22::i;:::-;29719:109:::0;;:::o;4254:55::-;;;;;;;;;;;;;;;;;;;;;;:::o;4631:31::-;;;;:::o;9200:598::-;9518:13;9498:9;1127:11;:22;1139:9;1127:22;;;;;;;;;;;:37;;;1109:15;:55;1087:139;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9564:226:::1;9599:9;9627:14;9660:12;9691:15;9725:17;;9761:14;9564:16;:226::i;:::-;9544:246;;9200:598:::0;;;;;;;;;;:::o;2011:240:0:-;1308:12;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2119:1:::1;2099:22;;:8;:22;;;;2091:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2208:8;2179:38;;2200:6;::::0;::::1;;;;;;;;2179:38;;;;;;;;;;;;2236:8;2227:6;::::0;:17:::1;;;;;;;;;;;;;;;;;;2011:240:::0;:::o;4316:50:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2690:175:2:-;2748:7;2767:9;2783:1;2779;:5;2767:17;;2807:1;2802;:6;;2794:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2857:1;2850:8;;;2690:175;;;;:::o;3538:215::-;3596:7;3624:1;3619;:6;3615:20;;;3634:1;3627:8;;;;3615:20;3645:9;3661:1;3657;:5;3645:17;;3689:1;3684;3680;:5;;;;;;:10;3672:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3745:1;3738:8;;;3538:215;;;;;:::o;4217:150::-;4275:7;4306:1;4302;:5;4294:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4359:1;4355;:5;;;;;;4348:12;;4217:150;;;;:::o;885:203:4:-;985:96;1005:5;1035:27;;;1064:4;1070:2;1074:5;1012:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;985:19;:96::i;:::-;885:203;;;;:::o;1627:161:13:-;591:66;1723:9;;1695:4;:12;;:25;379:66;1708:11;;1695:25;;;;;;;;;;;:37;;;;379:66;1769:11;;1743:4;:12;;:23;591:66;1756:9;;1743:23;;;;;;;;;;;:37;;;;1627:161;:::o;8117:336::-;8247:7;8419:10;8411:19;;8384:2;8370:9;8362:18;;:24;;8333:3;8322:6;8314:15;;:22;;8313:74;:117;8287:158;;8267:178;;8117:336;;;;;:::o;3136:155:2:-;3194:7;3226:1;3221;:6;;3213:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3283:1;3279;:5;3272:12;;3136:155;;;;:::o;530:178:14:-;586:6;621:5;613;:13;605:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;694:5;680:20;;530:178;;;:::o;1463:572:12:-;1575:4;1616:1;1600:18;;:4;:18;;;;1592:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1681:2;1668:16;;:2;:16;;;;1660:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1815:1;1789:4;:16;;:22;1806:4;1789:22;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;;:82;;;;1869:1;1833:38;;:4;:16;;:24;1855:1;1850:2;:6;1833:24;;;;;;;;;;;;;;;;;;;;;;;;;:38;;;;1789:82;1771:151;;;1905:5;1898:12;;;;1771:151;1959:4;1932;:16;;:24;1954:1;1949:2;:6;1932:24;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;2004:1;1999:2;:6;1974:4;:16;;:22;1991:4;1974:22;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;2023:4;2016:11;;1463:572;;;;;;:::o;804:167::-;907:4;962:1;936:4;:16;;:22;953:4;936:22;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;;929:34;;804:167;;;;:::o;1219:236::-;1317:6;1349:22;1360:4;1366;1349:10;:22::i;:::-;1341:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1446:1;1421:4;:16;;:22;1438:4;1421:22;;;;;;;;;;;;;;;;;;;;;;;;;:26;1414:33;;1219:236;;;;:::o;7640:469:13:-;7745:13;7773:16;7804:17;7990:3;7975:10;7967:19;;:26;;7951:43;;8047:2;8032:10;8024:19;;:25;;8005:45;;8089:10;8081:19;;8061:40;;7640:469;;;;;:::o;7227:405::-;7325:7;591:66;7367:9;;7358:5;:18;;7350:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7426:19;7448:4;:12;;:19;7461:5;7448:19;;;;;;;;;;;;7426:41;;7523:1;7515:10;;7500:11;:25;;7478:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7613:11;7606:18;;;7227:405;;;;:::o;344:178:14:-;400:6;435:5;427;:13;419:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;508:5;494:20;;344:178;;;:::o;24882:2118:7:-;25089:17;25109:101;4711:4;25109:70;25143:11;:22;25155:9;25143:22;;;;;;;;;;;:35;;;25109:19;:33;;;;:70;;;;:::i;:::-;:84;;:101;;;;:::i;:::-;25089:121;;25232:11;:22;25244:9;25232:22;;;;;;;;;;;:52;;;;;;;;;;;;25228:1765;;;25301:160;25333:9;25361:34;25385:9;25361:19;:23;;;;:34;;;;:::i;:::-;25414:1;25434:12;25301:13;:160::i;:::-;25228:1765;;;25523:21;25546:23;25573:115;:11;:54;25603:9;25573:54;;;;;;;;;;;:87;;;:113;:115::i;:::-;25520:168;;;;;25794:30;25827:84;25869:27;25827:19;:23;;;;:84;;;;:::i;:::-;25794:117;;26055:29;26087:122;26132:62;26174:19;26132:62;;:37;26146:22;26132:9;:13;;:37;;;;:::i;:::-;:41;;:62;;;;:::i;:::-;26087:22;:26;;:122;;;;:::i;:::-;26055:154;;26327:26;26356:97;26438:14;26356:97;;:63;26402:16;26356:63;;:27;:45;;:63;;;;:::i;:::-;:81;;:97;;;;:::i;:::-;26327:126;;26468:164;26500:9;26528:21;26568:18;26605:12;26468:13;:164::i;:::-;26653:322;26685:9;26797:107;26866:19;26797:107;;:42;26811:27;26797:9;:13;;:42;;;;:::i;:::-;:46;;:107;;;;:::i;:::-;26923:1;26943:17;;;;;;;;;;;26653:13;:322::i;:::-;25228:1765;;;;;;24882:2118;;;;;:::o;598:104:6:-;651:15;685:10;678:17;;598:104;:::o;5391:343:13:-;5493:4;379:66;5528:11;;5519:5;:20;5515:65;;;5563:5;5556:12;;;;5515:65;5724:1;5716:10;;5693:4;:12;;:19;5706:5;5693:19;;;;;;;;;;;;:33;;5686:40;;5391:343;;;;;:::o;5088:295::-;5184:4;5206:11;5220:40;5238:4;5244:15;5220:17;:40::i;:::-;5206:54;;5275:6;5271:81;;;5338:1;5330:10;;5298:4;:12;;:29;5311:15;5298:29;;;;;;;;;;;:42;;;;5271:81;5369:6;5362:13;;;5088:295;;;;:::o;5877:1145::-;5987:4;6024:17;6056:25;6096:27;6137:22;6149:9;6137:11;:22::i;:::-;6009:150;;;;;;6185:18;6218:26;6259:28;6301:23;6313:10;6301:11;:23::i;:::-;6170:154;;;;;;6416:45;6440:20;6416:45;;:19;:23;;;;:45;;;;:::i;:::-;6355;6378:21;6355:45;;:18;:22;;;;:45;;;;:::i;:::-;:106;6337:147;;;6480:4;6473:11;;;;;;;;;;6337:147;6574:45;6598:20;6574:45;;:19;:23;;;;:45;;;;:::i;:::-;6513;6536:21;6513:45;;:18;:22;;;;:45;;;;:::i;:::-;:106;6495:148;;;6638:5;6631:12;;;;;;;;;;6495:148;6681:19;6660:40;;:18;:40;;;6656:57;;;6709:4;6702:11;;;;;;;;;;6656:57;6749:19;6728:40;;:18;:40;;;6724:58;;;6777:5;6770:12;;;;;;;;;;6724:58;6829:11;6815:25;;:10;:25;;;;6793:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6941:11;6928:24;;:10;:24;;;6924:68;;;6976:4;6969:11;;;;;;;;;;6924:68;7009:5;7002:12;;;;;;;;5877:1145;;;;;:::o;27370:644:7:-;27549:19;27571:36;27600:6;27571:15;:28;;:36;;;;:::i;:::-;27549:58;;27646:1;27622:21;:25;27618:194;;;27664:136;27734:11;27764:21;27664:11;:22;27676:9;27664:22;;;;;;;;;;;:38;;;;;;;;;;;;:51;;;;:136;;;;;:::i;:::-;27618:194;27847:1;27826:18;:22;27822:185;;;27865:130;27932:11;27962:18;27865:11;:22;27877:9;27865:22;;;;;;;;;;;:35;;;;;;;;;;;;:48;;;;:130;;;;;:::i;:::-;27822:185;27370:644;;;;;:::o;4294:524:13:-;4401:4;4428:31;4437:4;4443:15;4428:8;:31::i;:::-;4423:77;;4483:5;4476:12;;;;4423:77;4510:23;4536:4;:12;;:29;4549:15;4536:29;;;;;;;;;;;;4510:55;;4576:19;4598:4;:12;;:29;4611:15;4598:29;;;;;;;;;;;;4576:51;;4670:11;4638:4;:12;;:29;4651:15;4638:29;;;;;;;;;;;:43;;;;4720:15;4692:4;:12;;:25;4705:11;4692:25;;;;;;;;;;;:43;;;;4786:1;4778:10;;4746:4;:12;;:29;4759:15;4746:29;;;;;;;;;;;:42;;;;4806:4;4799:11;;;;4294:524;;;;;:::o;704:175:4:-;786:86;806:5;836:23;;;861:2;865:5;813:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;786:19;:86::i;:::-;704:175;;;:::o;9806:2884:7:-;10084:13;10125:24;10152:20;:31;10173:9;10152:31;;;;;;;;;;;;;;;;;;;;;10125:58;;10230:1;10202:30;;:16;:30;;;10198:403;;318:10:10;10476:34:7;;10283:227;;;10301:16;10283:45;;;10355:14;10396:9;10432:17;;10283:189;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:227;;;;10253:332;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10198:403;9806:2884;10675:37;10731:38;10787:56;:11;:22;10799:9;10787:22;;;;;;;;;;;:42;;;:54;:56::i;:::-;10637:206;;;;;10863:9;10858:335;10882:14;:21;10878:1;:25;10858:335;;;11040:52;11076:12;11089:1;11076:15;;;;;;;;;;;;;;11040:52;;:31;:35;;;;:52;;;;:::i;:::-;10959:53;10981:30;10959:53;;:14;10974:1;10959:17;;;;;;;;;;;;;;:21;;;;:53;;;;:::i;:::-;:133;10929:248;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10905:3;;;;;;;10858:335;;;;9806:2884;;11214:24;11262:25;11272:14;11262:9;:25::i;:::-;11253:34;;11298:36;11337:11;:22;11349:9;11337:22;;;;;;;;;;;:61;;;11298:100;;11414:9;11409:1110;11433:14;:21;11429:1;:25;11409:1110;;;11522:1;11502:14;11517:1;11502:17;;;;;;;;;;;;;;:21;;;11476:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11803:28;11785:12;11798:1;11785:15;;;;;;;;;;;;;;:46;;;11759:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11919:288;11970:177;12032:6;12065:14;12080:1;12065:17;;;;;;;;;;;;;;12109:12;12122:1;12109:15;;;;;;;;;;;;;;11970:35;:177::i;:::-;12170:15;12186:1;12170:18;;;;;;;;;;;;;;11919:10;:21;11930:9;11919:21;;;;;;;;;;;:28;;:288;;;;;:::i;:::-;11897:611;;;12261:37;12282:12;12295:1;12282:15;;;;;;;;;;;;;;12261:37;;:16;:20;;:37;;;;:::i;:::-;12242:56;;12389:6;12322:170;;12357:9;12322:170;12418:14;12433:1;12418:17;;;;;;;;;;;;;;12458:12;12471:1;12458:15;;;;;;;;;;;;;;12322:170;;;;;;;;;;;;;;;;;;;;;;;;;;;;11897:611;11456:3;;;;;;;11409:1110;;;;12529:147;12596:10;12629:4;12649:16;12529:11;:22;12541:9;12529:22;;;;;;;;;;;:35;;;;;;;;;;;;:52;;;;:147;;;;;;:::i;:::-;9806:2884;;;;;;;;;;;:::o;1317:688:8:-;1449:1;1433:5;;1427:19;;:23;1419:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1520:1;1504:5;;1498:19;;:23;1490:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1667:1;1626:43;;:10;1637:5;;1626:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;:43;;;1622:182;;;1686:9;1701:22;1717:5;;1701:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:15;:22::i;:::-;1686:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1775:9;:16;;;;1739:10;1750:5;;1739:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:26;;;:53;;;;;;;;;;;;;;;;;;1622:182;1834:118;;;;;;;;1857:10;1868:5;;1857:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;1834:118;;;;;;1905:15;1834:118;;;;;;1936:5;;1834:118;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1814:10;1825:5;;1814:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:138;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1984:5;;1968:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;1991:5;;1968:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1317:688;;;;:::o;2273:572::-;2404:1;2363:43;;:10;2374:5;;2363:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;:43;;;;2341:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2466:12;2510:1;2481:10;2492:5;;2481:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;:30;2466:45;;2554:1;2535:9;:16;;;;:20;2526:5;:29;;;2522:193;;2591:9;2620:1;2601:9;:16;;;;:20;2591:31;;;;;;;;;;;;;;;;2572:9;2582:5;2572:16;;;;;;;;;;;;;;;;;:50;;;;2702:1;2694:5;:9;2637:10;2648:33;2664:9;2674:5;2664:16;;;;;;;;;;;;;;;;;;2648:15;:33::i;:::-;2637:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:54;;;:66;;;;;;;;;;;;;;;;;;2522:193;2725:9;:15;;;;;;;;;;;;;;;;;;;;;;;;2772:5;;2756:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;2779:10;2790:5;;2779:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:22;;2756:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2820:10;2831:5;;2820:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2813:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;2273:572;;;:::o;2967:751:4:-;3386:23;3412:69;3440:4;3412:69;;;;;;;;;;;;;;;;;3420:5;3412:27;;;;:69;;;;;:::i;:::-;3386:95;;3515:1;3495:10;:17;:21;3491:221;;;3635:10;3624:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3616:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3491:221;2967:751;;;:::o;979:232:12:-;1081:7;1114:15;1120:4;1126:2;1114:5;:15::i;:::-;1106:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1179:4;:16;;:24;1201:1;1196:2;:6;1179:24;;;;;;;;;;;;;;;;;;;;;;;;;1172:31;;979:232;;;;:::o;1933:2120:13:-;2074:4;2096:18;2118:28;2130:15;2118:11;:28::i;:::-;2091:55;;;;2187:1;2165:24;;:11;:24;;;;2157:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;379:66;2277:11;;2258:15;:30;;:62;;;;;591:66;2311:9;;2292:15;:28;;2258:62;2236:142;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2393:31;2402:4;2408:15;2393:8;:31::i;:::-;2389:76;;;2448:5;2441:12;;;;;2389:76;379:66;2516:11;;2493:19;:34;;:98;;;;;2589:1;2581:10;;2544:4;:12;;:33;2557:19;2544:33;;;;;;;;;;;;:47;2493:98;2475:167;;;2625:5;2618:12;;;;;2475:167;2657:48;2689:15;2657:19;:31;;:48;;;;:::i;:::-;2652:94;;2729:5;2722:12;;;;;2652:94;3250:138;3302:1;3294:10;;3257:4;:12;;:33;3270:19;3257:33;;;;;;;;;;;;:47;3250:138;;;3343:4;:12;;:33;3356:19;3343:33;;;;;;;;;;;;3321:55;;3250:138;;;3550:16;3577:15;3595:19;3577:37;;3625:140;3654:7;3643:18;;3686:4;:12;;:21;3699:7;3686:21;;;;;;;;;;;;3676:31;;3727:36;3747:15;3727:7;:19;;:36;;;;:::i;:::-;3625:140;;3855:15;3830:4;:12;;:22;3843:8;3830:22;;;;;;;;;;;:40;;;;3905:15;3881:4;:12;;:21;3894:7;3881:21;;;;;;;;;;;:39;;;;3963:8;3931:4;:12;;:29;3944:15;3931:29;;;;;;;;;;;:40;;;;4014:7;3982:4;:12;;:29;3995:15;3982:29;;;;;;;;;;;:39;;;;4041:4;4034:11;;;;;1933:2120;;;;;;:::o;3581:193:5:-;3684:12;3715:52;3737:6;3745:4;3751:1;3754:12;3715:21;:52::i;:::-;3708:59;;3581:193;;;;;:::o;658:138:12:-;726:4;786:1;750:38;;:4;:16;;:24;772:1;767:2;:6;750:24;;;;;;;;;;;;;;;;;;;;;;;;;:38;;;;743:45;;658:138;;;;:::o;4608:523:5:-;4735:12;4792:5;4767:21;:30;;4759:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4858:18;4869:6;4858:10;:18::i;:::-;4850:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4981:12;4995:23;5022:6;:11;;5042:5;5050:4;5022:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4980:75;;;;5072:52;5090:7;5099:10;5111:12;5072:17;:52::i;:::-;5065:59;;;;4608:523;;;;;;:::o;726:413::-;786:4;989:12;1098:7;1086:20;1078:28;;1131:1;1124:4;:8;1117:15;;;726:413;;;:::o;7091:725::-;7206:12;7234:7;7230:580;;;7264:10;7257:17;;;;7230:580;7395:1;7375:10;:17;:21;7371:429;;;7633:10;7627:17;7693:15;7680:10;7676:2;7672:19;7665:44;7582:145;7772:12;7765:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7091:725;;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "5585000",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "FEE_DENOMINATOR()": "272",
            "auctionAccessData(uint256)": "infinite",
            "auctionAccessManager(uint256)": "1305",
            "auctionCounter()": "1072",
            "auctionData(uint256)": "12371",
            "bytes32ToString(bytes32)": "infinite",
            "cancelSellOrders(uint256,bytes32[])": "infinite",
            "claimFromParticipantOrder(uint256,bytes32[])": "infinite",
            "containsOrder(uint256,bytes32)": "infinite",
            "feeNumerator()": "1049",
            "feeReceiverUserId()": "1137",
            "getAllDocuments()": "infinite",
            "getDocument(string)": "infinite",
            "getDocumentCount()": "1111",
            "getDocumentName(uint256)": "infinite",
            "getSecondsRemainingInBatch(uint256)": "infinite",
            "getUserId(address)": "infinite",
            "initiateAuction(address,address,uint256,uint256,uint96,uint96,uint256,uint256,bool,address,bytes)": "infinite",
            "numUsers()": "1138",
            "owner()": "1101",
            "placeSellOrders(uint256,uint96[],uint96[],bytes32[],bytes)": "infinite",
            "placeSellOrdersOnBehalf(uint256,uint96[],uint96[],bytes32[],bytes,address)": "infinite",
            "precalculateSellAmountSum(uint256,uint256)": "infinite",
            "registerUser(address)": "infinite",
            "removeDocument(string)": "infinite",
            "renounceOwnership()": "24374",
            "setDocument(string,string)": "infinite",
            "setFeeParameters(uint256,address)": "infinite",
            "settleAuction(uint256)": "infinite",
            "settleAuctionAtomically(uint256,uint96[],uint96[],bytes32[],bytes)": "infinite",
            "stringToBytes32(string)": "infinite",
            "transferOwnership(address)": "infinite"
          },
          "internal": {
            "_placeSellOrders(uint256,uint96[] memory,uint96[] memory,bytes32[] memory,bytes calldata,address)": "infinite",
            "processFeesAndAuctioneerFunds(uint256,uint256,uint64,uint96)": "infinite",
            "sendOutTokens(uint256,uint256,uint256,uint64)": "infinite"
          }
        },
        "methodIdentifiers": {
          "FEE_DENOMINATOR()": "d73792a9",
          "auctionAccessData(uint256)": "f59c2f06",
          "auctionAccessManager(uint256)": "e4a59ef4",
          "auctionCounter()": "a7e76644",
          "auctionData(uint256)": "55fc62d2",
          "bytes32ToString(bytes32)": "9201de55",
          "cancelSellOrders(uint256,bytes32[])": "7ed18b70",
          "claimFromParticipantOrder(uint256,bytes32[])": "7882deaf",
          "containsOrder(uint256,bytes32)": "63c699a4",
          "feeNumerator()": "e86dea4a",
          "feeReceiverUserId()": "5cefb291",
          "getAllDocuments()": "9fa5f50b",
          "getDocument(string)": "7ccb6a64",
          "getDocumentCount()": "3d1c2273",
          "getDocumentName(uint256)": "c6b547e6",
          "getSecondsRemainingInBatch(uint256)": "15d37b4b",
          "getUserId(address)": "2b956ff7",
          "initiateAuction(address,address,uint256,uint256,uint96,uint96,uint256,uint256,bool,address,bytes)": "0a4cd6c9",
          "numUsers()": "19a50f49",
          "owner()": "8da5cb5b",
          "placeSellOrders(uint256,uint96[],uint96[],bytes32[],bytes)": "d225269c",
          "placeSellOrdersOnBehalf(uint256,uint96[],uint96[],bytes32[],bytes,address)": "ec20d0bb",
          "precalculateSellAmountSum(uint256,uint256)": "3e12905f",
          "registerUser(address)": "2199d5cd",
          "removeDocument(string)": "dde51f6d",
          "renounceOwnership()": "715018a6",
          "setDocument(string,string)": "9c64d0ae",
          "setFeeParameters(uint256,address)": "40b20b09",
          "settleAuction(uint256)": "2e993611",
          "settleAuctionAtomically(uint256,uint96[],uint96[],bytes32[],bytes)": "91cfc1d4",
          "stringToBytes32(string)": "cfb51928",
          "transferOwnership(address)": "f2fde38b"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"soldAuctioningTokens\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"soldBiddingTokens\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"clearingPriceOrder\",\"type\":\"bytes32\"}],\"name\":\"AuctionCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"}],\"name\":\"CancellationSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"}],\"name\":\"ClaimedFromOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"DocumentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"DocumentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_auctioningToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_biddingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderCancellationEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_auctionedSellAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_minBuyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumBiddingAmountPerOrder\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minFundingThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"allowListContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"allowListData\",\"type\":\"bytes\"}],\"name\":\"NewAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"buyAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"sellAmount\",\"type\":\"uint96\"}],\"name\":\"NewSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"NewUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"name\":\"UserRegistration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionAccessData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionAccessManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionData\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"auctioningToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"biddingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderCancellationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"initialAuctionOrder\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minimumBiddingAmountPerOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interimSumBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"interimOrder\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"clearingPriceOrder\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"volumeClearingPriceOrder\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"minFundingThresholdNotReached\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAtomicClosureAllowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"feeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFundingThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_sellOrders\",\"type\":\"bytes32[]\"}],\"name\":\"cancelSellOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"orders\",\"type\":\"bytes32[]\"}],\"name\":\"claimFromParticipantOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sumAuctioningTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumBiddingTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"order\",\"type\":\"bytes32\"}],\"name\":\"containsOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiverUserId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDocuments\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getDocument\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDocumentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDocumentName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getSecondsRemainingInBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_auctioningToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_biddingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderCancellationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_auctionedSellAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_minBuyAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minimumBiddingAmountPerOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFundingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAtomicClosureAllowed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"accessManagerContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"accessManagerContractData\",\"type\":\"bytes\"}],\"name\":\"initiateAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numUsers\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint96[]\",\"name\":\"_minBuyAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_sellAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_prevSellOrders\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"allowListCallData\",\"type\":\"bytes\"}],\"name\":\"placeSellOrders\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint96[]\",\"name\":\"_minBuyAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_sellAmounts\",\"type\":\"uint96[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_prevSellOrders\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"allowListCallData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"orderSubmitter\",\"type\":\"address\"}],\"name\":\"placeSellOrdersOnBehalf\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iterationSteps\",\"type\":\"uint256\"}],\"name\":\"precalculateSellAmountSum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"registerUser\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"userId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"removeDocument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"setDocument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newfeeReceiverAddress\",\"type\":\"address\"}],\"name\":\"setFeeParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"clearingOrder\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint96[]\",\"name\":\"_minBuyAmount\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_sellAmount\",\"type\":\"uint96[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_prevSellOrder\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"allowListCallData\",\"type\":\"bytes\"}],\"name\":\"settleAuctionAtomically\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAllDocuments()\":{\"returns\":{\"_0\":\"string List of all documents names present in the contract.\"}},\"getDocument(string)\":{\"params\":{\"_name\":\"Name of the document\"},\"returns\":{\"_0\":\"string The data associated with the document.\",\"_1\":\"uint256 the timestamp at which the document was last modified.\"}},\"getDocumentCount()\":{\"returns\":{\"_0\":\"uint256 Count of the document names present in the contract.\"}},\"getDocumentName(uint256)\":{\"returns\":{\"_0\":\"string Name of the document name.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimFromParticipantOrder(uint256,bytes32[])\":{\"notice\":\"First we will remove the given orders from contract sell orders list.*\"},\"getAllDocuments()\":{\"notice\":\"Used to retrieve a full list of documents attached to the smart contract.\"},\"getDocument(string)\":{\"notice\":\"Used to return the details of a document with a known name (`string`).\"},\"getDocumentCount()\":{\"notice\":\"Used to retrieve the total documents in the smart contract.\"},\"getDocumentName(uint256)\":{\"notice\":\"Used to retrieve the document name from index in the smart contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AnnexBatchAuction.sol\":\"AnnexBatchAuction\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/AnnexBatchAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.8;\\r\\n// pragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\nimport \\\"./libraries/IterableOrderedOrderSet.sol\\\";\\r\\nimport \\\"./interfaces/AllowListVerifier.sol\\\";\\r\\n// import \\\"./Access/AnnexAccessControls.sol\\\";\\r\\nimport \\\"./libraries/IdToAddressBiMap.sol\\\";\\r\\nimport \\\"./libraries/SafeCast.sol\\\";\\r\\nimport \\\"./Utils/Documents.sol\\\";\\r\\n\\r\\ncontract AnnexBatchAuction is Ownable, Documents {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint64;\\r\\n    using SafeMath for uint96;\\r\\n    using SafeMath for uint256;\\r\\n    using SafeCast for uint256;\\r\\n    using IterableOrderedOrderSet for IterableOrderedOrderSet.Data;\\r\\n    using IterableOrderedOrderSet for bytes32;\\r\\n    using IdToAddressBiMap for IdToAddressBiMap.Data;\\r\\n\\r\\n    modifier atStageOrderPlacement(uint256 auctionId) {\\r\\n        require(\\r\\n            block.timestamp < auctionData[auctionId].auctionEndDate,\\r\\n            \\\"no longer in order placement phase\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier atStageOrderPlacementAndCancelation(uint256 auctionId) {\\r\\n        require(\\r\\n            block.timestamp < auctionData[auctionId].orderCancellationEndDate,\\r\\n            \\\"no longer in order placement and cancelation phase\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier atStageSolutionSubmission(uint256 auctionId) {\\r\\n        {\\r\\n            uint256 auctionEndDate = auctionData[auctionId].auctionEndDate;\\r\\n            require(\\r\\n                auctionEndDate != 0 &&\\r\\n                    block.timestamp >= auctionEndDate &&\\r\\n                    auctionData[auctionId].clearingPriceOrder == bytes32(0),\\r\\n                \\\"Auction not in solution submission phase\\\"\\r\\n            );\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier atStageFinished(uint256 auctionId) {\\r\\n        require(\\r\\n            auctionData[auctionId].clearingPriceOrder != bytes32(0),\\r\\n            \\\"Auction not yet finished\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event NewSellOrder(\\r\\n        uint256 indexed auctionId,\\r\\n        uint64 indexed userId,\\r\\n        uint96 buyAmount,\\r\\n        uint96 sellAmount\\r\\n    );\\r\\n    event CancellationSellOrder(\\r\\n        uint256 indexed auctionId,\\r\\n        uint64 indexed userId,\\r\\n        uint96 buyAmount,\\r\\n        uint96 sellAmount\\r\\n    );\\r\\n    event ClaimedFromOrder(\\r\\n        uint256 indexed auctionId,\\r\\n        uint64 indexed userId,\\r\\n        uint96 buyAmount,\\r\\n        uint96 sellAmount\\r\\n    );\\r\\n    event NewUser(uint64 indexed userId, address indexed userAddress);\\r\\n    event NewAuction(\\r\\n        uint256 indexed auctionId,\\r\\n        IERC20 indexed _auctioningToken,\\r\\n        IERC20 indexed _biddingToken,\\r\\n        uint256 orderCancellationEndDate,\\r\\n        uint256 auctionEndDate,\\r\\n        uint64 userId,\\r\\n        uint96 _auctionedSellAmount,\\r\\n        uint96 _minBuyAmount,\\r\\n        uint256 minimumBiddingAmountPerOrder,\\r\\n        uint256 minFundingThreshold,\\r\\n        address allowListContract,\\r\\n        bytes allowListData\\r\\n    );\\r\\n    event AuctionCleared(\\r\\n        uint256 indexed auctionId,\\r\\n        uint96 soldAuctioningTokens,\\r\\n        uint96 soldBiddingTokens,\\r\\n        bytes32 clearingPriceOrder\\r\\n    );\\r\\n    event UserRegistration(address indexed user, uint64 userId);\\r\\n\\r\\n    /**\\r\\n    @param {auctioningToken}\\r\\n    **/\\r\\n    struct AuctionData {\\r\\n        IERC20 auctioningToken;\\r\\n        IERC20 biddingToken;\\r\\n        uint256 orderCancellationEndDate;\\r\\n        uint256 auctionEndDate;\\r\\n        bytes32 initialAuctionOrder;\\r\\n        uint256 minimumBiddingAmountPerOrder;\\r\\n        uint256 interimSumBidAmount;\\r\\n        bytes32 interimOrder;\\r\\n        bytes32 clearingPriceOrder;\\r\\n        uint96 volumeClearingPriceOrder;\\r\\n        bool minFundingThresholdNotReached;\\r\\n        bool isAtomicClosureAllowed;\\r\\n        uint256 feeNumerator;\\r\\n        uint256 minFundingThreshold;\\r\\n    }\\r\\n    mapping(uint256 => IterableOrderedOrderSet.Data) internal sellOrders; // Store total number of sell orders\\r\\n    mapping(uint256 => AuctionData) public auctionData; // Store auctions details\\r\\n    mapping(uint256 => address) public auctionAccessManager;\\r\\n    mapping(uint256 => bytes) public auctionAccessData;\\r\\n\\r\\n    IdToAddressBiMap.Data private registeredUsers;\\r\\n    uint64 public numUsers; // counter of users\\r\\n    uint256 public auctionCounter; // counter for auctions\\r\\n\\r\\n    constructor() public Ownable() {\\r\\n        // initAccessControls(_msgSender());\\r\\n    }\\r\\n\\r\\n    uint256 public feeNumerator = 0;\\r\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\r\\n    uint64 public feeReceiverUserId = 1;\\r\\n\\r\\n    function setFeeParameters(\\r\\n        uint256 newFeeNumerator,\\r\\n        address newfeeReceiverAddress\\r\\n    ) public onlyOwner() {\\r\\n        require(\\r\\n            newFeeNumerator <= 15,\\r\\n            \\\"Fee is not allowed to be set higher than 1.5%\\\"\\r\\n        );\\r\\n        // caution: for currently running auctions, the feeReceiverUserId is changing as well.\\r\\n        feeReceiverUserId = getUserId(newfeeReceiverAddress);\\r\\n        feeNumerator = newFeeNumerator;\\r\\n    }\\r\\n\\r\\n    // @dev: function to intiate a new auction\\r\\n    // Warning: In case the auction is expected to raise more than\\r\\n    // 2^96 units of the biddingToken, don't start the auction, as\\r\\n    // it will not be settlable. This corresponds to about 79\\r\\n    // billion DAI.\\r\\n    //\\r\\n    // Prices between biddingToken and auctioningToken are expressed by a\\r\\n    // fraction whose components are stored as uint96.\\r\\n    // Amount transfered out is no larger than amount transfered in\\r\\n    function initiateAuction(\\r\\n        IERC20 _auctioningToken,\\r\\n        IERC20 _biddingToken,\\r\\n        uint256 orderCancellationEndDate,\\r\\n        uint256 auctionEndDate,\\r\\n        uint96 _auctionedSellAmount,\\r\\n        uint96 _minBuyAmount,\\r\\n        uint256 minimumBiddingAmountPerOrder,\\r\\n        uint256 minFundingThreshold,\\r\\n        bool isAtomicClosureAllowed,\\r\\n        address accessManagerContract,\\r\\n        bytes memory accessManagerContractData\\r\\n    ) public returns (uint256) {\\r\\n        /* \\r\\n        ( _auctionedSellAmount * ( 1000 + feeNumerator ) ) / 1000\\r\\n        // withdraws sellAmount + fees\\r\\n        // i.e: autionTokens = 1000\\r\\n        // fees = 1%\\r\\n        then 1010 will be added to the contract\\r\\n        */\\r\\n        _auctioningToken.safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _auctionedSellAmount.mul(FEE_DENOMINATOR.add(feeNumerator)).div(\\r\\n                FEE_DENOMINATOR\\r\\n            ) //[0]\\r\\n        );\\r\\n        require(_auctionedSellAmount > 0, \\\"cannot auction zero tokens\\\");\\r\\n        require(_minBuyAmount > 0, \\\"tokens cannot be auctioned for free\\\");\\r\\n        require(\\r\\n            minimumBiddingAmountPerOrder > 0,\\r\\n            \\\"minimumBiddingAmountPerOrder is not allowed to be zero\\\"\\r\\n        );\\r\\n        require(\\r\\n            orderCancellationEndDate <= auctionEndDate,\\r\\n            \\\"time periods are not configured correctly\\\"\\r\\n        );\\r\\n        require(\\r\\n            auctionEndDate > block.timestamp,\\r\\n            \\\"auction end date must be in the future\\\"\\r\\n        );\\r\\n        auctionCounter = auctionCounter.add(1);\\r\\n        sellOrders[auctionCounter].initializeEmptyList();\\r\\n        uint64 userId = getUserId(msg.sender);\\r\\n        auctionData[auctionCounter] = AuctionData(\\r\\n            _auctioningToken,\\r\\n            _biddingToken,\\r\\n            orderCancellationEndDate,\\r\\n            auctionEndDate,\\r\\n            IterableOrderedOrderSet.encodeOrder(\\r\\n                userId,\\r\\n                _minBuyAmount,\\r\\n                _auctionedSellAmount\\r\\n            ),\\r\\n            minimumBiddingAmountPerOrder,\\r\\n            0,\\r\\n            IterableOrderedOrderSet.QUEUE_START,\\r\\n            bytes32(0),\\r\\n            0,\\r\\n            false,\\r\\n            isAtomicClosureAllowed,\\r\\n            feeNumerator,\\r\\n            minFundingThreshold\\r\\n        );\\r\\n        auctionAccessManager[auctionCounter] = accessManagerContract;\\r\\n        auctionAccessData[auctionCounter] = accessManagerContractData;\\r\\n        emit NewAuction(\\r\\n            auctionCounter,\\r\\n            _auctioningToken,\\r\\n            _biddingToken,\\r\\n            orderCancellationEndDate,\\r\\n            auctionEndDate,\\r\\n            userId,\\r\\n            _auctionedSellAmount,\\r\\n            _minBuyAmount,\\r\\n            minimumBiddingAmountPerOrder,\\r\\n            minFundingThreshold,\\r\\n            accessManagerContract,\\r\\n            accessManagerContractData\\r\\n        );\\r\\n        return auctionCounter;\\r\\n    }\\r\\n\\r\\n    function placeSellOrders(\\r\\n        uint256 auctionId,\\r\\n        uint96[] memory _minBuyAmounts,\\r\\n        uint96[] memory _sellAmounts,\\r\\n        bytes32[] memory _prevSellOrders,\\r\\n        bytes calldata allowListCallData\\r\\n    ) external atStageOrderPlacement(auctionId) returns (uint64 userId) {\\r\\n        return\\r\\n            _placeSellOrders(\\r\\n                auctionId,\\r\\n                _minBuyAmounts,\\r\\n                _sellAmounts,\\r\\n                _prevSellOrders,\\r\\n                allowListCallData,\\r\\n                msg.sender\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function placeSellOrdersOnBehalf(\\r\\n        uint256 auctionId,\\r\\n        uint96[] memory _minBuyAmounts,\\r\\n        uint96[] memory _sellAmounts,\\r\\n        bytes32[] memory _prevSellOrders,\\r\\n        bytes calldata allowListCallData,\\r\\n        address orderSubmitter\\r\\n    ) external atStageOrderPlacement(auctionId) returns (uint64 userId) {\\r\\n        return\\r\\n            _placeSellOrders(\\r\\n                auctionId,\\r\\n                _minBuyAmounts,\\r\\n                _sellAmounts,\\r\\n                _prevSellOrders,\\r\\n                allowListCallData,\\r\\n                orderSubmitter\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _placeSellOrders(\\r\\n        uint256 auctionId,\\r\\n        uint96[] memory _minBuyAmounts,\\r\\n        uint96[] memory _sellAmounts,\\r\\n        bytes32[] memory _prevSellOrders,\\r\\n        bytes calldata allowListCallData,\\r\\n        address orderSubmitter\\r\\n    ) internal returns (uint64 userId) {\\r\\n        {\\r\\n            address allowListManager = auctionAccessManager[auctionId];\\r\\n            if (allowListManager != address(0)) {\\r\\n                require(\\r\\n                    AllowListVerifier(allowListManager).isAllowed(\\r\\n                        orderSubmitter,\\r\\n                        auctionId,\\r\\n                        allowListCallData\\r\\n                    ) == AllowListVerifierHelper.MAGICVALUE,\\r\\n                    \\\"user not allowed to place order\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        {\\r\\n            (\\r\\n                ,\\r\\n                uint96 buyAmountOfInitialAuctionOrder,\\r\\n                uint96 sellAmountOfInitialAuctionOrder\\r\\n            ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\\r\\n            for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\\r\\n                require(\\r\\n                    _minBuyAmounts[i].mul(buyAmountOfInitialAuctionOrder) <\\r\\n                        sellAmountOfInitialAuctionOrder.mul(_sellAmounts[i]),\\r\\n                    \\\"limit price not better than mimimal offer\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        uint256 sumOfSellAmounts = 0;\\r\\n        userId = getUserId(orderSubmitter);\\r\\n        uint256 minimumBiddingAmountPerOrder = auctionData[auctionId]\\r\\n        .minimumBiddingAmountPerOrder;\\r\\n        for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\\r\\n            require(\\r\\n                _minBuyAmounts[i] > 0,\\r\\n                \\\"_minBuyAmounts must be greater than 0\\\"\\r\\n            );\\r\\n            // orders should have a minimum bid size in order to limit the gas\\r\\n            // required to compute the final price of the auction.\\r\\n            require(\\r\\n                _sellAmounts[i] > minimumBiddingAmountPerOrder,\\r\\n                \\\"order too small\\\"\\r\\n            );\\r\\n            if (\\r\\n                sellOrders[auctionId].insert(\\r\\n                    IterableOrderedOrderSet.encodeOrder(\\r\\n                        userId,\\r\\n                        _minBuyAmounts[i],\\r\\n                        _sellAmounts[i]\\r\\n                    ),\\r\\n                    _prevSellOrders[i]\\r\\n                )\\r\\n            ) {\\r\\n                sumOfSellAmounts = sumOfSellAmounts.add(_sellAmounts[i]);\\r\\n                emit NewSellOrder(\\r\\n                    auctionId,\\r\\n                    userId,\\r\\n                    _minBuyAmounts[i],\\r\\n                    _sellAmounts[i]\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        auctionData[auctionId].biddingToken.safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            sumOfSellAmounts\\r\\n        ); //[1]\\r\\n    }\\r\\n\\r\\n    function cancelSellOrders(uint256 auctionId, bytes32[] memory _sellOrders)\\r\\n        public\\r\\n        atStageOrderPlacementAndCancelation(auctionId)\\r\\n    {\\r\\n        uint64 userId = getUserId(msg.sender);\\r\\n        uint256 claimableAmount = 0;\\r\\n        for (uint256 i = 0; i < _sellOrders.length; i++) {\\r\\n            // Note: we keep the back pointer of the deleted element so that\\r\\n            // it can be used as a reference point to insert a new node.\\r\\n            bool success = sellOrders[auctionId].removeKeepHistory(\\r\\n                _sellOrders[i]\\r\\n            );\\r\\n            if (success) {\\r\\n                (\\r\\n                    uint64 userIdOfIter,\\r\\n                    uint96 buyAmountOfIter,\\r\\n                    uint96 sellAmountOfIter\\r\\n                ) = _sellOrders[i].decodeOrder();\\r\\n                require(\\r\\n                    userIdOfIter == userId,\\r\\n                    \\\"Only the user can cancel his orders\\\"\\r\\n                );\\r\\n                claimableAmount = claimableAmount.add(sellAmountOfIter);\\r\\n                emit CancellationSellOrder(\\r\\n                    auctionId,\\r\\n                    userId,\\r\\n                    buyAmountOfIter,\\r\\n                    sellAmountOfIter\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        auctionData[auctionId].biddingToken.safeTransfer(\\r\\n            msg.sender,\\r\\n            claimableAmount\\r\\n        ); //[2]\\r\\n    }\\r\\n\\r\\n    // By calling this function you can pre calculate(before auction ending) sum of total\\r\\n    // total token sold.This function will calculate sum by taking offsent of orders linked list.\\r\\n    function precalculateSellAmountSum(\\r\\n        uint256 auctionId,\\r\\n        uint256 iterationSteps\\r\\n    ) public atStageSolutionSubmission(auctionId) {\\r\\n        (, , uint96 auctioneerSellAmount) = auctionData[auctionId]\\r\\n        .initialAuctionOrder\\r\\n        .decodeOrder();\\r\\n        uint256 sumBidAmount = auctionData[auctionId].interimSumBidAmount;\\r\\n        bytes32 iterOrder = auctionData[auctionId].interimOrder;\\r\\n\\r\\n        for (uint256 i = 0; i < iterationSteps; i++) {\\r\\n            iterOrder = sellOrders[auctionId].next(iterOrder);\\r\\n            (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\\r\\n            sumBidAmount = sumBidAmount.add(sellAmountOfIter);\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            iterOrder != IterableOrderedOrderSet.QUEUE_END,\\r\\n            \\\"reached end of order list\\\"\\r\\n        );\\r\\n\\r\\n        // it is checked that not too many iteration steps were taken:\\r\\n        // require that the sum of SellAmounts times the price of the last order\\r\\n        // is not more than initially sold amount\\r\\n        (, uint96 buyAmountOfIter, uint96 sellAmountOfIter) = iterOrder\\r\\n        .decodeOrder();\\r\\n        require(\\r\\n            sumBidAmount.mul(buyAmountOfIter) <\\r\\n                auctioneerSellAmount.mul(sellAmountOfIter),\\r\\n            \\\"too many orders summed up\\\"\\r\\n        );\\r\\n\\r\\n        auctionData[auctionId].interimSumBidAmount = sumBidAmount;\\r\\n        auctionData[auctionId].interimOrder = iterOrder;\\r\\n    }\\r\\n\\r\\n    function settleAuctionAtomically(\\r\\n        uint256 auctionId,\\r\\n        uint96[] memory _minBuyAmount,\\r\\n        uint96[] memory _sellAmount,\\r\\n        bytes32[] memory _prevSellOrder,\\r\\n        bytes calldata allowListCallData\\r\\n    ) public atStageSolutionSubmission(auctionId) {\\r\\n        require(\\r\\n            auctionData[auctionId].isAtomicClosureAllowed,\\r\\n            \\\"not allowed to settle auction atomically\\\"\\r\\n        );\\r\\n        require(\\r\\n            _minBuyAmount.length == 1 && _sellAmount.length == 1,\\r\\n            \\\"Only one order can be placed atomically\\\"\\r\\n        );\\r\\n        uint64 userId = getUserId(msg.sender);\\r\\n        require(\\r\\n            auctionData[auctionId].interimOrder.smallerThan(\\r\\n                IterableOrderedOrderSet.encodeOrder(\\r\\n                    userId,\\r\\n                    _minBuyAmount[0],\\r\\n                    _sellAmount[0]\\r\\n                )\\r\\n            ),\\r\\n            \\\"precalculateSellAmountSum is already too advanced\\\"\\r\\n        );\\r\\n        _placeSellOrders(\\r\\n            auctionId,\\r\\n            _minBuyAmount,\\r\\n            _sellAmount,\\r\\n            _prevSellOrder,\\r\\n            allowListCallData,\\r\\n            msg.sender\\r\\n        );\\r\\n        settleAuction(auctionId);\\r\\n    }\\r\\n\\r\\n    // @dev function settling the auction and calculating the price\\r\\n    function settleAuction(uint256 auctionId)\\r\\n        public\\r\\n        atStageSolutionSubmission(auctionId)\\r\\n        returns (bytes32 clearingOrder)\\r\\n    {\\r\\n        (\\r\\n            uint64 auctioneerId,\\r\\n            uint96 minAuctionedBuyAmount,\\r\\n            uint96 fullAuctionedAmount\\r\\n        ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\\r\\n\\r\\n        uint256 currentBidSum = auctionData[auctionId].interimSumBidAmount;\\r\\n        bytes32 currentOrder = auctionData[auctionId].interimOrder;\\r\\n        uint256 buyAmountOfIter;\\r\\n        uint256 sellAmountOfIter;\\r\\n        uint96 fillVolumeOfAuctioneerOrder = fullAuctionedAmount;\\r\\n        // Sum order up, until fullAuctionedAmount is fully bought or queue end is reached\\r\\n        do {\\r\\n            bytes32 nextOrder = sellOrders[auctionId].next(currentOrder);\\r\\n            if (nextOrder == IterableOrderedOrderSet.QUEUE_END) {\\r\\n                break;\\r\\n            }\\r\\n            currentOrder = nextOrder;\\r\\n            (, buyAmountOfIter, sellAmountOfIter) = currentOrder.decodeOrder();\\r\\n            currentBidSum = currentBidSum.add(sellAmountOfIter);\\r\\n        } while (\\r\\n            currentBidSum.mul(buyAmountOfIter) <\\r\\n                fullAuctionedAmount.mul(sellAmountOfIter)\\r\\n        );\\r\\n\\r\\n        if (\\r\\n            currentBidSum > 0 &&\\r\\n            currentBidSum.mul(buyAmountOfIter) >=\\r\\n            fullAuctionedAmount.mul(sellAmountOfIter)\\r\\n        ) {\\r\\n            // All considered/summed orders are sufficient to close the auction fully\\r\\n            // at price between current and previous orders.\\r\\n            uint256 uncoveredBids = currentBidSum.sub(\\r\\n                fullAuctionedAmount.mul(sellAmountOfIter).div(buyAmountOfIter)\\r\\n            );\\r\\n\\r\\n            if (sellAmountOfIter >= uncoveredBids) {\\r\\n                //[13]\\r\\n                // Auction fully filled via partial match of currentOrder\\r\\n                uint256 sellAmountClearingOrder = sellAmountOfIter.sub(\\r\\n                    uncoveredBids\\r\\n                );\\r\\n                auctionData[auctionId]\\r\\n                .volumeClearingPriceOrder = sellAmountClearingOrder.toUint96();\\r\\n                currentBidSum = currentBidSum.sub(uncoveredBids);\\r\\n                clearingOrder = currentOrder;\\r\\n            } else {\\r\\n                //[14]\\r\\n                // Auction fully filled via price strictly between currentOrder and the order\\r\\n                // immediately before. For a proof, see the security-considerations.md\\r\\n                currentBidSum = currentBidSum.sub(sellAmountOfIter);\\r\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\r\\n                    0,\\r\\n                    fullAuctionedAmount,\\r\\n                    currentBidSum.toUint96()\\r\\n                );\\r\\n            }\\r\\n        } else {\\r\\n            // All considered/summed orders are not sufficient to close the auction fully at price of last order //[18]\\r\\n            // Either a higher price must be used or auction is only partially filled\\r\\n\\r\\n            if (currentBidSum > minAuctionedBuyAmount) {\\r\\n                //[15]\\r\\n                // Price higher than last order would fill the auction\\r\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\r\\n                    0,\\r\\n                    fullAuctionedAmount,\\r\\n                    currentBidSum.toUint96()\\r\\n                );\\r\\n            } else {\\r\\n                //[16]\\r\\n                // Even at the initial auction price, the auction is partially filled\\r\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\r\\n                    0,\\r\\n                    fullAuctionedAmount,\\r\\n                    minAuctionedBuyAmount\\r\\n                );\\r\\n                fillVolumeOfAuctioneerOrder = currentBidSum\\r\\n                .mul(fullAuctionedAmount)\\r\\n                .div(minAuctionedBuyAmount)\\r\\n                .toUint96();\\r\\n            }\\r\\n        }\\r\\n        auctionData[auctionId].clearingPriceOrder = clearingOrder;\\r\\n\\r\\n        if (auctionData[auctionId].minFundingThreshold > currentBidSum) {\\r\\n            auctionData[auctionId].minFundingThresholdNotReached = true;\\r\\n        }\\r\\n        processFeesAndAuctioneerFunds(\\r\\n            auctionId,\\r\\n            fillVolumeOfAuctioneerOrder,\\r\\n            auctioneerId,\\r\\n            fullAuctionedAmount\\r\\n        );\\r\\n        emit AuctionCleared(\\r\\n            auctionId,\\r\\n            fillVolumeOfAuctioneerOrder,\\r\\n            uint96(currentBidSum),\\r\\n            clearingOrder\\r\\n        );\\r\\n        // Gas refunds\\r\\n        auctionAccessManager[auctionId] = address(0);\\r\\n        delete auctionAccessData[auctionId];\\r\\n        auctionData[auctionId].initialAuctionOrder = bytes32(0);\\r\\n        auctionData[auctionId].interimOrder = bytes32(0);\\r\\n        auctionData[auctionId].interimSumBidAmount = uint256(0);\\r\\n        auctionData[auctionId].minimumBiddingAmountPerOrder = uint256(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n\\r\\n    First we will remove the given orders from contract sell orders list.\\r\\n    **/\\r\\n    function claimFromParticipantOrder(\\r\\n        uint256 auctionId,\\r\\n        bytes32[] memory orders\\r\\n    )\\r\\n        public\\r\\n        atStageFinished(auctionId)\\r\\n        returns (\\r\\n            uint256 sumAuctioningTokenAmount,\\r\\n            uint256 sumBiddingTokenAmount\\r\\n        )\\r\\n    {\\r\\n        for (uint256 i = 0; i < orders.length; i++) {\\r\\n            // Note: we don't need to keep any information about the node since\\r\\n            // no new elements need to be inserted.\\r\\n            require(\\r\\n                sellOrders[auctionId].remove(orders[i]),\\r\\n                \\\"order is no longer claimable\\\"\\r\\n            );\\r\\n        }\\r\\n        AuctionData memory auction = auctionData[auctionId];\\r\\n        (, uint96 priceNumerator, uint96 priceDenominator) = auction\\r\\n        .clearingPriceOrder\\r\\n        .decodeOrder();\\r\\n\\r\\n        (uint64 userId, , ) = orders[0].decodeOrder();\\r\\n        bool minFundingThresholdNotReached = auctionData[auctionId]\\r\\n        .minFundingThresholdNotReached;\\r\\n        for (uint256 i = 0; i < orders.length; i++) {\\r\\n            (uint64 userIdOrder, uint96 buyAmount, uint96 sellAmount) = orders[\\r\\n                i\\r\\n            ]\\r\\n            .decodeOrder();\\r\\n            require(\\r\\n                userIdOrder == userId,\\r\\n                \\\"only allowed to claim for same user\\\"\\r\\n            );\\r\\n            if (minFundingThresholdNotReached) {\\r\\n                //[10]\\r\\n                sumBiddingTokenAmount = sumBiddingTokenAmount.add(sellAmount);\\r\\n            } else {\\r\\n                //[23]\\r\\n                if (orders[i] == auction.clearingPriceOrder) {\\r\\n                    //[25]\\r\\n                    sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\\r\\n                        auction\\r\\n                        .volumeClearingPriceOrder\\r\\n                        .mul(priceNumerator)\\r\\n                        .div(priceDenominator)\\r\\n                    );\\r\\n                    sumBiddingTokenAmount = sumBiddingTokenAmount.add(\\r\\n                        sellAmount.sub(auction.volumeClearingPriceOrder)\\r\\n                    );\\r\\n                } else {\\r\\n                    if (orders[i].smallerThan(auction.clearingPriceOrder)) {\\r\\n                        //[17]\\r\\n                        sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\\r\\n                            sellAmount.mul(priceNumerator).div(priceDenominator)\\r\\n                        );\\r\\n                    } else {\\r\\n                        //[24]\\r\\n                        sumBiddingTokenAmount = sumBiddingTokenAmount.add(\\r\\n                            sellAmount\\r\\n                        );\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            emit ClaimedFromOrder(auctionId, userId, buyAmount, sellAmount);\\r\\n        }\\r\\n        sendOutTokens(\\r\\n            auctionId,\\r\\n            sumAuctioningTokenAmount,\\r\\n            sumBiddingTokenAmount,\\r\\n            userId\\r\\n        ); //[3]\\r\\n    }\\r\\n\\r\\n    function processFeesAndAuctioneerFunds(\\r\\n        uint256 auctionId,\\r\\n        uint256 fillVolumeOfAuctioneerOrder,\\r\\n        uint64 auctioneerId,\\r\\n        uint96 fullAuctionedAmount\\r\\n    ) internal {\\r\\n        uint256 feeAmount = fullAuctionedAmount\\r\\n        .mul(auctionData[auctionId].feeNumerator)\\r\\n        .div(FEE_DENOMINATOR); //[20]\\r\\n        if (auctionData[auctionId].minFundingThresholdNotReached) {\\r\\n            sendOutTokens(\\r\\n                auctionId,\\r\\n                fullAuctionedAmount.add(feeAmount),\\r\\n                0,\\r\\n                auctioneerId\\r\\n            ); //[4]\\r\\n        } else {\\r\\n            //[11]\\r\\n            (, uint96 priceNumerator, uint96 priceDenominator) = auctionData[\\r\\n                auctionId\\r\\n            ]\\r\\n            .clearingPriceOrder\\r\\n            .decodeOrder();\\r\\n            // unsettledAuctionTokens = fullAuctionedAmount - fillVolumeOfAuctioneerOrder\\r\\n            uint256 unsettledAuctionTokens = fullAuctionedAmount.sub(\\r\\n                fillVolumeOfAuctioneerOrder\\r\\n            );\\r\\n            // auctioningTokenAmount = unsettledAuctionTokens + ( ( feeAmount * unsettledAuctionTokens ) / fullAuctionedAmount)\\r\\n            uint256 auctioningTokenAmount = unsettledAuctionTokens.add(\\r\\n                feeAmount.mul(unsettledAuctionTokens).div(fullAuctionedAmount)\\r\\n            );\\r\\n            // biddingTokenAmount = (fillVolumeOfAuctioneerOrder * priceDenominator) / priceNumerator\\r\\n            uint256 biddingTokenAmount = fillVolumeOfAuctioneerOrder\\r\\n            .mul(priceDenominator)\\r\\n            .div(priceNumerator);\\r\\n            sendOutTokens(\\r\\n                auctionId,\\r\\n                auctioningTokenAmount,\\r\\n                biddingTokenAmount,\\r\\n                auctioneerId\\r\\n            ); //[5]\\r\\n            sendOutTokens(\\r\\n                auctionId,\\r\\n                // (feeAmount * fillVolumeOfAuctioneerOrder) / fullAuctionedAmount\\r\\n                feeAmount.mul(fillVolumeOfAuctioneerOrder).div(\\r\\n                    fullAuctionedAmount\\r\\n                ),\\r\\n                0,\\r\\n                feeReceiverUserId\\r\\n            ); //[7]\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* send back either auctioning or bidding tokens to the given user.\\r\\n    Transfers out occur on:\\r\\n    1- order cancellation,giving back the amount bid by the user in an order.\\r\\n    2- users claiming funds after the auction is concluded \\r\\n    3- auction closing and sending\\r\\n        1-funds to the auctioneer\\r\\n        2-fees to the dedicated address\\r\\n    */\\r\\n    function sendOutTokens(\\r\\n        uint256 auctionId,\\r\\n        uint256 auctioningTokenAmount,\\r\\n        uint256 biddingTokenAmount,\\r\\n        uint64 userId\\r\\n    ) internal {\\r\\n        address userAddress = registeredUsers.getAddressAt(userId);\\r\\n        if (auctioningTokenAmount > 0) {\\r\\n            auctionData[auctionId].auctioningToken.safeTransfer(\\r\\n                userAddress,\\r\\n                auctioningTokenAmount\\r\\n            );\\r\\n        }\\r\\n        if (biddingTokenAmount > 0) {\\r\\n            auctionData[auctionId].biddingToken.safeTransfer(\\r\\n                userAddress,\\r\\n                biddingTokenAmount\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function registerUser(address user) public returns (uint64 userId) {\\r\\n        numUsers = numUsers.add(1).toUint64();\\r\\n        require(\\r\\n            registeredUsers.insert(numUsers, user),\\r\\n            \\\"User already registered\\\"\\r\\n        );\\r\\n        userId = numUsers;\\r\\n        emit UserRegistration(user, userId);\\r\\n    }\\r\\n\\r\\n    function getUserId(address user) public returns (uint64 userId) {\\r\\n        if (registeredUsers.hasAddress(user)) {\\r\\n            userId = registeredUsers.getId(user);\\r\\n        } else {\\r\\n            userId = registerUser(user);\\r\\n            emit NewUser(userId, user);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getSecondsRemainingInBatch(uint256 auctionId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (auctionData[auctionId].auctionEndDate < block.timestamp) {\\r\\n            return 0;\\r\\n        }\\r\\n        return auctionData[auctionId].auctionEndDate.sub(block.timestamp);\\r\\n    }\\r\\n\\r\\n    function containsOrder(uint256 auctionId, bytes32 order)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return sellOrders[auctionId].contains(order);\\r\\n    }\\r\\n\\r\\n    //--------------------------------------------------------\\r\\n    // Documents\\r\\n    //--------------------------------------------------------\\r\\n\\r\\n    function setDocument(string calldata _name, string calldata _data)\\r\\n        external onlyOwner()\\r\\n    {\\r\\n        _setDocument(_name, _data);\\r\\n    }\\r\\n\\r\\n    // function setDocuments(string[] calldata _name, string[] calldata _data) external {\\r\\n    //     require(hasAdminRole(msg.sender) );\\r\\n    //     for (uint256 i = 0; i < _name.length; i++) {\\r\\n    //         _setDocument( _name[i], _data[i]);\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    function removeDocument(string calldata _name) external onlyOwner() {\\r\\n        _removeDocument(_name);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdc769a09031d67952d26eefad1b2aeee4ef107f99c8c48461e231fb676add9d5\",\"license\":\"MIT\"},\"contracts/Utils/Documents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @title Standard implementation of ERC1643 Document management\\r\\n */\\r\\ncontract Documents {\\r\\n    struct Document {\\r\\n        uint32 docIndex; // Store the document name indexes\\r\\n        uint64 lastModified; // Timestamp at which document details was last modified\\r\\n        string data; // data of the document that exist off-chain\\r\\n    }\\r\\n\\r\\n    // mapping to store the documents details in the document\\r\\n    mapping(string => Document) internal _documents;\\r\\n    // mapping to store the document name indexes\\r\\n    mapping(string => uint32) internal _docIndexes;\\r\\n    // Array use to store all the document name present in the contracts\\r\\n    bytes32[] private _docNames;\\r\\n\\r\\n    // Document Events\\r\\n    event DocumentRemoved(string indexed _name, string _data);\\r\\n    event DocumentUpdated(string indexed _name, string _data);\\r\\n\\r\\n    /**\\r\\n     * @notice Used to attach a new document to the contract, or update the data or hash of an existing attached document\\r\\n     * @dev Can only be executed by the owner of the contract.\\r\\n     * @param _name Name of the document. It should be unique always\\r\\n     * @param _data Off-chain data of the document from where it is accessible to investors/advisors to read.\\r\\n     */\\r\\n    function _setDocument(string calldata _name, string calldata _data)\\r\\n        internal\\r\\n    {\\r\\n        require(bytes(_name).length > 0, \\\"Zero name is not allowed\\\");\\r\\n        require(bytes(_data).length > 0, \\\"Should not be a empty data\\\");\\r\\n        // Document storage document = _documents[_name];\\r\\n        if (_documents[_name].lastModified == uint64(0)) {\\r\\n            _docNames.push(stringToBytes32(_name));\\r\\n            _documents[_name].docIndex = uint32(_docNames.length);\\r\\n        }\\r\\n        _documents[_name] = Document(\\r\\n            _documents[_name].docIndex,\\r\\n            uint64(block.timestamp),\\r\\n            _data\\r\\n        );\\r\\n        emit DocumentUpdated(_name, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to remove an existing document from the contract by giving the name of the document.\\r\\n     * @dev Can only be executed by the owner of the contract.\\r\\n     * @param _name Name of the document. It should be unique always\\r\\n     */\\r\\n\\r\\n    function _removeDocument(string calldata _name) internal {\\r\\n        require(\\r\\n            _documents[_name].lastModified != uint64(0),\\r\\n            \\\"Document should exist\\\"\\r\\n        );\\r\\n        uint32 index = _documents[_name].docIndex - 1;\\r\\n        if (index != _docNames.length - 1) {\\r\\n            _docNames[index] = _docNames[_docNames.length - 1];\\r\\n            _documents[bytes32ToString(_docNames[index])].docIndex = index + 1;\\r\\n        }\\r\\n        _docNames.pop();\\r\\n        emit DocumentRemoved(_name, _documents[_name].data);\\r\\n        delete _documents[_name];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to return the details of a document with a known name (`string`).\\r\\n     * @param _name Name of the document\\r\\n     * @return string The data associated with the document.\\r\\n     * @return uint256 the timestamp at which the document was last modified.\\r\\n     */\\r\\n    function getDocument(string calldata _name)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory, uint256)\\r\\n    {\\r\\n        return (\\r\\n            _documents[_name].data,\\r\\n            uint256(_documents[_name].lastModified)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to retrieve a full list of documents attached to the smart contract.\\r\\n     * @return string List of all documents names present in the contract.\\r\\n     */\\r\\n    function getAllDocuments() external view returns (bytes32[] memory) {\\r\\n        return _docNames;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to retrieve the total documents in the smart contract.\\r\\n     * @return uint256 Count of the document names present in the contract.\\r\\n     */\\r\\n    function getDocumentCount() external view returns (uint256) {\\r\\n        return _docNames.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to retrieve the document name from index in the smart contract.\\r\\n     * @return string Name of the document name.\\r\\n     */\\r\\n    function getDocumentName(uint256 _index)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_index < _docNames.length, \\\"Index out of bounds\\\");\\r\\n        return bytes32ToString(_docNames[_index]);\\r\\n    }\\r\\n\\r\\n    function stringToBytes32(string memory source)\\r\\n        public\\r\\n        pure\\r\\n        returns (bytes32 result)\\r\\n    {\\r\\n        bytes memory tempEmptyStringTest = bytes(source);\\r\\n        if (tempEmptyStringTest.length == 0) {\\r\\n            return 0x0;\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            result := mload(add(source, 32))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\\r\\n        uint8 i = 0;\\r\\n        while(i < 32 && _bytes32[i] != 0) {\\r\\n            i++;\\r\\n        }\\r\\n        bytes memory bytesArray = new bytes(i);\\r\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\r\\n            bytesArray[i] = _bytes32[i];\\r\\n        }\\r\\n        return string(bytesArray);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x953d363f56a1175a612eb984821c4e9d545d6052990118d35efceca11aec4ea7\",\"license\":\"MIT\"},\"contracts/interfaces/AllowListVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.8;\\r\\n\\r\\nlibrary AllowListVerifierHelper {\\r\\n    /// @dev Value returned by a call to `isAllowed` if the check\\r\\n    /// was successful. The value is defined as:\\r\\n    /// bytes4(keccak256(\\\"isAllowed(address,uint256,bytes)\\\"))\\r\\n    bytes4 internal constant MAGICVALUE = 0x19a05a7e;\\r\\n}\\r\\n\\r\\n///\\r\\n/// @dev Standardized interface for an allowList manager for annexAuction\\r\\n/// The interface was inspired by EIP-1271\\r\\ninterface AllowListVerifier {\\r\\n    /// @dev Should return whether the a specific user has access to an auction\\r\\n    /// by returning the magic value from AllowListVerifierHelper\\r\\n    function isAllowed(\\r\\n        address user,\\r\\n        uint256 auctionId,\\r\\n        bytes calldata callData\\r\\n    ) external view returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xaa043d37fc3845f9fdb7d2de57bea5b4a8a4118c372e4aa97a5d1e93a4530e86\",\"license\":\"MIT\"},\"contracts/libraries/IdToAddressBiMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n// Contract does not have test coverage, as it was nearly copied from:\\r\\n// https://github.com/gnosis/solidity-data-structures/blob/master/contracts/libraries/IdToAddressBiMap.sol\\r\\n// The only change is uint16 -> uint64\\r\\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\nlibrary IdToAddressBiMap {\\r\\n    struct Data {\\r\\n        mapping(uint64 => address) idToAddress;\\r\\n        mapping(address => uint64) addressToId;\\r\\n    }\\r\\n\\r\\n    function hasId(Data storage self, uint64 id) internal view returns (bool) {\\r\\n        return self.idToAddress[id + 1] != address(0);\\r\\n    }\\r\\n\\r\\n    function hasAddress(Data storage self, address addr)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return self.addressToId[addr] != 0;\\r\\n    }\\r\\n\\r\\n    function getAddressAt(Data storage self, uint64 id)\\r\\n        internal\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        require(hasId(self, id), \\\"Must have ID to get Address\\\");\\r\\n        return self.idToAddress[id + 1];\\r\\n    }\\r\\n\\r\\n    function getId(Data storage self, address addr)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint64)\\r\\n    {\\r\\n        require(hasAddress(self, addr), \\\"Must have Address to get ID\\\");\\r\\n        return self.addressToId[addr] - 1;\\r\\n    }\\r\\n\\r\\n    function insert(\\r\\n        Data storage self,\\r\\n        uint64 id,\\r\\n        address addr\\r\\n    ) internal returns (bool) {\\r\\n        require(addr != address(0), \\\"Cannot insert zero address\\\");\\r\\n        require(id != uint64(-1), \\\"Cannot insert max uint64\\\");\\r\\n        // Ensure bijectivity of the mappings\\r\\n        if (\\r\\n            self.addressToId[addr] != 0 ||\\r\\n            self.idToAddress[id + 1] != address(0)\\r\\n        ) {\\r\\n            return false;\\r\\n        }\\r\\n        self.idToAddress[id + 1] = addr;\\r\\n        self.addressToId[addr] = id + 1;\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9c0531ea5cf943196bea8eec4333b01d499af6194f1a5b3804d229b983e4a29f\",\"license\":\"MIT\"},\"contracts/libraries/IterableOrderedOrderSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary IterableOrderedOrderSet {\\r\\n    using SafeMath for uint96;\\r\\n    using IterableOrderedOrderSet for bytes32;\\r\\n\\r\\n    // represents smallest possible value for an order under comparison of fn smallerThan()\\r\\n    bytes32 internal constant QUEUE_START =\\r\\n        0x0000000000000000000000000000000000000000000000000000000000000001;\\r\\n    // represents highest possible value for an order under comparison of fn smallerThan()\\r\\n    bytes32 internal constant QUEUE_END =\\r\\n        0xffffffffffffffffffffffffffffffffffffffff000000000000000000000001;\\r\\n\\r\\n    /// The struct is used to implement a modified version of a doubly linked\\r\\n    /// list with sorted elements. The list starts from QUEUE_START to\\r\\n    /// QUEUE_END, and each node keeps track of its predecessor and successor.\\r\\n    /// Nodes can be added or removed.\\r\\n    ///\\r\\n    /// `next` and `prev` have a different role. The list is supposed to be\\r\\n    /// traversed with `next`. If `next` is empty, the node is not part of the\\r\\n    /// list. However, `prev` might be set for elements that are not in the\\r\\n    /// list, which is why it should not be used for traversing. Having a `prev`\\r\\n    /// set for elements not in the list is used to keep track of the history of\\r\\n    /// the position in the list of a removed element.\\r\\n    struct Data {\\r\\n        mapping(bytes32 => bytes32) nextMap;\\r\\n        mapping(bytes32 => bytes32) prevMap;\\r\\n    }\\r\\n\\r\\n    struct Order {\\r\\n        uint64 owner;\\r\\n        uint96 buyAmount;\\r\\n        uint96 sellAmount;\\r\\n    }\\r\\n\\r\\n    function initializeEmptyList(Data storage self) internal {\\r\\n        self.nextMap[QUEUE_START] = QUEUE_END;\\r\\n        self.prevMap[QUEUE_END] = QUEUE_START;\\r\\n    }\\r\\n\\r\\n    function isEmpty(Data storage self) internal view returns (bool) {\\r\\n        return self.nextMap[QUEUE_START] == QUEUE_END;\\r\\n    }\\r\\n\\r\\n    function insert(\\r\\n        Data storage self,\\r\\n        bytes32 elementToInsert,\\r\\n        bytes32 elementBeforeNewOne\\r\\n    ) internal returns (bool) {\\r\\n        (, , uint96 denominator) = decodeOrder(elementToInsert);\\r\\n        require(denominator != uint96(0), \\\"Inserting zero is not supported\\\");\\r\\n        require(\\r\\n            elementToInsert != QUEUE_START && elementToInsert != QUEUE_END,\\r\\n            \\\"Inserting element is not valid\\\"\\r\\n        );\\r\\n        if (contains(self, elementToInsert)) {\\r\\n            return false;\\r\\n        }\\r\\n        if (\\r\\n            elementBeforeNewOne != QUEUE_START &&\\r\\n            self.prevMap[elementBeforeNewOne] == bytes32(0)\\r\\n        ) {\\r\\n            return false;\\r\\n        }\\r\\n        if (!elementBeforeNewOne.smallerThan(elementToInsert)) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        // `elementBeforeNewOne` might have been removed during the time it\\r\\n        // took to the transaction calling this function to be mined, so\\r\\n        // the new order cannot be appended directly to this. We follow the\\r\\n        // history of previous links backwards until we find an element in\\r\\n        // the list from which to start our search.\\r\\n        // Note that following the link backwards returns elements that are\\r\\n        // before `elementBeforeNewOne` in sorted order.\\r\\n        while (self.nextMap[elementBeforeNewOne] == bytes32(0)) {\\r\\n            elementBeforeNewOne = self.prevMap[elementBeforeNewOne];\\r\\n        }\\r\\n\\r\\n        // `elementBeforeNewOne` belongs now to the linked list. We search the\\r\\n        // largest entry that is smaller than the element to insert.\\r\\n        bytes32 previous;\\r\\n        bytes32 current = elementBeforeNewOne;\\r\\n        do {\\r\\n            previous = current;\\r\\n            current = self.nextMap[current];\\r\\n        } while (current.smallerThan(elementToInsert));\\r\\n        // Note: previous < elementToInsert < current\\r\\n        self.nextMap[previous] = elementToInsert;\\r\\n        self.prevMap[current] = elementToInsert;\\r\\n        self.prevMap[elementToInsert] = previous;\\r\\n        self.nextMap[elementToInsert] = current;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// The element is removed from the linked list, but the node retains\\r\\n    /// information on which predecessor it had, so that a node in the chain\\r\\n    /// can be reached by following the predecessor chain of deleted elements.\\r\\n    function removeKeepHistory(Data storage self, bytes32 elementToRemove)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (!contains(self, elementToRemove)) {\\r\\n            return false;\\r\\n        }\\r\\n        bytes32 previousElement = self.prevMap[elementToRemove];\\r\\n        bytes32 nextElement = self.nextMap[elementToRemove];\\r\\n        self.nextMap[previousElement] = nextElement;\\r\\n        self.prevMap[nextElement] = previousElement;\\r\\n        self.nextMap[elementToRemove] = bytes32(0);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// Remove an element from the chain, clearing all related storage.\\r\\n    /// Note that no elements should be inserted using as a reference point a\\r\\n    /// node deleted after calling `remove`, since an element in the `prev`\\r\\n    /// chain might be missing.\\r\\n    function remove(Data storage self, bytes32 elementToRemove)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        bool result = removeKeepHistory(self, elementToRemove);\\r\\n        if (result) {\\r\\n            self.prevMap[elementToRemove] = bytes32(0);\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function contains(Data storage self, bytes32 value)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (value == QUEUE_START) {\\r\\n            return false;\\r\\n        }\\r\\n        // Note: QUEUE_END is not contained in the list since it has no\\r\\n        // successor.\\r\\n        return self.nextMap[value] != bytes32(0);\\r\\n    }\\r\\n\\r\\n    // @dev orders are ordered by\\r\\n    // 1. their price - buyAmount/sellAmount\\r\\n    // 2. by the sellAmount\\r\\n    // 3. their userId,\\r\\n    function smallerThan(bytes32 orderLeft, bytes32 orderRight)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        (\\r\\n            uint64 userIdLeft,\\r\\n            uint96 priceNumeratorLeft,\\r\\n            uint96 priceDenominatorLeft\\r\\n        ) = decodeOrder(orderLeft);\\r\\n        (\\r\\n            uint64 userIdRight,\\r\\n            uint96 priceNumeratorRight,\\r\\n            uint96 priceDenominatorRight\\r\\n        ) = decodeOrder(orderRight);\\r\\n\\r\\n        if (\\r\\n            priceNumeratorLeft.mul(priceDenominatorRight) <\\r\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\r\\n        ) return true;\\r\\n        if (\\r\\n            priceNumeratorLeft.mul(priceDenominatorRight) >\\r\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\r\\n        ) return false;\\r\\n\\r\\n        if (priceNumeratorLeft < priceNumeratorRight) return true;\\r\\n        if (priceNumeratorLeft > priceNumeratorRight) return false;\\r\\n        require(\\r\\n            userIdLeft != userIdRight,\\r\\n            \\\"user is not allowed to place same order twice\\\"\\r\\n        );\\r\\n        if (userIdLeft < userIdRight) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function first(Data storage self) internal view returns (bytes32) {\\r\\n        require(!isEmpty(self), \\\"Trying to get first from empty set\\\");\\r\\n        return self.nextMap[QUEUE_START];\\r\\n    }\\r\\n\\r\\n    function next(Data storage self, bytes32 value)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        require(value != QUEUE_END, \\\"Trying to get next of last element\\\");\\r\\n        bytes32 nextElement = self.nextMap[value];\\r\\n        require(\\r\\n            nextElement != bytes32(0),\\r\\n            \\\"Trying to get next of non-existent element\\\"\\r\\n        );\\r\\n        return nextElement;\\r\\n    }\\r\\n\\r\\n    function decodeOrder(bytes32 _orderData)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint64 userId,\\r\\n            uint96 buyAmount,\\r\\n            uint96 sellAmount\\r\\n        )\\r\\n    {\\r\\n        // Note: converting to uint discards the binary digits that do not fit\\r\\n        // the type.\\r\\n        userId = uint64(uint256(_orderData) >> 192);\\r\\n        buyAmount = uint96(uint256(_orderData) >> 96);\\r\\n        sellAmount = uint96(uint256(_orderData));\\r\\n    }\\r\\n\\r\\n    function encodeOrder(\\r\\n        uint64 userId,\\r\\n        uint96 buyAmount,\\r\\n        uint96 sellAmount\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return\\r\\n            bytes32(\\r\\n                (uint256(userId) << 192) +\\r\\n                    (uint256(buyAmount) << 96) +\\r\\n                    uint256(sellAmount)\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf0a5b1064071be9bd8ae6ed528560022a5ed7b8a5534d5b414a6394030e1e8ba\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Logic was copied and modified from here: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/SafeCast.sol\\r\\n */\\r\\nlibrary SafeCast {\\r\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\r\\n        require(value < 2**96, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\r\\n        return uint96(value);\\r\\n    }\\r\\n\\r\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\r\\n        require(value < 2**64, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\r\\n        return uint64(value);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8603964a546014260a4acb3b8b65ea73d572a4869de0306a06c40ea9e91f79a1\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 7,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "_owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2961,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "_documents",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_string_memory_ptr,t_struct(Document)2957_storage)"
          },
          {
            "astId": 2965,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "_docIndexes",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_string_memory_ptr,t_uint32)"
          },
          {
            "astId": 2968,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "_docNames",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1387,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "sellOrders",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(Data)3706_storage)"
          },
          {
            "astId": 1391,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "auctionData",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_struct(AuctionData)1383_storage)"
          },
          {
            "astId": 1395,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "auctionAccessManager",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 1399,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "auctionAccessData",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_bytes_storage)"
          },
          {
            "astId": 1401,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "registeredUsers",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(Data)3515_storage"
          },
          {
            "astId": 1403,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "numUsers",
            "offset": 0,
            "slot": "10",
            "type": "t_uint64"
          },
          {
            "astId": 1405,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "auctionCounter",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 1414,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "feeNumerator",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 1420,
            "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
            "label": "feeReceiverUserId",
            "offset": 0,
            "slot": "13",
            "type": "t_uint64"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "base": "t_bytes32",
            "encoding": "dynamic_array",
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_bytes_storage": {
            "encoding": "bytes",
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20)615": {
            "encoding": "inplace",
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_uint64)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint64)",
            "numberOfBytes": "32",
            "value": "t_uint64"
          },
          "t_mapping(t_bytes32,t_bytes32)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => bytes32)",
            "numberOfBytes": "32",
            "value": "t_bytes32"
          },
          "t_mapping(t_string_memory_ptr,t_struct(Document)2957_storage)": {
            "encoding": "mapping",
            "key": "t_string_memory_ptr",
            "label": "mapping(string => struct Documents.Document)",
            "numberOfBytes": "32",
            "value": "t_struct(Document)2957_storage"
          },
          "t_mapping(t_string_memory_ptr,t_uint32)": {
            "encoding": "mapping",
            "key": "t_string_memory_ptr",
            "label": "mapping(string => uint32)",
            "numberOfBytes": "32",
            "value": "t_uint32"
          },
          "t_mapping(t_uint256,t_address)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_mapping(t_uint256,t_bytes_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => bytes)",
            "numberOfBytes": "32",
            "value": "t_bytes_storage"
          },
          "t_mapping(t_uint256,t_struct(AuctionData)1383_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct AnnexBatchAuction.AuctionData)",
            "numberOfBytes": "32",
            "value": "t_struct(AuctionData)1383_storage"
          },
          "t_mapping(t_uint256,t_struct(Data)3706_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct IterableOrderedOrderSet.Data)",
            "numberOfBytes": "32",
            "value": "t_struct(Data)3706_storage"
          },
          "t_mapping(t_uint64,t_address)": {
            "encoding": "mapping",
            "key": "t_uint64",
            "label": "mapping(uint64 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_string_memory_ptr": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AuctionData)1383_storage": {
            "encoding": "inplace",
            "label": "struct AnnexBatchAuction.AuctionData",
            "members": [
              {
                "astId": 1356,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "auctioningToken",
                "offset": 0,
                "slot": "0",
                "type": "t_contract(IERC20)615"
              },
              {
                "astId": 1358,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "biddingToken",
                "offset": 0,
                "slot": "1",
                "type": "t_contract(IERC20)615"
              },
              {
                "astId": 1360,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "orderCancellationEndDate",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 1362,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "auctionEndDate",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              },
              {
                "astId": 1364,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "initialAuctionOrder",
                "offset": 0,
                "slot": "4",
                "type": "t_bytes32"
              },
              {
                "astId": 1366,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "minimumBiddingAmountPerOrder",
                "offset": 0,
                "slot": "5",
                "type": "t_uint256"
              },
              {
                "astId": 1368,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "interimSumBidAmount",
                "offset": 0,
                "slot": "6",
                "type": "t_uint256"
              },
              {
                "astId": 1370,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "interimOrder",
                "offset": 0,
                "slot": "7",
                "type": "t_bytes32"
              },
              {
                "astId": 1372,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "clearingPriceOrder",
                "offset": 0,
                "slot": "8",
                "type": "t_bytes32"
              },
              {
                "astId": 1374,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "volumeClearingPriceOrder",
                "offset": 0,
                "slot": "9",
                "type": "t_uint96"
              },
              {
                "astId": 1376,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "minFundingThresholdNotReached",
                "offset": 12,
                "slot": "9",
                "type": "t_bool"
              },
              {
                "astId": 1378,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "isAtomicClosureAllowed",
                "offset": 13,
                "slot": "9",
                "type": "t_bool"
              },
              {
                "astId": 1380,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "feeNumerator",
                "offset": 0,
                "slot": "10",
                "type": "t_uint256"
              },
              {
                "astId": 1382,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "minFundingThreshold",
                "offset": 0,
                "slot": "11",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(Data)3515_storage": {
            "encoding": "inplace",
            "label": "struct IdToAddressBiMap.Data",
            "members": [
              {
                "astId": 3510,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "idToAddress",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_uint64,t_address)"
              },
              {
                "astId": 3514,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "addressToId",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint64)"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Data)3706_storage": {
            "encoding": "inplace",
            "label": "struct IterableOrderedOrderSet.Data",
            "members": [
              {
                "astId": 3701,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "nextMap",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_bytes32,t_bytes32)"
              },
              {
                "astId": 3705,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "prevMap",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_bytes32,t_bytes32)"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Document)2957_storage": {
            "encoding": "inplace",
            "label": "struct Documents.Document",
            "members": [
              {
                "astId": 2952,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "docIndex",
                "offset": 0,
                "slot": "0",
                "type": "t_uint32"
              },
              {
                "astId": 2954,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "lastModified",
                "offset": 4,
                "slot": "0",
                "type": "t_uint64"
              },
              {
                "astId": 2956,
                "contract": "contracts/AnnexBatchAuction.sol:AnnexBatchAuction",
                "label": "data",
                "offset": 0,
                "slot": "1",
                "type": "t_string_storage"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "encoding": "inplace",
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "encoding": "inplace",
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint96": {
            "encoding": "inplace",
            "label": "uint96",
            "numberOfBytes": "12"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "claimFromParticipantOrder(uint256,bytes32[])": {
            "notice": "First we will remove the given orders from contract sell orders list.*"
          },
          "getAllDocuments()": {
            "notice": "Used to retrieve a full list of documents attached to the smart contract."
          },
          "getDocument(string)": {
            "notice": "Used to return the details of a document with a known name (`string`)."
          },
          "getDocumentCount()": {
            "notice": "Used to retrieve the total documents in the smart contract."
          },
          "getDocumentName(uint256)": {
            "notice": "Used to retrieve the document name from index in the smart contract."
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/AnnexBatchAuction.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.8;\\r\\n// pragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\nimport \\\"./libraries/IterableOrderedOrderSet.sol\\\";\\r\\nimport \\\"./interfaces/AllowListVerifier.sol\\\";\\r\\n// import \\\"./Access/AnnexAccessControls.sol\\\";\\r\\nimport \\\"./libraries/IdToAddressBiMap.sol\\\";\\r\\nimport \\\"./libraries/SafeCast.sol\\\";\\r\\nimport \\\"./Utils/Documents.sol\\\";\\r\\n\\r\\ncontract AnnexBatchAuction is Ownable, Documents {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint64;\\r\\n    using SafeMath for uint96;\\r\\n    using SafeMath for uint256;\\r\\n    using SafeCast for uint256;\\r\\n    using IterableOrderedOrderSet for IterableOrderedOrderSet.Data;\\r\\n    using IterableOrderedOrderSet for bytes32;\\r\\n    using IdToAddressBiMap for IdToAddressBiMap.Data;\\r\\n\\r\\n    modifier atStageOrderPlacement(uint256 auctionId) {\\r\\n        require(\\r\\n            block.timestamp < auctionData[auctionId].auctionEndDate,\\r\\n            \\\"no longer in order placement phase\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier atStageOrderPlacementAndCancelation(uint256 auctionId) {\\r\\n        require(\\r\\n            block.timestamp < auctionData[auctionId].orderCancellationEndDate,\\r\\n            \\\"no longer in order placement and cancelation phase\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier atStageSolutionSubmission(uint256 auctionId) {\\r\\n        {\\r\\n            uint256 auctionEndDate = auctionData[auctionId].auctionEndDate;\\r\\n            require(\\r\\n                auctionEndDate != 0 &&\\r\\n                    block.timestamp >= auctionEndDate &&\\r\\n                    auctionData[auctionId].clearingPriceOrder == bytes32(0),\\r\\n                \\\"Auction not in solution submission phase\\\"\\r\\n            );\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier atStageFinished(uint256 auctionId) {\\r\\n        require(\\r\\n            auctionData[auctionId].clearingPriceOrder != bytes32(0),\\r\\n            \\\"Auction not yet finished\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event NewSellOrder(\\r\\n        uint256 indexed auctionId,\\r\\n        uint64 indexed userId,\\r\\n        uint96 buyAmount,\\r\\n        uint96 sellAmount\\r\\n    );\\r\\n    event CancellationSellOrder(\\r\\n        uint256 indexed auctionId,\\r\\n        uint64 indexed userId,\\r\\n        uint96 buyAmount,\\r\\n        uint96 sellAmount\\r\\n    );\\r\\n    event ClaimedFromOrder(\\r\\n        uint256 indexed auctionId,\\r\\n        uint64 indexed userId,\\r\\n        uint96 buyAmount,\\r\\n        uint96 sellAmount\\r\\n    );\\r\\n    event NewUser(uint64 indexed userId, address indexed userAddress);\\r\\n    event NewAuction(\\r\\n        uint256 indexed auctionId,\\r\\n        IERC20 indexed _auctioningToken,\\r\\n        IERC20 indexed _biddingToken,\\r\\n        uint256 orderCancellationEndDate,\\r\\n        uint256 auctionEndDate,\\r\\n        uint64 userId,\\r\\n        uint96 _auctionedSellAmount,\\r\\n        uint96 _minBuyAmount,\\r\\n        uint256 minimumBiddingAmountPerOrder,\\r\\n        uint256 minFundingThreshold,\\r\\n        address allowListContract,\\r\\n        bytes allowListData\\r\\n    );\\r\\n    event AuctionCleared(\\r\\n        uint256 indexed auctionId,\\r\\n        uint96 soldAuctioningTokens,\\r\\n        uint96 soldBiddingTokens,\\r\\n        bytes32 clearingPriceOrder\\r\\n    );\\r\\n    event UserRegistration(address indexed user, uint64 userId);\\r\\n\\r\\n    /**\\r\\n    @param {auctioningToken}\\r\\n    **/\\r\\n    struct AuctionData {\\r\\n        IERC20 auctioningToken;\\r\\n        IERC20 biddingToken;\\r\\n        uint256 orderCancellationEndDate;\\r\\n        uint256 auctionEndDate;\\r\\n        bytes32 initialAuctionOrder;\\r\\n        uint256 minimumBiddingAmountPerOrder;\\r\\n        uint256 interimSumBidAmount;\\r\\n        bytes32 interimOrder;\\r\\n        bytes32 clearingPriceOrder;\\r\\n        uint96 volumeClearingPriceOrder;\\r\\n        bool minFundingThresholdNotReached;\\r\\n        bool isAtomicClosureAllowed;\\r\\n        uint256 feeNumerator;\\r\\n        uint256 minFundingThreshold;\\r\\n    }\\r\\n    mapping(uint256 => IterableOrderedOrderSet.Data) internal sellOrders; // Store total number of sell orders\\r\\n    mapping(uint256 => AuctionData) public auctionData; // Store auctions details\\r\\n    mapping(uint256 => address) public auctionAccessManager;\\r\\n    mapping(uint256 => bytes) public auctionAccessData;\\r\\n\\r\\n    IdToAddressBiMap.Data private registeredUsers;\\r\\n    uint64 public numUsers; // counter of users\\r\\n    uint256 public auctionCounter; // counter for auctions\\r\\n\\r\\n    constructor() public Ownable() {\\r\\n        // initAccessControls(_msgSender());\\r\\n    }\\r\\n\\r\\n    uint256 public feeNumerator = 0;\\r\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\r\\n    uint64 public feeReceiverUserId = 1;\\r\\n\\r\\n    function setFeeParameters(\\r\\n        uint256 newFeeNumerator,\\r\\n        address newfeeReceiverAddress\\r\\n    ) public onlyOwner() {\\r\\n        require(\\r\\n            newFeeNumerator <= 15,\\r\\n            \\\"Fee is not allowed to be set higher than 1.5%\\\"\\r\\n        );\\r\\n        // caution: for currently running auctions, the feeReceiverUserId is changing as well.\\r\\n        feeReceiverUserId = getUserId(newfeeReceiverAddress);\\r\\n        feeNumerator = newFeeNumerator;\\r\\n    }\\r\\n\\r\\n    // @dev: function to intiate a new auction\\r\\n    // Warning: In case the auction is expected to raise more than\\r\\n    // 2^96 units of the biddingToken, don't start the auction, as\\r\\n    // it will not be settlable. This corresponds to about 79\\r\\n    // billion DAI.\\r\\n    //\\r\\n    // Prices between biddingToken and auctioningToken are expressed by a\\r\\n    // fraction whose components are stored as uint96.\\r\\n    // Amount transfered out is no larger than amount transfered in\\r\\n    function initiateAuction(\\r\\n        IERC20 _auctioningToken,\\r\\n        IERC20 _biddingToken,\\r\\n        uint256 orderCancellationEndDate,\\r\\n        uint256 auctionEndDate,\\r\\n        uint96 _auctionedSellAmount,\\r\\n        uint96 _minBuyAmount,\\r\\n        uint256 minimumBiddingAmountPerOrder,\\r\\n        uint256 minFundingThreshold,\\r\\n        bool isAtomicClosureAllowed,\\r\\n        address accessManagerContract,\\r\\n        bytes memory accessManagerContractData\\r\\n    ) public returns (uint256) {\\r\\n        /* \\r\\n        ( _auctionedSellAmount * ( 1000 + feeNumerator ) ) / 1000\\r\\n        // withdraws sellAmount + fees\\r\\n        // i.e: autionTokens = 1000\\r\\n        // fees = 1%\\r\\n        then 1010 will be added to the contract\\r\\n        */\\r\\n        _auctioningToken.safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _auctionedSellAmount.mul(FEE_DENOMINATOR.add(feeNumerator)).div(\\r\\n                FEE_DENOMINATOR\\r\\n            ) //[0]\\r\\n        );\\r\\n        require(_auctionedSellAmount > 0, \\\"cannot auction zero tokens\\\");\\r\\n        require(_minBuyAmount > 0, \\\"tokens cannot be auctioned for free\\\");\\r\\n        require(\\r\\n            minimumBiddingAmountPerOrder > 0,\\r\\n            \\\"minimumBiddingAmountPerOrder is not allowed to be zero\\\"\\r\\n        );\\r\\n        require(\\r\\n            orderCancellationEndDate <= auctionEndDate,\\r\\n            \\\"time periods are not configured correctly\\\"\\r\\n        );\\r\\n        require(\\r\\n            auctionEndDate > block.timestamp,\\r\\n            \\\"auction end date must be in the future\\\"\\r\\n        );\\r\\n        auctionCounter = auctionCounter.add(1);\\r\\n        sellOrders[auctionCounter].initializeEmptyList();\\r\\n        uint64 userId = getUserId(msg.sender);\\r\\n        auctionData[auctionCounter] = AuctionData(\\r\\n            _auctioningToken,\\r\\n            _biddingToken,\\r\\n            orderCancellationEndDate,\\r\\n            auctionEndDate,\\r\\n            IterableOrderedOrderSet.encodeOrder(\\r\\n                userId,\\r\\n                _minBuyAmount,\\r\\n                _auctionedSellAmount\\r\\n            ),\\r\\n            minimumBiddingAmountPerOrder,\\r\\n            0,\\r\\n            IterableOrderedOrderSet.QUEUE_START,\\r\\n            bytes32(0),\\r\\n            0,\\r\\n            false,\\r\\n            isAtomicClosureAllowed,\\r\\n            feeNumerator,\\r\\n            minFundingThreshold\\r\\n        );\\r\\n        auctionAccessManager[auctionCounter] = accessManagerContract;\\r\\n        auctionAccessData[auctionCounter] = accessManagerContractData;\\r\\n        emit NewAuction(\\r\\n            auctionCounter,\\r\\n            _auctioningToken,\\r\\n            _biddingToken,\\r\\n            orderCancellationEndDate,\\r\\n            auctionEndDate,\\r\\n            userId,\\r\\n            _auctionedSellAmount,\\r\\n            _minBuyAmount,\\r\\n            minimumBiddingAmountPerOrder,\\r\\n            minFundingThreshold,\\r\\n            accessManagerContract,\\r\\n            accessManagerContractData\\r\\n        );\\r\\n        return auctionCounter;\\r\\n    }\\r\\n\\r\\n    function placeSellOrders(\\r\\n        uint256 auctionId,\\r\\n        uint96[] memory _minBuyAmounts,\\r\\n        uint96[] memory _sellAmounts,\\r\\n        bytes32[] memory _prevSellOrders,\\r\\n        bytes calldata allowListCallData\\r\\n    ) external atStageOrderPlacement(auctionId) returns (uint64 userId) {\\r\\n        return\\r\\n            _placeSellOrders(\\r\\n                auctionId,\\r\\n                _minBuyAmounts,\\r\\n                _sellAmounts,\\r\\n                _prevSellOrders,\\r\\n                allowListCallData,\\r\\n                msg.sender\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function placeSellOrdersOnBehalf(\\r\\n        uint256 auctionId,\\r\\n        uint96[] memory _minBuyAmounts,\\r\\n        uint96[] memory _sellAmounts,\\r\\n        bytes32[] memory _prevSellOrders,\\r\\n        bytes calldata allowListCallData,\\r\\n        address orderSubmitter\\r\\n    ) external atStageOrderPlacement(auctionId) returns (uint64 userId) {\\r\\n        return\\r\\n            _placeSellOrders(\\r\\n                auctionId,\\r\\n                _minBuyAmounts,\\r\\n                _sellAmounts,\\r\\n                _prevSellOrders,\\r\\n                allowListCallData,\\r\\n                orderSubmitter\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _placeSellOrders(\\r\\n        uint256 auctionId,\\r\\n        uint96[] memory _minBuyAmounts,\\r\\n        uint96[] memory _sellAmounts,\\r\\n        bytes32[] memory _prevSellOrders,\\r\\n        bytes calldata allowListCallData,\\r\\n        address orderSubmitter\\r\\n    ) internal returns (uint64 userId) {\\r\\n        {\\r\\n            address allowListManager = auctionAccessManager[auctionId];\\r\\n            if (allowListManager != address(0)) {\\r\\n                require(\\r\\n                    AllowListVerifier(allowListManager).isAllowed(\\r\\n                        orderSubmitter,\\r\\n                        auctionId,\\r\\n                        allowListCallData\\r\\n                    ) == AllowListVerifierHelper.MAGICVALUE,\\r\\n                    \\\"user not allowed to place order\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        {\\r\\n            (\\r\\n                ,\\r\\n                uint96 buyAmountOfInitialAuctionOrder,\\r\\n                uint96 sellAmountOfInitialAuctionOrder\\r\\n            ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\\r\\n            for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\\r\\n                require(\\r\\n                    _minBuyAmounts[i].mul(buyAmountOfInitialAuctionOrder) <\\r\\n                        sellAmountOfInitialAuctionOrder.mul(_sellAmounts[i]),\\r\\n                    \\\"limit price not better than mimimal offer\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        uint256 sumOfSellAmounts = 0;\\r\\n        userId = getUserId(orderSubmitter);\\r\\n        uint256 minimumBiddingAmountPerOrder = auctionData[auctionId]\\r\\n        .minimumBiddingAmountPerOrder;\\r\\n        for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\\r\\n            require(\\r\\n                _minBuyAmounts[i] > 0,\\r\\n                \\\"_minBuyAmounts must be greater than 0\\\"\\r\\n            );\\r\\n            // orders should have a minimum bid size in order to limit the gas\\r\\n            // required to compute the final price of the auction.\\r\\n            require(\\r\\n                _sellAmounts[i] > minimumBiddingAmountPerOrder,\\r\\n                \\\"order too small\\\"\\r\\n            );\\r\\n            if (\\r\\n                sellOrders[auctionId].insert(\\r\\n                    IterableOrderedOrderSet.encodeOrder(\\r\\n                        userId,\\r\\n                        _minBuyAmounts[i],\\r\\n                        _sellAmounts[i]\\r\\n                    ),\\r\\n                    _prevSellOrders[i]\\r\\n                )\\r\\n            ) {\\r\\n                sumOfSellAmounts = sumOfSellAmounts.add(_sellAmounts[i]);\\r\\n                emit NewSellOrder(\\r\\n                    auctionId,\\r\\n                    userId,\\r\\n                    _minBuyAmounts[i],\\r\\n                    _sellAmounts[i]\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        auctionData[auctionId].biddingToken.safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            sumOfSellAmounts\\r\\n        ); //[1]\\r\\n    }\\r\\n\\r\\n    function cancelSellOrders(uint256 auctionId, bytes32[] memory _sellOrders)\\r\\n        public\\r\\n        atStageOrderPlacementAndCancelation(auctionId)\\r\\n    {\\r\\n        uint64 userId = getUserId(msg.sender);\\r\\n        uint256 claimableAmount = 0;\\r\\n        for (uint256 i = 0; i < _sellOrders.length; i++) {\\r\\n            // Note: we keep the back pointer of the deleted element so that\\r\\n            // it can be used as a reference point to insert a new node.\\r\\n            bool success = sellOrders[auctionId].removeKeepHistory(\\r\\n                _sellOrders[i]\\r\\n            );\\r\\n            if (success) {\\r\\n                (\\r\\n                    uint64 userIdOfIter,\\r\\n                    uint96 buyAmountOfIter,\\r\\n                    uint96 sellAmountOfIter\\r\\n                ) = _sellOrders[i].decodeOrder();\\r\\n                require(\\r\\n                    userIdOfIter == userId,\\r\\n                    \\\"Only the user can cancel his orders\\\"\\r\\n                );\\r\\n                claimableAmount = claimableAmount.add(sellAmountOfIter);\\r\\n                emit CancellationSellOrder(\\r\\n                    auctionId,\\r\\n                    userId,\\r\\n                    buyAmountOfIter,\\r\\n                    sellAmountOfIter\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        auctionData[auctionId].biddingToken.safeTransfer(\\r\\n            msg.sender,\\r\\n            claimableAmount\\r\\n        ); //[2]\\r\\n    }\\r\\n\\r\\n    // By calling this function you can pre calculate(before auction ending) sum of total\\r\\n    // total token sold.This function will calculate sum by taking offsent of orders linked list.\\r\\n    function precalculateSellAmountSum(\\r\\n        uint256 auctionId,\\r\\n        uint256 iterationSteps\\r\\n    ) public atStageSolutionSubmission(auctionId) {\\r\\n        (, , uint96 auctioneerSellAmount) = auctionData[auctionId]\\r\\n        .initialAuctionOrder\\r\\n        .decodeOrder();\\r\\n        uint256 sumBidAmount = auctionData[auctionId].interimSumBidAmount;\\r\\n        bytes32 iterOrder = auctionData[auctionId].interimOrder;\\r\\n\\r\\n        for (uint256 i = 0; i < iterationSteps; i++) {\\r\\n            iterOrder = sellOrders[auctionId].next(iterOrder);\\r\\n            (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\\r\\n            sumBidAmount = sumBidAmount.add(sellAmountOfIter);\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            iterOrder != IterableOrderedOrderSet.QUEUE_END,\\r\\n            \\\"reached end of order list\\\"\\r\\n        );\\r\\n\\r\\n        // it is checked that not too many iteration steps were taken:\\r\\n        // require that the sum of SellAmounts times the price of the last order\\r\\n        // is not more than initially sold amount\\r\\n        (, uint96 buyAmountOfIter, uint96 sellAmountOfIter) = iterOrder\\r\\n        .decodeOrder();\\r\\n        require(\\r\\n            sumBidAmount.mul(buyAmountOfIter) <\\r\\n                auctioneerSellAmount.mul(sellAmountOfIter),\\r\\n            \\\"too many orders summed up\\\"\\r\\n        );\\r\\n\\r\\n        auctionData[auctionId].interimSumBidAmount = sumBidAmount;\\r\\n        auctionData[auctionId].interimOrder = iterOrder;\\r\\n    }\\r\\n\\r\\n    function settleAuctionAtomically(\\r\\n        uint256 auctionId,\\r\\n        uint96[] memory _minBuyAmount,\\r\\n        uint96[] memory _sellAmount,\\r\\n        bytes32[] memory _prevSellOrder,\\r\\n        bytes calldata allowListCallData\\r\\n    ) public atStageSolutionSubmission(auctionId) {\\r\\n        require(\\r\\n            auctionData[auctionId].isAtomicClosureAllowed,\\r\\n            \\\"not allowed to settle auction atomically\\\"\\r\\n        );\\r\\n        require(\\r\\n            _minBuyAmount.length == 1 && _sellAmount.length == 1,\\r\\n            \\\"Only one order can be placed atomically\\\"\\r\\n        );\\r\\n        uint64 userId = getUserId(msg.sender);\\r\\n        require(\\r\\n            auctionData[auctionId].interimOrder.smallerThan(\\r\\n                IterableOrderedOrderSet.encodeOrder(\\r\\n                    userId,\\r\\n                    _minBuyAmount[0],\\r\\n                    _sellAmount[0]\\r\\n                )\\r\\n            ),\\r\\n            \\\"precalculateSellAmountSum is already too advanced\\\"\\r\\n        );\\r\\n        _placeSellOrders(\\r\\n            auctionId,\\r\\n            _minBuyAmount,\\r\\n            _sellAmount,\\r\\n            _prevSellOrder,\\r\\n            allowListCallData,\\r\\n            msg.sender\\r\\n        );\\r\\n        settleAuction(auctionId);\\r\\n    }\\r\\n\\r\\n    // @dev function settling the auction and calculating the price\\r\\n    function settleAuction(uint256 auctionId)\\r\\n        public\\r\\n        atStageSolutionSubmission(auctionId)\\r\\n        returns (bytes32 clearingOrder)\\r\\n    {\\r\\n        (\\r\\n            uint64 auctioneerId,\\r\\n            uint96 minAuctionedBuyAmount,\\r\\n            uint96 fullAuctionedAmount\\r\\n        ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\\r\\n\\r\\n        uint256 currentBidSum = auctionData[auctionId].interimSumBidAmount;\\r\\n        bytes32 currentOrder = auctionData[auctionId].interimOrder;\\r\\n        uint256 buyAmountOfIter;\\r\\n        uint256 sellAmountOfIter;\\r\\n        uint96 fillVolumeOfAuctioneerOrder = fullAuctionedAmount;\\r\\n        // Sum order up, until fullAuctionedAmount is fully bought or queue end is reached\\r\\n        do {\\r\\n            bytes32 nextOrder = sellOrders[auctionId].next(currentOrder);\\r\\n            if (nextOrder == IterableOrderedOrderSet.QUEUE_END) {\\r\\n                break;\\r\\n            }\\r\\n            currentOrder = nextOrder;\\r\\n            (, buyAmountOfIter, sellAmountOfIter) = currentOrder.decodeOrder();\\r\\n            currentBidSum = currentBidSum.add(sellAmountOfIter);\\r\\n        } while (\\r\\n            currentBidSum.mul(buyAmountOfIter) <\\r\\n                fullAuctionedAmount.mul(sellAmountOfIter)\\r\\n        );\\r\\n\\r\\n        if (\\r\\n            currentBidSum > 0 &&\\r\\n            currentBidSum.mul(buyAmountOfIter) >=\\r\\n            fullAuctionedAmount.mul(sellAmountOfIter)\\r\\n        ) {\\r\\n            // All considered/summed orders are sufficient to close the auction fully\\r\\n            // at price between current and previous orders.\\r\\n            uint256 uncoveredBids = currentBidSum.sub(\\r\\n                fullAuctionedAmount.mul(sellAmountOfIter).div(buyAmountOfIter)\\r\\n            );\\r\\n\\r\\n            if (sellAmountOfIter >= uncoveredBids) {\\r\\n                //[13]\\r\\n                // Auction fully filled via partial match of currentOrder\\r\\n                uint256 sellAmountClearingOrder = sellAmountOfIter.sub(\\r\\n                    uncoveredBids\\r\\n                );\\r\\n                auctionData[auctionId]\\r\\n                .volumeClearingPriceOrder = sellAmountClearingOrder.toUint96();\\r\\n                currentBidSum = currentBidSum.sub(uncoveredBids);\\r\\n                clearingOrder = currentOrder;\\r\\n            } else {\\r\\n                //[14]\\r\\n                // Auction fully filled via price strictly between currentOrder and the order\\r\\n                // immediately before. For a proof, see the security-considerations.md\\r\\n                currentBidSum = currentBidSum.sub(sellAmountOfIter);\\r\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\r\\n                    0,\\r\\n                    fullAuctionedAmount,\\r\\n                    currentBidSum.toUint96()\\r\\n                );\\r\\n            }\\r\\n        } else {\\r\\n            // All considered/summed orders are not sufficient to close the auction fully at price of last order //[18]\\r\\n            // Either a higher price must be used or auction is only partially filled\\r\\n\\r\\n            if (currentBidSum > minAuctionedBuyAmount) {\\r\\n                //[15]\\r\\n                // Price higher than last order would fill the auction\\r\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\r\\n                    0,\\r\\n                    fullAuctionedAmount,\\r\\n                    currentBidSum.toUint96()\\r\\n                );\\r\\n            } else {\\r\\n                //[16]\\r\\n                // Even at the initial auction price, the auction is partially filled\\r\\n                clearingOrder = IterableOrderedOrderSet.encodeOrder(\\r\\n                    0,\\r\\n                    fullAuctionedAmount,\\r\\n                    minAuctionedBuyAmount\\r\\n                );\\r\\n                fillVolumeOfAuctioneerOrder = currentBidSum\\r\\n                .mul(fullAuctionedAmount)\\r\\n                .div(minAuctionedBuyAmount)\\r\\n                .toUint96();\\r\\n            }\\r\\n        }\\r\\n        auctionData[auctionId].clearingPriceOrder = clearingOrder;\\r\\n\\r\\n        if (auctionData[auctionId].minFundingThreshold > currentBidSum) {\\r\\n            auctionData[auctionId].minFundingThresholdNotReached = true;\\r\\n        }\\r\\n        processFeesAndAuctioneerFunds(\\r\\n            auctionId,\\r\\n            fillVolumeOfAuctioneerOrder,\\r\\n            auctioneerId,\\r\\n            fullAuctionedAmount\\r\\n        );\\r\\n        emit AuctionCleared(\\r\\n            auctionId,\\r\\n            fillVolumeOfAuctioneerOrder,\\r\\n            uint96(currentBidSum),\\r\\n            clearingOrder\\r\\n        );\\r\\n        // Gas refunds\\r\\n        auctionAccessManager[auctionId] = address(0);\\r\\n        delete auctionAccessData[auctionId];\\r\\n        auctionData[auctionId].initialAuctionOrder = bytes32(0);\\r\\n        auctionData[auctionId].interimOrder = bytes32(0);\\r\\n        auctionData[auctionId].interimSumBidAmount = uint256(0);\\r\\n        auctionData[auctionId].minimumBiddingAmountPerOrder = uint256(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n\\r\\n    First we will remove the given orders from contract sell orders list.\\r\\n    **/\\r\\n    function claimFromParticipantOrder(\\r\\n        uint256 auctionId,\\r\\n        bytes32[] memory orders\\r\\n    )\\r\\n        public\\r\\n        atStageFinished(auctionId)\\r\\n        returns (\\r\\n            uint256 sumAuctioningTokenAmount,\\r\\n            uint256 sumBiddingTokenAmount\\r\\n        )\\r\\n    {\\r\\n        for (uint256 i = 0; i < orders.length; i++) {\\r\\n            // Note: we don't need to keep any information about the node since\\r\\n            // no new elements need to be inserted.\\r\\n            require(\\r\\n                sellOrders[auctionId].remove(orders[i]),\\r\\n                \\\"order is no longer claimable\\\"\\r\\n            );\\r\\n        }\\r\\n        AuctionData memory auction = auctionData[auctionId];\\r\\n        (, uint96 priceNumerator, uint96 priceDenominator) = auction\\r\\n        .clearingPriceOrder\\r\\n        .decodeOrder();\\r\\n\\r\\n        (uint64 userId, , ) = orders[0].decodeOrder();\\r\\n        bool minFundingThresholdNotReached = auctionData[auctionId]\\r\\n        .minFundingThresholdNotReached;\\r\\n        for (uint256 i = 0; i < orders.length; i++) {\\r\\n            (uint64 userIdOrder, uint96 buyAmount, uint96 sellAmount) = orders[\\r\\n                i\\r\\n            ]\\r\\n            .decodeOrder();\\r\\n            require(\\r\\n                userIdOrder == userId,\\r\\n                \\\"only allowed to claim for same user\\\"\\r\\n            );\\r\\n            if (minFundingThresholdNotReached) {\\r\\n                //[10]\\r\\n                sumBiddingTokenAmount = sumBiddingTokenAmount.add(sellAmount);\\r\\n            } else {\\r\\n                //[23]\\r\\n                if (orders[i] == auction.clearingPriceOrder) {\\r\\n                    //[25]\\r\\n                    sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\\r\\n                        auction\\r\\n                        .volumeClearingPriceOrder\\r\\n                        .mul(priceNumerator)\\r\\n                        .div(priceDenominator)\\r\\n                    );\\r\\n                    sumBiddingTokenAmount = sumBiddingTokenAmount.add(\\r\\n                        sellAmount.sub(auction.volumeClearingPriceOrder)\\r\\n                    );\\r\\n                } else {\\r\\n                    if (orders[i].smallerThan(auction.clearingPriceOrder)) {\\r\\n                        //[17]\\r\\n                        sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\\r\\n                            sellAmount.mul(priceNumerator).div(priceDenominator)\\r\\n                        );\\r\\n                    } else {\\r\\n                        //[24]\\r\\n                        sumBiddingTokenAmount = sumBiddingTokenAmount.add(\\r\\n                            sellAmount\\r\\n                        );\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            emit ClaimedFromOrder(auctionId, userId, buyAmount, sellAmount);\\r\\n        }\\r\\n        sendOutTokens(\\r\\n            auctionId,\\r\\n            sumAuctioningTokenAmount,\\r\\n            sumBiddingTokenAmount,\\r\\n            userId\\r\\n        ); //[3]\\r\\n    }\\r\\n\\r\\n    function processFeesAndAuctioneerFunds(\\r\\n        uint256 auctionId,\\r\\n        uint256 fillVolumeOfAuctioneerOrder,\\r\\n        uint64 auctioneerId,\\r\\n        uint96 fullAuctionedAmount\\r\\n    ) internal {\\r\\n        uint256 feeAmount = fullAuctionedAmount\\r\\n        .mul(auctionData[auctionId].feeNumerator)\\r\\n        .div(FEE_DENOMINATOR); //[20]\\r\\n        if (auctionData[auctionId].minFundingThresholdNotReached) {\\r\\n            sendOutTokens(\\r\\n                auctionId,\\r\\n                fullAuctionedAmount.add(feeAmount),\\r\\n                0,\\r\\n                auctioneerId\\r\\n            ); //[4]\\r\\n        } else {\\r\\n            //[11]\\r\\n            (, uint96 priceNumerator, uint96 priceDenominator) = auctionData[\\r\\n                auctionId\\r\\n            ]\\r\\n            .clearingPriceOrder\\r\\n            .decodeOrder();\\r\\n            // unsettledAuctionTokens = fullAuctionedAmount - fillVolumeOfAuctioneerOrder\\r\\n            uint256 unsettledAuctionTokens = fullAuctionedAmount.sub(\\r\\n                fillVolumeOfAuctioneerOrder\\r\\n            );\\r\\n            // auctioningTokenAmount = unsettledAuctionTokens + ( ( feeAmount * unsettledAuctionTokens ) / fullAuctionedAmount)\\r\\n            uint256 auctioningTokenAmount = unsettledAuctionTokens.add(\\r\\n                feeAmount.mul(unsettledAuctionTokens).div(fullAuctionedAmount)\\r\\n            );\\r\\n            // biddingTokenAmount = (fillVolumeOfAuctioneerOrder * priceDenominator) / priceNumerator\\r\\n            uint256 biddingTokenAmount = fillVolumeOfAuctioneerOrder\\r\\n            .mul(priceDenominator)\\r\\n            .div(priceNumerator);\\r\\n            sendOutTokens(\\r\\n                auctionId,\\r\\n                auctioningTokenAmount,\\r\\n                biddingTokenAmount,\\r\\n                auctioneerId\\r\\n            ); //[5]\\r\\n            sendOutTokens(\\r\\n                auctionId,\\r\\n                // (feeAmount * fillVolumeOfAuctioneerOrder) / fullAuctionedAmount\\r\\n                feeAmount.mul(fillVolumeOfAuctioneerOrder).div(\\r\\n                    fullAuctionedAmount\\r\\n                ),\\r\\n                0,\\r\\n                feeReceiverUserId\\r\\n            ); //[7]\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* send back either auctioning or bidding tokens to the given user.\\r\\n    Transfers out occur on:\\r\\n    1- order cancellation,giving back the amount bid by the user in an order.\\r\\n    2- users claiming funds after the auction is concluded \\r\\n    3- auction closing and sending\\r\\n        1-funds to the auctioneer\\r\\n        2-fees to the dedicated address\\r\\n    */\\r\\n    function sendOutTokens(\\r\\n        uint256 auctionId,\\r\\n        uint256 auctioningTokenAmount,\\r\\n        uint256 biddingTokenAmount,\\r\\n        uint64 userId\\r\\n    ) internal {\\r\\n        address userAddress = registeredUsers.getAddressAt(userId);\\r\\n        if (auctioningTokenAmount > 0) {\\r\\n            auctionData[auctionId].auctioningToken.safeTransfer(\\r\\n                userAddress,\\r\\n                auctioningTokenAmount\\r\\n            );\\r\\n        }\\r\\n        if (biddingTokenAmount > 0) {\\r\\n            auctionData[auctionId].biddingToken.safeTransfer(\\r\\n                userAddress,\\r\\n                biddingTokenAmount\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function registerUser(address user) public returns (uint64 userId) {\\r\\n        numUsers = numUsers.add(1).toUint64();\\r\\n        require(\\r\\n            registeredUsers.insert(numUsers, user),\\r\\n            \\\"User already registered\\\"\\r\\n        );\\r\\n        userId = numUsers;\\r\\n        emit UserRegistration(user, userId);\\r\\n    }\\r\\n\\r\\n    function getUserId(address user) public returns (uint64 userId) {\\r\\n        if (registeredUsers.hasAddress(user)) {\\r\\n            userId = registeredUsers.getId(user);\\r\\n        } else {\\r\\n            userId = registerUser(user);\\r\\n            emit NewUser(userId, user);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getSecondsRemainingInBatch(uint256 auctionId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (auctionData[auctionId].auctionEndDate < block.timestamp) {\\r\\n            return 0;\\r\\n        }\\r\\n        return auctionData[auctionId].auctionEndDate.sub(block.timestamp);\\r\\n    }\\r\\n\\r\\n    function containsOrder(uint256 auctionId, bytes32 order)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return sellOrders[auctionId].contains(order);\\r\\n    }\\r\\n\\r\\n    //--------------------------------------------------------\\r\\n    // Documents\\r\\n    //--------------------------------------------------------\\r\\n\\r\\n    function setDocument(string calldata _name, string calldata _data)\\r\\n        external onlyOwner()\\r\\n    {\\r\\n        _setDocument(_name, _data);\\r\\n    }\\r\\n\\r\\n    // function setDocuments(string[] calldata _name, string[] calldata _data) external {\\r\\n    //     require(hasAdminRole(msg.sender) );\\r\\n    //     for (uint256 i = 0; i < _name.length; i++) {\\r\\n    //         _setDocument( _name[i], _data[i]);\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    function removeDocument(string calldata _name) external onlyOwner() {\\r\\n        _removeDocument(_name);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/IterableOrderedOrderSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary IterableOrderedOrderSet {\\r\\n    using SafeMath for uint96;\\r\\n    using IterableOrderedOrderSet for bytes32;\\r\\n\\r\\n    // represents smallest possible value for an order under comparison of fn smallerThan()\\r\\n    bytes32 internal constant QUEUE_START =\\r\\n        0x0000000000000000000000000000000000000000000000000000000000000001;\\r\\n    // represents highest possible value for an order under comparison of fn smallerThan()\\r\\n    bytes32 internal constant QUEUE_END =\\r\\n        0xffffffffffffffffffffffffffffffffffffffff000000000000000000000001;\\r\\n\\r\\n    /// The struct is used to implement a modified version of a doubly linked\\r\\n    /// list with sorted elements. The list starts from QUEUE_START to\\r\\n    /// QUEUE_END, and each node keeps track of its predecessor and successor.\\r\\n    /// Nodes can be added or removed.\\r\\n    ///\\r\\n    /// `next` and `prev` have a different role. The list is supposed to be\\r\\n    /// traversed with `next`. If `next` is empty, the node is not part of the\\r\\n    /// list. However, `prev` might be set for elements that are not in the\\r\\n    /// list, which is why it should not be used for traversing. Having a `prev`\\r\\n    /// set for elements not in the list is used to keep track of the history of\\r\\n    /// the position in the list of a removed element.\\r\\n    struct Data {\\r\\n        mapping(bytes32 => bytes32) nextMap;\\r\\n        mapping(bytes32 => bytes32) prevMap;\\r\\n    }\\r\\n\\r\\n    struct Order {\\r\\n        uint64 owner;\\r\\n        uint96 buyAmount;\\r\\n        uint96 sellAmount;\\r\\n    }\\r\\n\\r\\n    function initializeEmptyList(Data storage self) internal {\\r\\n        self.nextMap[QUEUE_START] = QUEUE_END;\\r\\n        self.prevMap[QUEUE_END] = QUEUE_START;\\r\\n    }\\r\\n\\r\\n    function isEmpty(Data storage self) internal view returns (bool) {\\r\\n        return self.nextMap[QUEUE_START] == QUEUE_END;\\r\\n    }\\r\\n\\r\\n    function insert(\\r\\n        Data storage self,\\r\\n        bytes32 elementToInsert,\\r\\n        bytes32 elementBeforeNewOne\\r\\n    ) internal returns (bool) {\\r\\n        (, , uint96 denominator) = decodeOrder(elementToInsert);\\r\\n        require(denominator != uint96(0), \\\"Inserting zero is not supported\\\");\\r\\n        require(\\r\\n            elementToInsert != QUEUE_START && elementToInsert != QUEUE_END,\\r\\n            \\\"Inserting element is not valid\\\"\\r\\n        );\\r\\n        if (contains(self, elementToInsert)) {\\r\\n            return false;\\r\\n        }\\r\\n        if (\\r\\n            elementBeforeNewOne != QUEUE_START &&\\r\\n            self.prevMap[elementBeforeNewOne] == bytes32(0)\\r\\n        ) {\\r\\n            return false;\\r\\n        }\\r\\n        if (!elementBeforeNewOne.smallerThan(elementToInsert)) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        // `elementBeforeNewOne` might have been removed during the time it\\r\\n        // took to the transaction calling this function to be mined, so\\r\\n        // the new order cannot be appended directly to this. We follow the\\r\\n        // history of previous links backwards until we find an element in\\r\\n        // the list from which to start our search.\\r\\n        // Note that following the link backwards returns elements that are\\r\\n        // before `elementBeforeNewOne` in sorted order.\\r\\n        while (self.nextMap[elementBeforeNewOne] == bytes32(0)) {\\r\\n            elementBeforeNewOne = self.prevMap[elementBeforeNewOne];\\r\\n        }\\r\\n\\r\\n        // `elementBeforeNewOne` belongs now to the linked list. We search the\\r\\n        // largest entry that is smaller than the element to insert.\\r\\n        bytes32 previous;\\r\\n        bytes32 current = elementBeforeNewOne;\\r\\n        do {\\r\\n            previous = current;\\r\\n            current = self.nextMap[current];\\r\\n        } while (current.smallerThan(elementToInsert));\\r\\n        // Note: previous < elementToInsert < current\\r\\n        self.nextMap[previous] = elementToInsert;\\r\\n        self.prevMap[current] = elementToInsert;\\r\\n        self.prevMap[elementToInsert] = previous;\\r\\n        self.nextMap[elementToInsert] = current;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// The element is removed from the linked list, but the node retains\\r\\n    /// information on which predecessor it had, so that a node in the chain\\r\\n    /// can be reached by following the predecessor chain of deleted elements.\\r\\n    function removeKeepHistory(Data storage self, bytes32 elementToRemove)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (!contains(self, elementToRemove)) {\\r\\n            return false;\\r\\n        }\\r\\n        bytes32 previousElement = self.prevMap[elementToRemove];\\r\\n        bytes32 nextElement = self.nextMap[elementToRemove];\\r\\n        self.nextMap[previousElement] = nextElement;\\r\\n        self.prevMap[nextElement] = previousElement;\\r\\n        self.nextMap[elementToRemove] = bytes32(0);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// Remove an element from the chain, clearing all related storage.\\r\\n    /// Note that no elements should be inserted using as a reference point a\\r\\n    /// node deleted after calling `remove`, since an element in the `prev`\\r\\n    /// chain might be missing.\\r\\n    function remove(Data storage self, bytes32 elementToRemove)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        bool result = removeKeepHistory(self, elementToRemove);\\r\\n        if (result) {\\r\\n            self.prevMap[elementToRemove] = bytes32(0);\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function contains(Data storage self, bytes32 value)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (value == QUEUE_START) {\\r\\n            return false;\\r\\n        }\\r\\n        // Note: QUEUE_END is not contained in the list since it has no\\r\\n        // successor.\\r\\n        return self.nextMap[value] != bytes32(0);\\r\\n    }\\r\\n\\r\\n    // @dev orders are ordered by\\r\\n    // 1. their price - buyAmount/sellAmount\\r\\n    // 2. by the sellAmount\\r\\n    // 3. their userId,\\r\\n    function smallerThan(bytes32 orderLeft, bytes32 orderRight)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        (\\r\\n            uint64 userIdLeft,\\r\\n            uint96 priceNumeratorLeft,\\r\\n            uint96 priceDenominatorLeft\\r\\n        ) = decodeOrder(orderLeft);\\r\\n        (\\r\\n            uint64 userIdRight,\\r\\n            uint96 priceNumeratorRight,\\r\\n            uint96 priceDenominatorRight\\r\\n        ) = decodeOrder(orderRight);\\r\\n\\r\\n        if (\\r\\n            priceNumeratorLeft.mul(priceDenominatorRight) <\\r\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\r\\n        ) return true;\\r\\n        if (\\r\\n            priceNumeratorLeft.mul(priceDenominatorRight) >\\r\\n            priceNumeratorRight.mul(priceDenominatorLeft)\\r\\n        ) return false;\\r\\n\\r\\n        if (priceNumeratorLeft < priceNumeratorRight) return true;\\r\\n        if (priceNumeratorLeft > priceNumeratorRight) return false;\\r\\n        require(\\r\\n            userIdLeft != userIdRight,\\r\\n            \\\"user is not allowed to place same order twice\\\"\\r\\n        );\\r\\n        if (userIdLeft < userIdRight) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function first(Data storage self) internal view returns (bytes32) {\\r\\n        require(!isEmpty(self), \\\"Trying to get first from empty set\\\");\\r\\n        return self.nextMap[QUEUE_START];\\r\\n    }\\r\\n\\r\\n    function next(Data storage self, bytes32 value)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        require(value != QUEUE_END, \\\"Trying to get next of last element\\\");\\r\\n        bytes32 nextElement = self.nextMap[value];\\r\\n        require(\\r\\n            nextElement != bytes32(0),\\r\\n            \\\"Trying to get next of non-existent element\\\"\\r\\n        );\\r\\n        return nextElement;\\r\\n    }\\r\\n\\r\\n    function decodeOrder(bytes32 _orderData)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint64 userId,\\r\\n            uint96 buyAmount,\\r\\n            uint96 sellAmount\\r\\n        )\\r\\n    {\\r\\n        // Note: converting to uint discards the binary digits that do not fit\\r\\n        // the type.\\r\\n        userId = uint64(uint256(_orderData) >> 192);\\r\\n        buyAmount = uint96(uint256(_orderData) >> 96);\\r\\n        sellAmount = uint96(uint256(_orderData));\\r\\n    }\\r\\n\\r\\n    function encodeOrder(\\r\\n        uint64 userId,\\r\\n        uint96 buyAmount,\\r\\n        uint96 sellAmount\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return\\r\\n            bytes32(\\r\\n                (uint256(userId) << 192) +\\r\\n                    (uint256(buyAmount) << 96) +\\r\\n                    uint256(sellAmount)\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/interfaces/AllowListVerifier.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.8;\\r\\n\\r\\nlibrary AllowListVerifierHelper {\\r\\n    /// @dev Value returned by a call to `isAllowed` if the check\\r\\n    /// was successful. The value is defined as:\\r\\n    /// bytes4(keccak256(\\\"isAllowed(address,uint256,bytes)\\\"))\\r\\n    bytes4 internal constant MAGICVALUE = 0x19a05a7e;\\r\\n}\\r\\n\\r\\n///\\r\\n/// @dev Standardized interface for an allowList manager for annexAuction\\r\\n/// The interface was inspired by EIP-1271\\r\\ninterface AllowListVerifier {\\r\\n    /// @dev Should return whether the a specific user has access to an auction\\r\\n    /// by returning the magic value from AllowListVerifierHelper\\r\\n    function isAllowed(\\r\\n        address user,\\r\\n        uint256 auctionId,\\r\\n        bytes calldata callData\\r\\n    ) external view returns (bytes4);\\r\\n}\\r\\n\"\n    },\n    \"contracts/libraries/IdToAddressBiMap.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n// Contract does not have test coverage, as it was nearly copied from:\\r\\n// https://github.com/gnosis/solidity-data-structures/blob/master/contracts/libraries/IdToAddressBiMap.sol\\r\\n// The only change is uint16 -> uint64\\r\\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\nlibrary IdToAddressBiMap {\\r\\n    struct Data {\\r\\n        mapping(uint64 => address) idToAddress;\\r\\n        mapping(address => uint64) addressToId;\\r\\n    }\\r\\n\\r\\n    function hasId(Data storage self, uint64 id) internal view returns (bool) {\\r\\n        return self.idToAddress[id + 1] != address(0);\\r\\n    }\\r\\n\\r\\n    function hasAddress(Data storage self, address addr)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return self.addressToId[addr] != 0;\\r\\n    }\\r\\n\\r\\n    function getAddressAt(Data storage self, uint64 id)\\r\\n        internal\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        require(hasId(self, id), \\\"Must have ID to get Address\\\");\\r\\n        return self.idToAddress[id + 1];\\r\\n    }\\r\\n\\r\\n    function getId(Data storage self, address addr)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint64)\\r\\n    {\\r\\n        require(hasAddress(self, addr), \\\"Must have Address to get ID\\\");\\r\\n        return self.addressToId[addr] - 1;\\r\\n    }\\r\\n\\r\\n    function insert(\\r\\n        Data storage self,\\r\\n        uint64 id,\\r\\n        address addr\\r\\n    ) internal returns (bool) {\\r\\n        require(addr != address(0), \\\"Cannot insert zero address\\\");\\r\\n        require(id != uint64(-1), \\\"Cannot insert max uint64\\\");\\r\\n        // Ensure bijectivity of the mappings\\r\\n        if (\\r\\n            self.addressToId[addr] != 0 ||\\r\\n            self.idToAddress[id + 1] != address(0)\\r\\n        ) {\\r\\n            return false;\\r\\n        }\\r\\n        self.idToAddress[id + 1] = addr;\\r\\n        self.addressToId[addr] = id + 1;\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/libraries/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Logic was copied and modified from here: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/SafeCast.sol\\r\\n */\\r\\nlibrary SafeCast {\\r\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\r\\n        require(value < 2**96, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\r\\n        return uint96(value);\\r\\n    }\\r\\n\\r\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\r\\n        require(value < 2**64, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\r\\n        return uint64(value);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/Utils/Documents.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @title Standard implementation of ERC1643 Document management\\r\\n */\\r\\ncontract Documents {\\r\\n    struct Document {\\r\\n        uint32 docIndex; // Store the document name indexes\\r\\n        uint64 lastModified; // Timestamp at which document details was last modified\\r\\n        string data; // data of the document that exist off-chain\\r\\n    }\\r\\n\\r\\n    // mapping to store the documents details in the document\\r\\n    mapping(string => Document) internal _documents;\\r\\n    // mapping to store the document name indexes\\r\\n    mapping(string => uint32) internal _docIndexes;\\r\\n    // Array use to store all the document name present in the contracts\\r\\n    bytes32[] private _docNames;\\r\\n\\r\\n    // Document Events\\r\\n    event DocumentRemoved(string indexed _name, string _data);\\r\\n    event DocumentUpdated(string indexed _name, string _data);\\r\\n\\r\\n    /**\\r\\n     * @notice Used to attach a new document to the contract, or update the data or hash of an existing attached document\\r\\n     * @dev Can only be executed by the owner of the contract.\\r\\n     * @param _name Name of the document. It should be unique always\\r\\n     * @param _data Off-chain data of the document from where it is accessible to investors/advisors to read.\\r\\n     */\\r\\n    function _setDocument(string calldata _name, string calldata _data)\\r\\n        internal\\r\\n    {\\r\\n        require(bytes(_name).length > 0, \\\"Zero name is not allowed\\\");\\r\\n        require(bytes(_data).length > 0, \\\"Should not be a empty data\\\");\\r\\n        // Document storage document = _documents[_name];\\r\\n        if (_documents[_name].lastModified == uint64(0)) {\\r\\n            _docNames.push(stringToBytes32(_name));\\r\\n            _documents[_name].docIndex = uint32(_docNames.length);\\r\\n        }\\r\\n        _documents[_name] = Document(\\r\\n            _documents[_name].docIndex,\\r\\n            uint64(block.timestamp),\\r\\n            _data\\r\\n        );\\r\\n        emit DocumentUpdated(_name, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to remove an existing document from the contract by giving the name of the document.\\r\\n     * @dev Can only be executed by the owner of the contract.\\r\\n     * @param _name Name of the document. It should be unique always\\r\\n     */\\r\\n\\r\\n    function _removeDocument(string calldata _name) internal {\\r\\n        require(\\r\\n            _documents[_name].lastModified != uint64(0),\\r\\n            \\\"Document should exist\\\"\\r\\n        );\\r\\n        uint32 index = _documents[_name].docIndex - 1;\\r\\n        if (index != _docNames.length - 1) {\\r\\n            _docNames[index] = _docNames[_docNames.length - 1];\\r\\n            _documents[bytes32ToString(_docNames[index])].docIndex = index + 1;\\r\\n        }\\r\\n        _docNames.pop();\\r\\n        emit DocumentRemoved(_name, _documents[_name].data);\\r\\n        delete _documents[_name];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to return the details of a document with a known name (`string`).\\r\\n     * @param _name Name of the document\\r\\n     * @return string The data associated with the document.\\r\\n     * @return uint256 the timestamp at which the document was last modified.\\r\\n     */\\r\\n    function getDocument(string calldata _name)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory, uint256)\\r\\n    {\\r\\n        return (\\r\\n            _documents[_name].data,\\r\\n            uint256(_documents[_name].lastModified)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to retrieve a full list of documents attached to the smart contract.\\r\\n     * @return string List of all documents names present in the contract.\\r\\n     */\\r\\n    function getAllDocuments() external view returns (bytes32[] memory) {\\r\\n        return _docNames;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to retrieve the total documents in the smart contract.\\r\\n     * @return uint256 Count of the document names present in the contract.\\r\\n     */\\r\\n    function getDocumentCount() external view returns (uint256) {\\r\\n        return _docNames.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to retrieve the document name from index in the smart contract.\\r\\n     * @return string Name of the document name.\\r\\n     */\\r\\n    function getDocumentName(uint256 _index)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_index < _docNames.length, \\\"Index out of bounds\\\");\\r\\n        return bytes32ToString(_docNames[_index]);\\r\\n    }\\r\\n\\r\\n    function stringToBytes32(string memory source)\\r\\n        public\\r\\n        pure\\r\\n        returns (bytes32 result)\\r\\n    {\\r\\n        bytes memory tempEmptyStringTest = bytes(source);\\r\\n        if (tempEmptyStringTest.length == 0) {\\r\\n            return 0x0;\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            result := mload(add(source, 32))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\\r\\n        uint8 i = 0;\\r\\n        while(i < 32 && _bytes32[i] != 0) {\\r\\n            i++;\\r\\n        }\\r\\n        bytes memory bytesArray = new bytes(i);\\r\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\r\\n            bytesArray[i] = _bytes32[i];\\r\\n        }\\r\\n        return string(bytesArray);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"contracts/wrappers/DepositAndPlaceOrder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.8;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../AnnexBatchAuction.sol\\\";\\r\\nimport \\\"../interfaces/IWETH.sol\\\";\\r\\n\\r\\ncontract DepositAndPlaceOrder {\\r\\n    AnnexBatchAuction public immutable annexAuction;\\r\\n    IWETH public immutable nativeTokenWrapper;\\r\\n\\r\\n    constructor(address annexAuctionAddress, address _nativeTokenWrapper)\\r\\n        public\\r\\n    {\\r\\n        nativeTokenWrapper = IWETH(_nativeTokenWrapper);\\r\\n        annexAuction = AnnexBatchAuction(annexAuctionAddress);\\r\\n        IERC20(_nativeTokenWrapper).approve(annexAuctionAddress, uint256(-1));\\r\\n    }\\r\\n\\r\\n    function depositAndPlaceOrder(\\r\\n        uint256 auctionId,\\r\\n        uint96[] memory _minBuyAmounts,\\r\\n        bytes32[] memory _prevSellOrders,\\r\\n        bytes calldata allowListCallData\\r\\n    ) external payable returns (uint64 userId) {\\r\\n        uint96[] memory sellAmounts = new uint96[](1);\\r\\n        require(msg.value < 2**96, \\\"too much value sent\\\");\\r\\n        nativeTokenWrapper.deposit{value: msg.value}();\\r\\n        sellAmounts[0] = uint96(msg.value);\\r\\n        return\\r\\n            annexAuction.placeSellOrdersOnBehalf(\\r\\n                auctionId,\\r\\n                _minBuyAmounts,\\r\\n                sellAmounts,\\r\\n                _prevSellOrders,\\r\\n                allowListCallData,\\r\\n                msg.sender\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/interfaces/IWETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\"\n    },\n    \"contracts/allowListExamples/AllowListOffChainManaged.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.8;\\r\\nimport \\\"../interfaces/AllowListVerifier.sol\\\";\\r\\nimport \\\"../AnnexBatchAuction.sol\\\";\\r\\n\\r\\n// Idea was first mentioned in the blog:\\r\\n// https://medium.com/@PhABC/off-chain-whitelist-with-on-chain-verification-for-ethereum-smart-contracts-1563ca4b8f11\\r\\n\\r\\ncontract AllowListOffChainManaged {\\r\\n    /// @dev The EIP-712 domain type hash used for computing the domain\\r\\n    /// separator.\\r\\n    bytes32 private constant DOMAIN_TYPE_HASH =\\r\\n        keccak256(\\r\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\r\\n        );\\r\\n\\r\\n    /// @dev The EIP-712 domain name used for computing the domain separator.\\r\\n    bytes32 private constant DOMAIN_NAME = keccak256(\\\"AccessManager\\\");\\r\\n\\r\\n    /// @dev The EIP-712 domain version used for computing the domain separator.\\r\\n    bytes32 private constant DOMAIN_VERSION = keccak256(\\\"v1\\\");\\r\\n\\r\\n    /// @dev The domain separator used for signing orders that gets mixed in\\r\\n    /// making signatures for different domains incompatible. This domain\\r\\n    /// separator is computed following the EIP-712 standard and has replay\\r\\n    /// protection mixed in so that signed orders are only valid for specific\\r\\n    /// GPv2 contracts.\\r\\n    bytes32 public immutable domainSeparator;\\r\\n\\r\\n    constructor() public {\\r\\n        // NOTE: Currently, the only way to get the chain ID in solidity is\\r\\n        // using assembly.\\r\\n        uint256 chainId;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n\\r\\n        domainSeparator = keccak256(\\r\\n            abi.encode(\\r\\n                DOMAIN_TYPE_HASH,\\r\\n                DOMAIN_NAME,\\r\\n                DOMAIN_VERSION,\\r\\n                chainId,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function isAllowed(\\r\\n        address user,\\r\\n        uint256 auctionId,\\r\\n        bytes calldata callData\\r\\n    ) external view returns (bytes4) {\\r\\n        return isAllowedBy(user, auctionId, msg.sender, callData);\\r\\n    }\\r\\n\\r\\n    function isAllowedBy(\\r\\n        address user,\\r\\n        uint256 auctionId,\\r\\n        address allower,\\r\\n        bytes calldata callData\\r\\n    ) public view returns (bytes4) {\\r\\n        uint8 v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        (v, r, s) = abi.decode(callData, (uint8, bytes32, bytes32));\\r\\n        bytes32 hash = keccak256(abi.encode(domainSeparator, user, auctionId));\\r\\n        address signer =\\r\\n            ecrecover(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\r\\n                ),\\r\\n                v,\\r\\n                r,\\r\\n                s\\r\\n            );\\r\\n        bytes memory allowListData =\\r\\n            AnnexBatchAuction(allower).auctionAccessData(auctionId);\\r\\n        if (abi.decode(allowListData, (address)) == signer) {\\r\\n            return AllowListVerifierHelper.MAGICVALUE;\\r\\n        } else {\\r\\n            return bytes4(0);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": false,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "30e0240d89cb4af172d7cf183cd8e8a7",
      "transactionHash": "0x454d4bb1339cdae604cebdf3bef660f737ea66e140bdfc3ec1dcab8187b66b8d",
      "args": []
    },
    "rawTx": "0xf96e7881aa850165a0bc0083130e0b8080b96e2460806040526000600c556001600d60006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055503480156200004057600080fd5b50600062000053620000f760201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350620000ff565b600033905090565b616d15806200010f6000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80638da5cb5b1161010f578063d225269c116100a2578063e86dea4a11610071578063e86dea4a146112b7578063ec20d0bb146112d5578063f2fde38b14611552578063f59c2f0614611596576101f0565b8063d225269c14610f6b578063d73792a9146111c8578063dde51f6d146111e6578063e4a59ef41461125f576101f0565b80639fa5f50b116100de5780639fa5f50b14610d78578063a7e7664414610dd7578063c6b547e614610df5578063cfb5192814610e9c576101f0565b80638da5cb5b1461099057806391cfc1d4146109c45780639201de5514610c035780639c64d0ae14610caa576101f0565b806340b20b0911610187578063715018a611610156578063715018a6146106ee5780637882deaf146106f85780637ccb6a64146107d55780637ed18b70146108ce576101f0565b806340b20b091461054f57806355fc62d21461059d5780635cefb2911461067857806363c699a4146106a0576101f0565b80632b956ff7116101c35780632b956ff7146104555780632e993611146104b75780633d1c2273146104f95780633e12905f14610517576101f0565b80630a4cd6c9146101f557806315d37b4b1461038957806319a50f49146103cb5780632199d5cd146103f3575b600080fd5b610373600480360361016081101561020c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080356bffffffffffffffffffffffff16906020019092919080356bffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803515159060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156102ed57600080fd5b8201836020820111156102ff57600080fd5b8035906020019184600183028401116401000000008311171561032157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061163d565b6040518082815260200191505060405180910390f35b6103b56004803603602081101561039f57600080fd5b8101908080359060200190929190505050611cfc565b6040518082815260200191505060405180910390f35b6103d3611d56565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6104356004803603602081101561040957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d70565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6104976004803603602081101561046b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611eea565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6104e3600480360360208110156104cd57600080fd5b8101908080359060200190929190505050611f7f565b6040518082815260200191505060405180910390f35b610501612526565b6040518082815260200191505060405180910390f35b61054d6004803603604081101561052d57600080fd5b810190808035906020019092919080359060200190929190505050612533565b005b61059b6004803603604081101561056557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612855565b005b6105c9600480360360208110156105b357600080fd5b810190808035906020019092919050505061299a565b604051808f73ffffffffffffffffffffffffffffffffffffffff1681526020018e73ffffffffffffffffffffffffffffffffffffffff1681526020018d81526020018c81526020018b81526020018a8152602001898152602001888152602001878152602001866bffffffffffffffffffffffff168152602001851515815260200184151581526020018381526020018281526020019e50505050505050505050505050505060405180910390f35b610680612a78565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6106d6600480360360408110156106b657600080fd5b810190808035906020019092919080359060200190929190505050612a92565b60405180821515815260200191505060405180910390f35b6106f6612ac1565b005b6107b86004803603604081101561070e57600080fd5b81019080803590602001909291908035906020019064010000000081111561073557600080fd5b82018360208201111561074757600080fd5b8035906020019184602083028401116401000000008311171561076957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050612c2e565b604051808381526020018281526020019250505060405180910390f35b61084c600480360360208110156107eb57600080fd5b810190808035906020019064010000000081111561080857600080fd5b82018360208201111561081a57600080fd5b8035906020019184600183028401116401000000008311171561083c57600080fd5b909192939192939050505061327a565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610892578082015181840152602081019050610877565b50505050905090810190601f1680156108bf5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61098e600480360360408110156108e457600080fd5b81019080803590602001909291908035906020019064010000000081111561090b57600080fd5b82018360208201111561091d57600080fd5b8035906020019184602083028401116401000000008311171561093f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050613398565b005b6109986135fb565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610c01600480360360a08110156109da57600080fd5b810190808035906020019092919080359060200190640100000000811115610a0157600080fd5b820183602082011115610a1357600080fd5b80359060200191846020830284011164010000000083111715610a3557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610a9557600080fd5b820183602082011115610aa757600080fd5b80359060200191846020830284011164010000000083111715610ac957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610b2957600080fd5b820183602082011115610b3b57600080fd5b80359060200191846020830284011164010000000083111715610b5d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610bbd57600080fd5b820183602082011115610bcf57600080fd5b80359060200191846001830284011164010000000083111715610bf157600080fd5b9091929391929390505050613624565b005b610c2f60048036036020811015610c1957600080fd5b810190808035906020019092919050505061388c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c6f578082015181840152602081019050610c54565b50505050905090810190601f168015610c9c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610d7660048036036040811015610cc057600080fd5b8101908080359060200190640100000000811115610cdd57600080fd5b820183602082011115610cef57600080fd5b80359060200191846001830284011164010000000083111715610d1157600080fd5b909192939192939080359060200190640100000000811115610d3257600080fd5b820183602082011115610d4457600080fd5b80359060200191846001830284011164010000000083111715610d6657600080fd5b90919293919293905050506139fd565b005b610d80613abe565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610dc3578082015181840152602081019050610da8565b505050509050019250505060405180910390f35b610ddf613b16565b6040518082815260200191505060405180910390f35b610e2160048036036020811015610e0b57600080fd5b8101908080359060200190929190505050613b1c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e61578082015181840152602081019050610e46565b50505050905090810190601f168015610e8e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610f5560048036036020811015610eb257600080fd5b8101908080359060200190640100000000811115610ecf57600080fd5b820183602082011115610ee157600080fd5b80359060200191846001830284011164010000000083111715610f0357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050613bbf565b6040518082815260200191505060405180910390f35b6111a8600480360360a0811015610f8157600080fd5b810190808035906020019092919080359060200190640100000000811115610fa857600080fd5b820183602082011115610fba57600080fd5b80359060200191846020830284011164010000000083111715610fdc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561103c57600080fd5b82018360208201111561104e57600080fd5b8035906020019184602083028401116401000000008311171561107057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156110d057600080fd5b8201836020820111156110e257600080fd5b8035906020019184602083028401116401000000008311171561110457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561116457600080fd5b82018360208201111561117657600080fd5b8035906020019184600183028401116401000000008311171561119857600080fd5b9091929391929390505050613bea565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6111d0613c77565b6040518082815260200191505060405180910390f35b61125d600480360360208110156111fc57600080fd5b810190808035906020019064010000000081111561121957600080fd5b82018360208201111561122b57600080fd5b8035906020019184600183028401116401000000008311171561124d57600080fd5b9091929391929390505050613c7d565b005b61128b6004803603602081101561127557600080fd5b8101908080359060200190929190505050613d3a565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6112bf613d6d565b6040518082815260200191505060405180910390f35b611532600480360360c08110156112eb57600080fd5b81019080803590602001909291908035906020019064010000000081111561131257600080fd5b82018360208201111561132457600080fd5b8035906020019184602083028401116401000000008311171561134657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156113a657600080fd5b8201836020820111156113b857600080fd5b803590602001918460208302840111640100000000831117156113da57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561143a57600080fd5b82018360208201111561144c57600080fd5b8035906020019184602083028401116401000000008311171561146e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156114ce57600080fd5b8201836020820111156114e057600080fd5b8035906020019184600183028401116401000000008311171561150257600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613d73565b604051808267ffffffffffffffff16815260200191505060405180910390f35b6115946004803603602081101561156857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613e01565b005b6115c2600480360360208110156115ac57600080fd5b8101908080359060200190929190505050613ff3565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156116025780820151818401526020810190506115e7565b50505050905090810190601f16801561162f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60006116b6333061168f6103e8611681611664600c546103e86140a390919063ffffffff16565b8e6bffffffffffffffffffffffff1661412b90919063ffffffff16565b6141b190919063ffffffff16565b8f73ffffffffffffffffffffffffffffffffffffffff1661423a909392919063ffffffff16565b6000886bffffffffffffffffffffffff161161173a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f63616e6e6f742061756374696f6e207a65726f20746f6b656e7300000000000081525060200191505060405180910390fd5b6000876bffffffffffffffffffffffff16116117a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806169e76023913960400191505060405180910390fd5b600086116117fa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180616b4d6036913960400191505060405180910390fd5b888a1115611853576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180616c6b6029913960400191505060405180910390fd5b4289116118ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180616ad66026913960400191505060405180910390fd5b6118c16001600b546140a390919063ffffffff16565b600b819055506118e460046000600b5481526020019081526020016000206142fb565b60006118ef33611eea565b9050604051806101c001604052808e73ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff1681526020018c81526020018b815260200161194c838b8d614380565b815260200188815260200160008152602001600160001b81526020016000801b815260200160006bffffffffffffffffffffffff1681526020016000151581526020018615158152602001600c5481526020018781525060056000600b54815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555061014082015181600901600c6101000a81548160ff02191690831515021790555061016082015181600901600d6101000a81548160ff02191690831515021790555061018082015181600a01556101a082015181600b01559050508360066000600b54815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260076000600b5481526020019081526020016000209080519060200190611b9d9291906166bb565b508b73ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16600b547f728d0fed13687f1840de94f5ae640eae49b43eda26b7ffe97e55e79a0de6e40c8e8e868f8f8f8f8e8e604051808a81526020018981526020018867ffffffffffffffff168152602001876bffffffffffffffffffffffff168152602001866bffffffffffffffffffffffff1681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611ca5578082015181840152602081019050611c8a565b50505050905090810190601f168015611cd25780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390a4600b549150509b9a5050505050505050505050565b60004260056000848152602001908152602001600020600301541015611d255760009050611d51565b611d4e4260056000858152602001908152602001600020600301546143c190919063ffffffff16565b90505b919050565b600a60009054906101000a900467ffffffffffffffff1681565b6000611dae611da96001600a60009054906101000a900467ffffffffffffffff1667ffffffffffffffff166140a390919063ffffffff16565b614444565b600a60006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550611e02600a60009054906101000a900467ffffffffffffffff168360086144af9092919063ffffffff16565b611e74576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f5573657220616c7265616479207265676973746572656400000000000000000081525060200191505060405180910390fd5b600a60009054906101000a900467ffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff167f6838f67cb358c332087b73dbe769a6c869a5f87225236c16dda5d0013a77074c82604051808267ffffffffffffffff16815260200191505060405180910390a2919050565b6000611f008260086147d590919063ffffffff16565b15611f2057611f1982600861484290919063ffffffff16565b9050611f7a565b611f2982611d70565b90508173ffffffffffffffffffffffffffffffffffffffff168167ffffffffffffffff167f969d438b19b6b5fb3c0d3c6f16867e519fcec4233799d6be29d1c00f2045ba2660405160405180910390a35b919050565b60008160006005600083815260200190815260200160002060030154905060008114158015611fae5750804210155b8015611fd257506000801b6005600084815260200190815260200160002060080154145b612027576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180616bed6028913960400191505060405180910390fd5b50600080600061204c6005600088815260200190815260200160002060040154614921565b92509250925060006005600088815260200190815260200160002060060154905060006005600089815260200190815260200160002060070154905060008060008590505b60006120b885600460008f815260200190815260200160002061494790919063ffffffff16565b90507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b8114156120eb5750612174565b8094506120f785614921565b909150816bffffffffffffffffffffffff169150806bffffffffffffffffffffffff169050809450819550505061213783876140a390919063ffffffff16565b95505061215b82876bffffffffffffffffffffffff1661412b90919063ffffffff16565b61216e848761412b90919063ffffffff16565b10612091575b6000851180156121b657506121a082876bffffffffffffffffffffffff1661412b90919063ffffffff16565b6121b3848761412b90919063ffffffff16565b10155b156122bf5760006122026121f3856121e5868b6bffffffffffffffffffffffff1661412b90919063ffffffff16565b6141b190919063ffffffff16565b876143c190919063ffffffff16565b905080831061228d57600061222082856143c190919063ffffffff16565b905061222b81614a45565b600560008f815260200190815260200160002060090160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555061228282886143c190919063ffffffff16565b9650859b50506122b9565b6122a083876143c190919063ffffffff16565b95506122b66000886122b189614a45565b614380565b9a505b5061234b565b866bffffffffffffffffffffffff168511156122f0576122e96000876122e488614a45565b614380565b995061234a565b6122fc60008789614380565b9950612347612342886bffffffffffffffffffffffff16612334896bffffffffffffffffffffffff168961412b90919063ffffffff16565b6141b190919063ffffffff16565b614a45565b90505b5b89600560008d81526020019081526020016000206008018190555084600560008d8152602001908152602001600020600b015411156123b4576001600560008d8152602001908152602001600020600901600c6101000a81548160ff0219169083151502179055505b6123ce8b826bffffffffffffffffffffffff168a89614ab4565b8a7f4d160a2a345f2faeb9ac2e65272820b8ca5473b80aabef416bdf7e07ee7f591082878d60405180846bffffffffffffffffffffffff168152602001836bffffffffffffffffffffffff168152602001828152602001935050505060405180910390a26000600660008d815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760008c815260200190815260200160002060006124a4919061673b565b6000801b600560008d8152602001908152602001600020600401819055506000801b600560008d8152602001908152602001600020600701819055506000600560008d8152602001908152602001600020600601819055506000600560008d815260200190815260200160002060050181905550505050505050505050919050565b6000600380549050905090565b81600060056000838152602001908152602001600020600301549050600081141580156125605750804210155b801561258457506000801b6005600084815260200190815260200160002060080154145b6125d9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180616bed6028913960400191505060405180910390fd5b5060006125fb6005600086815260200190815260200160002060040154614921565b9250505060006005600086815260200190815260200160002060060154905060006005600087815260200190815260200160002060070154905060005b858110156126a75761266582600460008a815260200190815260200160002061494790919063ffffffff16565b9150600061267283614921565b92505050612697816bffffffffffffffffffffffff16856140a390919063ffffffff16565b9350508080600101915050612638565b507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b811415612741576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f7265616368656420656e64206f66206f72646572206c6973740000000000000081525060200191505060405180910390fd5b60008061274d83614921565b9250925050612781816bffffffffffffffffffffffff16866bffffffffffffffffffffffff1661412b90919063ffffffff16565b6127a2836bffffffffffffffffffffffff168661412b90919063ffffffff16565b10612815576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f746f6f206d616e79206f72646572732073756d6d65642075700000000000000081525060200191505060405180910390fd5b83600560008a81526020019081526020016000206006018190555082600560008a8152602001908152602001600020600701819055505050505050505050565b61285d614ca6565b73ffffffffffffffffffffffffffffffffffffffff1661287b6135fb565b73ffffffffffffffffffffffffffffffffffffffff1614612904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600f82111561295e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180616aa9602d913960400191505060405180910390fd5b61296781611eea565b600d60006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081600c819055505050565b60056020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050154908060060154908060070154908060080154908060090160009054906101000a90046bffffffffffffffffffffffff169080600901600c9054906101000a900460ff169080600901600d9054906101000a900460ff169080600a01549080600b015490508e565b600d60009054906101000a900467ffffffffffffffff1681565b6000612ab98260046000868152602001908152602001600020614cae90919063ffffffff16565b905092915050565b612ac9614ca6565b73ffffffffffffffffffffffffffffffffffffffff16612ae76135fb565b73ffffffffffffffffffffffffffffffffffffffff1614612b70576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080836000801b60056000838152602001908152602001600020600801541415612cc1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f41756374696f6e206e6f74207965742066696e6973686564000000000000000081525060200191505060405180910390fd5b60005b8451811015612d8457612d05858281518110612cdc57fe5b602002602001015160046000898152602001908152602001600020614cea90919063ffffffff16565b612d77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f6f72646572206973206e6f206c6f6e67657220636c61696d61626c650000000081525060200191505060405180910390fd5b8080600101915050612cc4565b50612d8d616783565b60056000878152602001908152602001600020604051806101c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160098201600c9054906101000a900460ff1615151515815260200160098201600d9054906101000a900460ff16151515158152602001600a8201548152602001600b820154815250509050600080612f39836101000151614921565b92509250506000612f5d88600081518110612f5057fe5b6020026020010151614921565b505090506000600560008b8152602001908152602001600020600901600c9054906101000a900460ff16905060005b8951811015613260576000806000612fb68d8581518110612fa957fe5b6020026020010151614921565b9250925092508567ffffffffffffffff168367ffffffffffffffff1614613028576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180616bca6023913960400191505060405180910390fd5b84156130565761304f816bffffffffffffffffffffffff168c6140a390919063ffffffff16565b9a506131e9565b8861010001518d858151811061306857fe5b6020026020010151141561312b576130dc6130cd886bffffffffffffffffffffffff166130bf8b6bffffffffffffffffffffffff168d61012001516bffffffffffffffffffffffff1661412b90919063ffffffff16565b6141b190919063ffffffff16565b8d6140a390919063ffffffff16565b9b506131246131158a61012001516bffffffffffffffffffffffff16836bffffffffffffffffffffffff166143c190919063ffffffff16565b8c6140a390919063ffffffff16565b9a506131e8565b6131568961010001518e868151811061314057fe5b6020026020010151614d2790919063ffffffff16565b156131c3576131bc6131ad886bffffffffffffffffffffffff1661319f8b6bffffffffffffffffffffffff16856bffffffffffffffffffffffff1661412b90919063ffffffff16565b6141b190919063ffffffff16565b8d6140a390919063ffffffff16565b9b506131e7565b6131e4816bffffffffffffffffffffffff168c6140a390919063ffffffff16565b9a505b5b5b8567ffffffffffffffff168e7f3f2c83616e48a2f8b3c9cc26499e2e5c61643714dac49027d82cf6732f96a91a848460405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35050508080600101915050612f8c565b5061326d8a898985614f45565b5050505050509250929050565b6060600060018484604051808383808284378083019250505092505050908152602001604051809103902060010160018585604051808383808284378083019250505092505050908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff16818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156133865780601f1061335b57610100808354040283529160200191613386565b820191906000526020600020905b81548152906001019060200180831161336957829003601f168201915b50505050509150915091509250929050565b8160056000828152602001908152602001600020600201544210613407576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526032815260200180616a0a6032913960400191505060405180910390fd5b600061341233611eea565b90506000805b845181101561359257600061345b86838151811061343257fe5b6020026020010151600460008a815260200190815260200160002061503a90919063ffffffff16565b9050801561358457600080600061348489868151811061347757fe5b6020026020010151614921565b9250925092508667ffffffffffffffff168367ffffffffffffffff16146134f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061699e6023913960400191505060405180910390fd5b613517816bffffffffffffffffffffffff16876140a390919063ffffffff16565b95508667ffffffffffffffff168a7f7edae327fe79804b2f38bd490d874a0d188d3ae8911b303205abe47400086ac4848460405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35050505b508080600101915050613418565b506135f433826005600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166150e59092919063ffffffff16565b5050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b85600060056000838152602001908152602001600020600301549050600081141580156136515750804210155b801561367557506000801b6005600084815260200190815260200160002060080154145b6136ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180616bed6028913960400191505060405180910390fd5b5060056000888152602001908152602001600020600901600d9054906101000a900460ff16613744576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806169456028913960400191505060405180910390fd5b60018651148015613756575060018551145b6137ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180616afc6027913960400191505060405180910390fd5b60006137b633611eea565b90506138136137ee82896000815181106137cc57fe5b6020026020010151896000815181106137e157fe5b6020026020010151614380565b600560008b815260200190815260200160002060070154614d2790919063ffffffff16565b613868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061696d6031913960400191505060405180910390fd5b61387788888888888833615187565b5061388188611f7f565b505050505050505050565b606060005b60208160ff161080156138dc5750600060f81b838260ff16602081106138b357fe5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156138ee578080600101915050613891565b60608160ff1667ffffffffffffffff8111801561390a57600080fd5b506040519080825280601f01601f19166020018201604052801561393d5781602001600182028036833780820191505090505b509050600091505b60208260ff161080156139905750600060f81b848360ff166020811061396757fe5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156139f357838260ff16602081106139a457fe5b1a60f81b818360ff16815181106139b757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050613945565b8092505050919050565b613a05614ca6565b73ffffffffffffffffffffffffffffffffffffffff16613a236135fb565b73ffffffffffffffffffffffffffffffffffffffff1614613aac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b613ab88484848461579f565b50505050565b60606003805480602002602001604051908101604052809291908181526020018280548015613b0c57602002820191906000526020600020905b815481526020019060010190808311613af8575b5050505050905090565b600b5481565b60606003805490508210613b98576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f496e646578206f7574206f6620626f756e64730000000000000000000000000081525060200191505060405180910390fd5b613bb860038381548110613ba857fe5b906000526020600020015461388c565b9050919050565b60006060829050600081511415613bdc576000801b915050613be5565b60208301519150505b919050565b60008660056000828152602001908152602001600020600301544210613c5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180616cbe6022913960400191505060405180910390fd5b613c6a88888888888833615187565b9150509695505050505050565b6103e881565b613c85614ca6565b73ffffffffffffffffffffffffffffffffffffffff16613ca36135fb565b73ffffffffffffffffffffffffffffffffffffffff1614613d2c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b613d368282615b7e565b5050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c5481565b60008760056000828152602001908152602001600020600301544210613de4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180616cbe6022913960400191505060405180910390fd5b613df389898989898989615187565b915050979650505050505050565b613e09614ca6565b73ffffffffffffffffffffffffffffffffffffffff16613e276135fb565b73ffffffffffffffffffffffffffffffffffffffff1614613eb0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613f36576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806169c16026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60076020528060005260406000206000915090508054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561409b5780601f106140705761010080835404028352916020019161409b565b820191906000526020600020905b81548152906001019060200180831161407e57829003601f168201915b505050505081565b600080828401905083811015614121576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60008083141561413e57600090506141ab565b600082840290508284828161414f57fe5b04146141a6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180616b836021913960400191505060405180910390fd5b809150505b92915050565b6000808211614228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b81838161423157fe5b04905092915050565b6142f5846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050615f25565b50505050565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b816000016000600160001b815260200190815260200160002081905550600160001b8160010160007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b81526020019081526020016000208190555050565b6000816bffffffffffffffffffffffff166060846bffffffffffffffffffffffff16901b60c08667ffffffffffffffff16901b010160001b90509392505050565b600082821115614439576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b60006801000000000000000082106144a7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180616ba46026913960400191505060405180910390fd5b819050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415614553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616e6e6f7420696e73657274207a65726f206164647265737300000000000081525060200191505060405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff168367ffffffffffffffff1614156145fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f43616e6e6f7420696e73657274206d61782075696e743634000000000000000081525060200191505060405180910390fd5b60008460010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415806146e55750600073ffffffffffffffffffffffffffffffffffffffff168460000160006001860167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156146f357600090506147ce565b818460000160006001860167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183018460010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600190505b9392505050565b6000808360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415905092915050565b600061484e83836147d5565b6148c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d7573742068617665204164647265737320746f20676574204944000000000081525060200191505060405180910390fd5b60018360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1603905092915050565b600080600060c08460001c901c925060608460001c901c91508360001c90509193909250565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b8214156149c5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180616a616022913960400191505060405180910390fd5b60008360000160008481526020019081526020016000205490506000801b811415614a3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180616b23602a913960400191505060405180910390fd5b8091505092915050565b60006c010000000000000000000000008210614aac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061691f6026913960400191505060405180910390fd5b819050919050565b6000614b016103e8614af360056000898152602001908152602001600020600a0154856bffffffffffffffffffffffff1661412b90919063ffffffff16565b6141b190919063ffffffff16565b905060056000868152602001908152602001600020600901600c9054906101000a900460ff1615614b5e57614b5985614b5183856bffffffffffffffffffffffff166140a390919063ffffffff16565b600086614f45565b614c9f565b600080614b806005600089815260200190815260200160002060080154614921565b92509250506000614ba887866bffffffffffffffffffffffff166143c190919063ffffffff16565b90506000614bf1614be2876bffffffffffffffffffffffff16614bd4858961412b90919063ffffffff16565b6141b190919063ffffffff16565b836140a390919063ffffffff16565b90506000614c36856bffffffffffffffffffffffff16614c28866bffffffffffffffffffffffff168c61412b90919063ffffffff16565b6141b190919063ffffffff16565b9050614c448a83838b614f45565b614c998a614c7b896bffffffffffffffffffffffff16614c6d8d8b61412b90919063ffffffff16565b6141b190919063ffffffff16565b6000600d60009054906101000a900467ffffffffffffffff16614f45565b50505050505b5050505050565b600033905090565b6000600160001b821415614cc55760009050614ce4565b6000801b83600001600084815260200190815260200160002054141590505b92915050565b600080614cf7848461503a565b90508015614d1d576000801b846001016000858152602001908152602001600020819055505b8091505092915050565b600080600080614d3686614921565b9250925092506000806000614d4a88614921565b925092509250614d7f846bffffffffffffffffffffffff16836bffffffffffffffffffffffff1661412b90919063ffffffff16565b614dae826bffffffffffffffffffffffff16876bffffffffffffffffffffffff1661412b90919063ffffffff16565b1015614dc35760019650505050505050614f3f565b614df2846bffffffffffffffffffffffff16836bffffffffffffffffffffffff1661412b90919063ffffffff16565b614e21826bffffffffffffffffffffffff16876bffffffffffffffffffffffff1661412b90919063ffffffff16565b1115614e365760009650505050505050614f3f565b816bffffffffffffffffffffffff16856bffffffffffffffffffffffff161015614e695760019650505050505050614f3f565b816bffffffffffffffffffffffff16856bffffffffffffffffffffffff161115614e9c5760009650505050505050614f3f565b8267ffffffffffffffff168667ffffffffffffffff161415614f09576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180616c15602d913960400191505060405180910390fd5b8267ffffffffffffffff168667ffffffffffffffff161015614f345760019650505050505050614f3f565b600096505050505050505b92915050565b6000614f5b82600861601490919063ffffffff16565b90506000841115614fc857614fc781856005600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166150e59092919063ffffffff16565b5b60008311156150335761503281846005600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166150e59092919063ffffffff16565b5b5050505050565b60006150468383614cae565b61505357600090506150df565b60008360010160008481526020019081526020016000205490506000846000016000858152602001908152602001600020549050808560000160008481526020019081526020016000208190555081856001016000838152602001908152602001600020819055506000801b856000016000868152602001908152602001600020819055506001925050505b92915050565b6151828363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050615f25565b505050565b600080600660008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461538c576319a05a7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168173ffffffffffffffffffffffffffffffffffffffff166319a05a7e858c89896040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b1580156152be57600080fd5b505afa1580156152d2573d6000803e3d6000fd5b505050506040513d60208110156152e857600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461538b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f75736572206e6f7420616c6c6f77656420746f20706c616365206f726465720081525060200191505060405180910390fd5b5b506000806153af600560008c815260200190815260200160002060040154614921565b925092505060005b89518110156154a7576154028982815181106153cf57fe5b60200260200101516bffffffffffffffffffffffff16836bffffffffffffffffffffffff1661412b90919063ffffffff16565b615444846bffffffffffffffffffffffff168c848151811061542057fe5b60200260200101516bffffffffffffffffffffffff1661412b90919063ffffffff16565b1061549a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180616c426029913960400191505060405180910390fd5b80806001019150506153b7565b50505060006154b583611eea565b91506000600560008b815260200190815260200160002060050154905060005b895181101561572e5760008a82815181106154ec57fe5b60200260200101516bffffffffffffffffffffffff1611615558576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180616a3c6025913960400191505060405180910390fd5b8189828151811061556557fe5b60200260200101516bffffffffffffffffffffffff16116155ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f7264657220746f6f20736d616c6c000000000000000000000000000000000081525060200191505060405180910390fd5b615658615622858c848151811061560157fe5b60200260200101518c858151811061561557fe5b6020026020010151614380565b89838151811061562e57fe5b6020026020010151600460008f81526020019081526020016000206160e79092919063ffffffff16565b156157215761569189828151811061566c57fe5b60200260200101516bffffffffffffffffffffffff16846140a390919063ffffffff16565b92508367ffffffffffffffff168b7f9304f2fc7ed6d42c0400e678dbc7283e1e9054889c3afea5f965adff66ef9eac8c84815181106156cc57fe5b60200260200101518c85815181106156e057fe5b602002602001015160405180836bffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff1681526020019250505060405180910390a35b80806001019150506154d5565b50615792333084600560008f815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661423a909392919063ffffffff16565b5050979650505050505050565b60008484905011615818576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f5a65726f206e616d65206973206e6f7420616c6c6f776564000000000000000081525060200191505060405180910390fd5b60008282905011615891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f53686f756c64206e6f74206265206120656d707479206461746100000000000081525060200191505060405180910390fd5b600067ffffffffffffffff1660018585604051808383808284378083019250505092505050908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff1614156159b057600361593b85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050613bbf565b908060018154018082558091505060019003906000526020600020016000909190919091505560038054905060018585604051808383808284378083019250505092505050908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b604051806060016040528060018686604051808383808284378083019250505092505050908152602001604051809103902060000160009054906101000a900463ffffffff1663ffffffff1681526020014267ffffffffffffffff16815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525060018585604051808383808284378083019250505092505050908152602001604051809103902060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151816001019080519060200190615af2929190616839565b50905050838360405180838380828437808301925050509250505060405180910390207fbaa206e5ea800eb88bce099f453fee53295b793b9d5d1cfc4ce4b6db06a34f53838360405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a250505050565b600067ffffffffffffffff1660018383604051808383808284378083019250505092505050908152602001604051809103902060000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff161415615c47576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f446f63756d656e742073686f756c64206578697374000000000000000000000081525060200191505060405180910390fd5b60006001808484604051808383808284378083019250505092505050908152602001604051809103902060000160009054906101000a900463ffffffff160390506001600380549050038163ffffffff1614615d9257600360016003805490500381548110615cb257fe5b906000526020600020015460038263ffffffff1681548110615cd057fe5b9060005260206000200181905550600181016001615d0a60038463ffffffff1681548110615cfa57fe5b906000526020600020015461388c565b6040518082805190602001908083835b60208310615d3d5780518252602082019150602081019050602083039250615d1a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160006101000a81548163ffffffff021916908363ffffffff1602179055505b6003805480615d9d57fe5b60019003818190600052602060002001600090559055828260405180838380828437808301925050509250505060405180910390207f4b5338540b4d1c0f6dd0308a25f633b7ff60472f894d711cff9dd64e35c613b26001858560405180838380828437808301925050509250505090815260200160405180910390206001016040518080602001828103825283818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015615ea65780601f10615e7b57610100808354040283529160200191615ea6565b820191906000526020600020905b815481529060010190602001808311615e8957829003601f168201915b50509250505060405180910390a2600183836040518083838082843780830192505050925050509081526020016040518091039020600080820160006101000a81549063ffffffff02191690556000820160046101000a81549067ffffffffffffffff0219169055600182016000615f1e91906168b9565b5050505050565b6060615f87826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166163959092919063ffffffff16565b905060008151111561600f57808060200190516020811015615fa857600080fd5b810190808051906020019092919050505061600e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180616c94602a913960400191505060405180910390fd5b5b505050565b600061602083836163ad565b616092576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d757374206861766520494420746f206765742041646472657373000000000081525060200191505060405180910390fd5b8260000160006001840167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000806160f384614921565b9250505060006bffffffffffffffffffffffff16816bffffffffffffffffffffffff16141561618a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f496e73657274696e67207a65726f206973206e6f7420737570706f727465640081525060200191505060405180910390fd5b600160001b84141580156161c157507fffffffffffffffffffffffffffffffffffffffff00000000000000000000000160001b8414155b616233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f496e73657274696e6720656c656d656e74206973206e6f742076616c6964000081525060200191505060405180910390fd5b61623d8585614cae565b1561624c57600091505061638e565b600160001b831415801561627757506000801b85600101600085815260200190815260200160002054145b1561628657600091505061638e565b6162998484614d2790919063ffffffff16565b6162a757600091505061638e565b5b6000801b8560000160008581526020019081526020016000205414156162e5578460010160008481526020019081526020016000205492506162a8565b6000808490505b80915086600001600082815260200190815260200160002054905061631a8682614d2790919063ffffffff16565b6162ec578587600001600084815260200190815260200160002081905550858760010160008381526020019081526020016000208190555081876001016000888152602001908152602001600020819055508087600001600088815260200190815260200160002081905550600193505050505b9392505050565b60606163a48484600085616433565b90509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168360000160006001850167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415905092915050565b60608247101561648e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180616a836026913960400191505060405180910390fd5b616497856165dc565b616509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106165595780518252602082019150602081019050602083039250616536565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146165bb576040519150601f19603f3d011682016040523d82523d6000602084013e6165c0565b606091505b50915091506165d08282866165ef565b92505050949350505050565b600080823b905060008111915050919050565b606083156165ff578290506166b4565b6000835111156166125782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561667957808201518184015260208101905061665e565b50505050905090810190601f1680156166a65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106166fc57805160ff191683800117855561672a565b8280016001018555821561672a579182015b8281111561672957825182559160200191906001019061670e565b5b5090506167379190616901565b5090565b50805460018160011615610100020316600290046000825580601f106167615750616780565b601f01602090049060005260206000209081019061677f9190616901565b5b50565b604051806101c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600080191681526020016000815260200160008152602001600080191681526020016000801916815260200160006bffffffffffffffffffffffff16815260200160001515815260200160001515815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061687a57805160ff19168380011785556168a8565b828001600101855582156168a8579182015b828111156168a757825182559160200191906001019061688c565b5b5090506168b59190616901565b5090565b50805460018160011615610100020316600290046000825580601f106168df57506168fe565b601f0160209004906000526020600020908101906168fd9190616901565b5b50565b5b8082111561691a576000816000905550600101616902565b509056fe53616665436173743a2076616c756520646f65736e27742066697420696e20393620626974736e6f7420616c6c6f77656420746f20736574746c652061756374696f6e2061746f6d6963616c6c7970726563616c63756c61746553656c6c416d6f756e7453756d20697320616c726561647920746f6f20616476616e6365644f6e6c792074686520757365722063616e2063616e63656c20686973206f72646572734f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373746f6b656e732063616e6e6f742062652061756374696f6e656420666f7220667265656e6f206c6f6e67657220696e206f7264657220706c6163656d656e7420616e642063616e63656c6174696f6e2070686173655f6d696e427579416d6f756e7473206d7573742062652067726561746572207468616e2030547279696e6720746f20676574206e657874206f66206c61737420656c656d656e74416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c466565206973206e6f7420616c6c6f77656420746f2062652073657420686967686572207468616e20312e352561756374696f6e20656e642064617465206d75737420626520696e20746865206675747572654f6e6c79206f6e65206f726465722063616e20626520706c616365642061746f6d6963616c6c79547279696e6720746f20676574206e657874206f66206e6f6e2d6578697374656e7420656c656d656e746d696e696d756d42696464696e67416d6f756e745065724f72646572206973206e6f7420616c6c6f77656420746f206265207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753616665436173743a2076616c756520646f65736e27742066697420696e20363420626974736f6e6c7920616c6c6f77656420746f20636c61696d20666f722073616d65207573657241756374696f6e206e6f7420696e20736f6c7574696f6e207375626d697373696f6e20706861736575736572206973206e6f7420616c6c6f77656420746f20706c6163652073616d65206f726465722074776963656c696d6974207072696365206e6f7420626574746572207468616e206d696d696d616c206f6666657274696d6520706572696f647320617265206e6f7420636f6e6669677572656420636f72726563746c795361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565646e6f206c6f6e67657220696e206f7264657220706c6163656d656e74207068617365a26469706673582212205f6c77bf119403eb2b57dbe6d6cb783a48d5e18962b31a825fdde4b51582a37564736f6c634300060c003378a02bfcbb964ea279f11e1c4993ad04c0e2158fb466b0195d13d18f8ba79c2ffee2a046d78d21cdbd80903c330dcbb8e99bc0b69b71d99f41bd62873e6ad0e449f65e"
  }
}